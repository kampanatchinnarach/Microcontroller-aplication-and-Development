
Lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f58  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800323c  0800323c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800323c  0800323c  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003244  08003244  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003244  08003244  00013244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003248  08003248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800324c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08003258  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08003258  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d57  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000190e  00000000  00000000  00029dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000760  00000000  00000000  0002b6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005a9  00000000  00000000  0002be48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026aad  00000000  00000000  0002c3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ac0d  00000000  00000000  00052e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f030a  00000000  00000000  0005daab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c70  00000000  00000000  0014ddb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0014fa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003138 	.word	0x08003138

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003138 	.word	0x08003138

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b970 	b.w	8000540 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	460f      	mov	r7, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4694      	mov	ip, r2
 800028c:	d965      	bls.n	800035a <__udivmoddi4+0xe2>
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	b143      	cbz	r3, 80002a6 <__udivmoddi4+0x2e>
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	f1c3 0220 	rsb	r2, r3, #32
 800029c:	409f      	lsls	r7, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	409c      	lsls	r4, r3
 80002a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002aa:	fa1f f58c 	uxth.w	r5, ip
 80002ae:	fbb7 f1fe 	udiv	r1, r7, lr
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002bc:	fb01 f005 	mul.w	r0, r1, r5
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x62>
 80002c4:	eb1c 0202 	adds.w	r2, ip, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002cc:	f080 811c 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002d0:	4290      	cmp	r0, r2
 80002d2:	f240 8119 	bls.w	8000508 <__udivmoddi4+0x290>
 80002d6:	3902      	subs	r1, #2
 80002d8:	4462      	add	r2, ip
 80002da:	1a12      	subs	r2, r2, r0
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ea:	fb00 f505 	mul.w	r5, r0, r5
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x90>
 80002f2:	eb1c 0404 	adds.w	r4, ip, r4
 80002f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fa:	f080 8107 	bcs.w	800050c <__udivmoddi4+0x294>
 80002fe:	42a5      	cmp	r5, r4
 8000300:	f240 8104 	bls.w	800050c <__udivmoddi4+0x294>
 8000304:	4464      	add	r4, ip
 8000306:	3802      	subs	r0, #2
 8000308:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	2100      	movs	r1, #0
 8000310:	b11e      	cbz	r6, 800031a <__udivmoddi4+0xa2>
 8000312:	40dc      	lsrs	r4, r3
 8000314:	2300      	movs	r3, #0
 8000316:	e9c6 4300 	strd	r4, r3, [r6]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xbc>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80ed 	beq.w	8000502 <__udivmoddi4+0x28a>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c6 0500 	strd	r0, r5, [r6]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d149      	bne.n	80003d0 <__udivmoddi4+0x158>
 800033c:	42ab      	cmp	r3, r5
 800033e:	d302      	bcc.n	8000346 <__udivmoddi4+0xce>
 8000340:	4282      	cmp	r2, r0
 8000342:	f200 80f8 	bhi.w	8000536 <__udivmoddi4+0x2be>
 8000346:	1a84      	subs	r4, r0, r2
 8000348:	eb65 0203 	sbc.w	r2, r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	4617      	mov	r7, r2
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0e2      	beq.n	800031a <__udivmoddi4+0xa2>
 8000354:	e9c6 4700 	strd	r4, r7, [r6]
 8000358:	e7df      	b.n	800031a <__udivmoddi4+0xa2>
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xe6>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f382 	clz	r3, r2
 8000362:	2b00      	cmp	r3, #0
 8000364:	f040 8090 	bne.w	8000488 <__udivmoddi4+0x210>
 8000368:	1a8a      	subs	r2, r1, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2101      	movs	r1, #1
 8000374:	fbb2 f5f7 	udiv	r5, r2, r7
 8000378:	fb07 2015 	mls	r0, r7, r5, r2
 800037c:	0c22      	lsrs	r2, r4, #16
 800037e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000382:	fb0e f005 	mul.w	r0, lr, r5
 8000386:	4290      	cmp	r0, r2
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x124>
 800038a:	eb1c 0202 	adds.w	r2, ip, r2
 800038e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4290      	cmp	r0, r2
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2b8>
 800039a:	4645      	mov	r5, r8
 800039c:	1a12      	subs	r2, r2, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x14e>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x14c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c2>
 80003c4:	4610      	mov	r0, r2
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ce:	e79f      	b.n	8000310 <__udivmoddi4+0x98>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa05 f401 	lsl.w	r4, r5, r1
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	40fd      	lsrs	r5, r7
 80003e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ec:	4323      	orrs	r3, r4
 80003ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80003f2:	fa1f fe8c 	uxth.w	lr, ip
 80003f6:	fb09 5518 	mls	r5, r9, r8, r5
 80003fa:	0c1c      	lsrs	r4, r3, #16
 80003fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000400:	fb08 f50e 	mul.w	r5, r8, lr
 8000404:	42a5      	cmp	r5, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	fa00 f001 	lsl.w	r0, r0, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2b4>
 800041c:	42a5      	cmp	r5, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2b4>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	b29d      	uxth	r5, r3
 800042c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000430:	fb09 4413 	mls	r4, r9, r3, r4
 8000434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000438:	fb03 fe0e 	mul.w	lr, r3, lr
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f103 35ff 	add.w	r5, r3, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2ac>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2ac>
 800044e:	3b02      	subs	r3, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fba3 9502 	umull	r9, r5, r3, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x29c>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x298>
 8000468:	b156      	cbz	r6, 8000480 <__udivmoddi4+0x208>
 800046a:	ebb0 0208 	subs.w	r2, r0, r8
 800046e:	eb64 040e 	sbc.w	r4, r4, lr
 8000472:	fa04 f707 	lsl.w	r7, r4, r7
 8000476:	40ca      	lsrs	r2, r1
 8000478:	40cc      	lsrs	r4, r1
 800047a:	4317      	orrs	r7, r2
 800047c:	e9c6 7400 	strd	r7, r4, [r6]
 8000480:	4618      	mov	r0, r3
 8000482:	2100      	movs	r1, #0
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	f1c3 0120 	rsb	r1, r3, #32
 800048c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000490:	fa20 f201 	lsr.w	r2, r0, r1
 8000494:	fa25 f101 	lsr.w	r1, r5, r1
 8000498:	409d      	lsls	r5, r3
 800049a:	432a      	orrs	r2, r5
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004b2:	fb00 f50e 	mul.w	r5, r0, lr
 80004b6:	428d      	cmp	r5, r1
 80004b8:	fa04 f403 	lsl.w	r4, r4, r3
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x258>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1b49      	subs	r1, r1, r5
 80004d2:	b292      	uxth	r2, r2
 80004d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d8:	fb07 1115 	mls	r1, r7, r5, r1
 80004dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e0:	fb05 f10e 	mul.w	r1, r5, lr
 80004e4:	4291      	cmp	r1, r2
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x282>
 80004e8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2a8>
 80004f6:	3d02      	subs	r5, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a52      	subs	r2, r2, r1
 80004fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0xfc>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xa2>
 8000508:	4639      	mov	r1, r7
 800050a:	e6e6      	b.n	80002da <__udivmoddi4+0x62>
 800050c:	4610      	mov	r0, r2
 800050e:	e6fb      	b.n	8000308 <__udivmoddi4+0x90>
 8000510:	4548      	cmp	r0, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3b01      	subs	r3, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f0>
 8000520:	4645      	mov	r5, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x282>
 8000524:	462b      	mov	r3, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1da>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x258>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b0>
 8000530:	3d02      	subs	r5, #2
 8000532:	4462      	add	r2, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x124>
 8000536:	4608      	mov	r0, r1
 8000538:	e70a      	b.n	8000350 <__udivmoddi4+0xd8>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x14e>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800055a:	4b29      	ldr	r3, [pc, #164]	; (8000600 <MX_GPIO_Init+0xbc>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a28      	ldr	r2, [pc, #160]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000560:	f043 0320 	orr.w	r3, r3, #32
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b26      	ldr	r3, [pc, #152]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0320 	and.w	r3, r3, #32
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000572:	4b23      	ldr	r3, [pc, #140]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a22      	ldr	r2, [pc, #136]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000578:	f043 0310 	orr.w	r3, r3, #16
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0310 	and.w	r3, r3, #16
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <MX_GPIO_Init+0xbc>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a1c      	ldr	r2, [pc, #112]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000590:	f043 0308 	orr.w	r3, r3, #8
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0308 	and.w	r3, r3, #8
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a8:	4816      	ldr	r0, [pc, #88]	; (8000604 <MX_GPIO_Init+0xc0>)
 80005aa:	f000 feb5 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b4:	4814      	ldr	r0, [pc, #80]	; (8000608 <MX_GPIO_Init+0xc4>)
 80005b6:	f000 feaf 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	4619      	mov	r1, r3
 80005d2:	480c      	ldr	r0, [pc, #48]	; (8000604 <MX_GPIO_Init+0xc0>)
 80005d4:	f000 fcf4 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_GPIO_Init+0xc4>)
 80005f2:	f000 fce5 	bl	8000fc0 <HAL_GPIO_Init>

}
 80005f6:	bf00      	nop
 80005f8:	3720      	adds	r7, #32
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40021400 	.word	0x40021400
 8000608:	40021000 	.word	0x40021000

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b0b6      	sub	sp, #216	; 0xd8
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 faf2 	bl	8000bfa <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000616:	f000 f9a5 	bl	8000964 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f935 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f7ff ff91 	bl	8000544 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000622:	f000 fa31 	bl	8000a88 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //ข้อ4
 	char str[] = "\r\nDisplay Blinking LED PRESS(1,2)\n\rDisplay Group Members PRESS m\n\rQuit PRESS q";
 8000626:	4a90      	ldr	r2, [pc, #576]	; (8000868 <main+0x25c>)
 8000628:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800062c:	4611      	mov	r1, r2
 800062e:	224f      	movs	r2, #79	; 0x4f
 8000630:	4618      	mov	r0, r3
 8000632:	f002 fd73 	bl	800311c <memcpy>
 	HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 1000);
 8000636:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff fdfc 	bl	8000238 <strlen>
 8000640:	4603      	mov	r3, r0
 8000642:	b29a      	uxth	r2, r3
 8000644:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8000648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064c:	4887      	ldr	r0, [pc, #540]	; (800086c <main+0x260>)
 800064e:	f001 ffd7 	bl	8002600 <HAL_UART_Transmit>
	char ch;
	char q[] = "\r\n quit";
	*/

	//ข้อ4
	char in[] = "\r\ninput =>";
 8000652:	4a87      	ldr	r2, [pc, #540]	; (8000870 <main+0x264>)
 8000654:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000658:	ca07      	ldmia	r2, {r0, r1, r2}
 800065a:	c303      	stmia	r3!, {r0, r1}
 800065c:	801a      	strh	r2, [r3, #0]
 800065e:	3302      	adds	r3, #2
 8000660:	0c12      	lsrs	r2, r2, #16
 8000662:	701a      	strb	r2, [r3, #0]
	char ch;
	char q[] = "\r\n quit";
 8000664:	4a83      	ldr	r2, [pc, #524]	; (8000874 <main+0x268>)
 8000666:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800066a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800066e:	e883 0003 	stmia.w	r3, {r0, r1}
	char unknow[] = "\r\nunknow command";
 8000672:	4b81      	ldr	r3, [pc, #516]	; (8000878 <main+0x26c>)
 8000674:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8000678:	461d      	mov	r5, r3
 800067a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067e:	682b      	ldr	r3, [r5, #0]
 8000680:	7023      	strb	r3, [r4, #0]
	char m[] = "\r\n64010035\r\nKanyapak Boonyapas\r\n64010042\r\nKampanat Chinnarach\r\n64010459\r\nBoonyawee Kreesang";
 8000682:	4a7e      	ldr	r2, [pc, #504]	; (800087c <main+0x270>)
 8000684:	463b      	mov	r3, r7
 8000686:	4611      	mov	r1, r2
 8000688:	225c      	movs	r2, #92	; 0x5c
 800068a:	4618      	mov	r0, r3
 800068c:	f002 fd46 	bl	800311c <memcpy>
	while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET ){}
 8000690:	bf00      	nop
 8000692:	4b76      	ldr	r3, [pc, #472]	; (800086c <main+0x260>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	69db      	ldr	r3, [r3, #28]
 8000698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800069c:	2b40      	cmp	r3, #64	; 0x40
 800069e:	d1f8      	bne.n	8000692 <main+0x86>
	HAL_UART_Transmit(&huart3, (uint8_t*)in,strlen(in), 1000);
 80006a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fdc7 	bl	8000238 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80006b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b6:	486d      	ldr	r0, [pc, #436]	; (800086c <main+0x260>)
 80006b8:	f001 ffa2 	bl	8002600 <HAL_UART_Transmit>
	while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)==RESET ){}
 80006bc:	bf00      	nop
 80006be:	4b6b      	ldr	r3, [pc, #428]	; (800086c <main+0x260>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	69db      	ldr	r3, [r3, #28]
 80006c4:	f003 0320 	and.w	r3, r3, #32
 80006c8:	2b20      	cmp	r3, #32
 80006ca:	d1f8      	bne.n	80006be <main+0xb2>
	HAL_UART_Receive(&huart3,(uint8_t*)&ch,1,1000);
 80006cc:	f107 017b 	add.w	r1, r7, #123	; 0x7b
 80006d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d4:	2201      	movs	r2, #1
 80006d6:	4865      	ldr	r0, [pc, #404]	; (800086c <main+0x260>)
 80006d8:	f002 f815 	bl	8002706 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch,1, 1000);
 80006dc:	f107 017b 	add.w	r1, r7, #123	; 0x7b
 80006e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e4:	2201      	movs	r2, #1
 80006e6:	4861      	ldr	r0, [pc, #388]	; (800086c <main+0x260>)
 80006e8:	f001 ff8a 	bl	8002600 <HAL_UART_Transmit>

	if(ch == '1'){
 80006ec:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80006f0:	2b31      	cmp	r3, #49	; 0x31
 80006f2:	d13c      	bne.n	800076e <main+0x162>

		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fa:	4861      	ldr	r0, [pc, #388]	; (8000880 <main+0x274>)
 80006fc:	f000 fe0c 	bl	8001318 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000700:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000704:	f000 fad6 	bl	8000cb4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070e:	485c      	ldr	r0, [pc, #368]	; (8000880 <main+0x274>)
 8000710:	f000 fe02 	bl	8001318 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000714:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000718:	f000 facc 	bl	8000cb4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, SET);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000722:	4857      	ldr	r0, [pc, #348]	; (8000880 <main+0x274>)
 8000724:	f000 fdf8 	bl	8001318 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000728:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800072c:	f000 fac2 	bl	8000cb4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000736:	4852      	ldr	r0, [pc, #328]	; (8000880 <main+0x274>)
 8000738:	f000 fdee 	bl	8001318 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 800073c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000740:	f000 fab8 	bl	8000cb4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, SET);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074a:	484d      	ldr	r0, [pc, #308]	; (8000880 <main+0x274>)
 800074c:	f000 fde4 	bl	8001318 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000750:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000754:	f000 faae 	bl	8000cb4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075e:	4848      	ldr	r0, [pc, #288]	; (8000880 <main+0x274>)
 8000760:	f000 fdda 	bl	8001318 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000764:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000768:	f000 faa4 	bl	8000cb4 <HAL_Delay>
 800076c:	e073      	b.n	8000856 <main+0x24a>




	}
	else if(ch == '2'){
 800076e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000772:	2b32      	cmp	r3, #50	; 0x32
 8000774:	d13c      	bne.n	80007f0 <main+0x1e4>

				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, SET);
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800077c:	4841      	ldr	r0, [pc, #260]	; (8000884 <main+0x278>)
 800077e:	f000 fdcb 	bl	8001318 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8000782:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000786:	f000 fa95 	bl	8000cb4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000790:	483c      	ldr	r0, [pc, #240]	; (8000884 <main+0x278>)
 8000792:	f000 fdc1 	bl	8001318 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8000796:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800079a:	f000 fa8b 	bl	8000cb4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a4:	4837      	ldr	r0, [pc, #220]	; (8000884 <main+0x278>)
 80007a6:	f000 fdb7 	bl	8001318 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 80007aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007ae:	f000 fa81 	bl	8000cb4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b8:	4832      	ldr	r0, [pc, #200]	; (8000884 <main+0x278>)
 80007ba:	f000 fdad 	bl	8001318 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 80007be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007c2:	f000 fa77 	bl	8000cb4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007cc:	482d      	ldr	r0, [pc, #180]	; (8000884 <main+0x278>)
 80007ce:	f000 fda3 	bl	8001318 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 80007d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007d6:	f000 fa6d 	bl	8000cb4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e0:	4828      	ldr	r0, [pc, #160]	; (8000884 <main+0x278>)
 80007e2:	f000 fd99 	bl	8001318 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 80007e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007ea:	f000 fa63 	bl	8000cb4 <HAL_Delay>
 80007ee:	e032      	b.n	8000856 <main+0x24a>




	}
	else if(ch == 'm'){
 80007f0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80007f4:	2b6d      	cmp	r3, #109	; 0x6d
 80007f6:	d10c      	bne.n	8000812 <main+0x206>
		HAL_UART_Transmit(&huart3, (uint8_t*)m,strlen(m), 1000);
 80007f8:	463b      	mov	r3, r7
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fd1c 	bl	8000238 <strlen>
 8000800:	4603      	mov	r3, r0
 8000802:	b29a      	uxth	r2, r3
 8000804:	4639      	mov	r1, r7
 8000806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080a:	4818      	ldr	r0, [pc, #96]	; (800086c <main+0x260>)
 800080c:	f001 fef8 	bl	8002600 <HAL_UART_Transmit>
 8000810:	e021      	b.n	8000856 <main+0x24a>
	}
	else if(ch == 'q'){
 8000812:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000816:	2b71      	cmp	r3, #113	; 0x71
 8000818:	d10f      	bne.n	800083a <main+0x22e>
		HAL_UART_Transmit(&huart3, (uint8_t*)q, strlen(q), 1000);
 800081a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fd0a 	bl	8000238 <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	b29a      	uxth	r2, r3
 8000828:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800082c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000830:	480e      	ldr	r0, [pc, #56]	; (800086c <main+0x260>)
 8000832:	f001 fee5 	bl	8002600 <HAL_UART_Transmit>
 8000836:	2300      	movs	r3, #0
 8000838:	e012      	b.n	8000860 <main+0x254>
		break;
	}
	else{
		HAL_UART_Transmit(&huart3, (uint8_t*)unknow, strlen(unknow), 1000);
 800083a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fcfa 	bl	8000238 <strlen>
 8000844:	4603      	mov	r3, r0
 8000846:	b29a      	uxth	r2, r3
 8000848:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800084c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <main+0x260>)
 8000852:	f001 fed5 	bl	8002600 <HAL_UART_Transmit>
  */



 //ข้อ4
 HAL_Delay(500);
 8000856:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085a:	f000 fa2b 	bl	8000cb4 <HAL_Delay>
while(1){
 800085e:	e6f8      	b.n	8000652 <main+0x46>
}
  /* USER CODE END 3 */
}
 8000860:	4618      	mov	r0, r3
 8000862:	37d8      	adds	r7, #216	; 0xd8
 8000864:	46bd      	mov	sp, r7
 8000866:	bdb0      	pop	{r4, r5, r7, pc}
 8000868:	08003150 	.word	0x08003150
 800086c:	20000028 	.word	0x20000028
 8000870:	080031a0 	.word	0x080031a0
 8000874:	080031ac 	.word	0x080031ac
 8000878:	080031b4 	.word	0x080031b4
 800087c:	080031c8 	.word	0x080031c8
 8000880:	40021400 	.word	0x40021400
 8000884:	40021000 	.word	0x40021000

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b094      	sub	sp, #80	; 0x50
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	2234      	movs	r2, #52	; 0x34
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f002 fc13 	bl	80030c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ac:	4b2b      	ldr	r3, [pc, #172]	; (800095c <SystemClock_Config+0xd4>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a2a      	ldr	r2, [pc, #168]	; (800095c <SystemClock_Config+0xd4>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
 80008b8:	4b28      	ldr	r3, [pc, #160]	; (800095c <SystemClock_Config+0xd4>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c4:	4b26      	ldr	r3, [pc, #152]	; (8000960 <SystemClock_Config+0xd8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a25      	ldr	r2, [pc, #148]	; (8000960 <SystemClock_Config+0xd8>)
 80008ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	4b23      	ldr	r3, [pc, #140]	; (8000960 <SystemClock_Config+0xd8>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008dc:	2302      	movs	r3, #2
 80008de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e0:	2301      	movs	r3, #1
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e4:	2310      	movs	r3, #16
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e8:	2302      	movs	r3, #2
 80008ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ec:	2300      	movs	r3, #0
 80008ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008f0:	2308      	movs	r3, #8
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008f4:	23d8      	movs	r3, #216	; 0xd8
 80008f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000900:	2302      	movs	r3, #2
 8000902:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fd6f 	bl	80013ec <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000914:	f000 f852 	bl	80009bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000918:	f000 fd18 	bl	800134c <HAL_PWREx_EnableOverDrive>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000922:	f000 f84b 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000926:	230f      	movs	r3, #15
 8000928:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092a:	2302      	movs	r3, #2
 800092c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000932:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000936:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	2107      	movs	r1, #7
 8000944:	4618      	mov	r0, r3
 8000946:	f000 ffff 	bl	8001948 <HAL_RCC_ClockConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000950:	f000 f834 	bl	80009bc <Error_Handler>
  }
}
 8000954:	bf00      	nop
 8000956:	3750      	adds	r7, #80	; 0x50
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40007000 	.word	0x40007000

08000964 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800096a:	463b      	mov	r3, r7
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000976:	f000 faa7 	bl	8000ec8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800097a:	2301      	movs	r3, #1
 800097c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800097e:	2300      	movs	r3, #0
 8000980:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000986:	231f      	movs	r3, #31
 8000988:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800098a:	2387      	movs	r3, #135	; 0x87
 800098c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800098e:	2300      	movs	r3, #0
 8000990:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000992:	2300      	movs	r3, #0
 8000994:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000996:	2301      	movs	r3, #1
 8000998:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800099a:	2301      	movs	r3, #1
 800099c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009a6:	463b      	mov	r3, r7
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 fac5 	bl	8000f38 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009ae:	2004      	movs	r0, #4
 80009b0:	f000 faa2 	bl	8000ef8 <HAL_MPU_Enable>

}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x44>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_MspInit+0x44>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_MspInit+0x44>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_MspInit+0x44>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x44>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	; 0x44
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x44>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <NMI_Handler+0x4>

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler+0x4>

08000a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5c:	f000 f90a 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000a8e:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <MX_USART3_UART_Init+0x5c>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000acc:	f001 fd4a 	bl	8002564 <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ad6:	f7ff ff71 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000028 	.word	0x20000028
 8000ae4:	40004800 	.word	0x40004800

08000ae8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b0ae      	sub	sp, #184	; 0xb8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2290      	movs	r2, #144	; 0x90
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f002 fada 	bl	80030c2 <memset>
  if(uartHandle->Instance==USART3)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d13c      	bne.n	8000b92 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 f8f4 	bl	8001d14 <HAL_RCCEx_PeriphCLKConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b32:	f7ff ff43 	bl	80009bc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <HAL_UART_MspInit+0xb8>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a19      	ldr	r2, [pc, #100]	; (8000ba0 <HAL_UART_MspInit+0xb8>)
 8000b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <HAL_UART_MspInit+0xb8>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_UART_MspInit+0xb8>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <HAL_UART_MspInit+0xb8>)
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_UART_MspInit+0xb8>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0308 	and.w	r3, r3, #8
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b80:	2307      	movs	r3, #7
 8000b82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <HAL_UART_MspInit+0xbc>)
 8000b8e:	f000 fa17 	bl	8000fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b92:	bf00      	nop
 8000b94:	37b8      	adds	r7, #184	; 0xb8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40004800 	.word	0x40004800
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020c00 	.word	0x40020c00

08000ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bae:	490e      	ldr	r1, [pc, #56]	; (8000be8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb0:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bc4:	4c0b      	ldr	r4, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bd2:	f7ff ff47 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f002 fa7d 	bl	80030d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bda:	f7ff fd17 	bl	800060c <main>
  bx  lr    
 8000bde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bec:	0800324c 	.word	0x0800324c
  ldr r2, =_sbss
 8000bf0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bf4:	200000b4 	.word	0x200000b4

08000bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC_IRQHandler>

08000bfa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f000 f92e 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c04:	200f      	movs	r0, #15
 8000c06:	f000 f805 	bl	8000c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0a:	f7ff fedd 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x54>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x58>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f93b 	bl	8000eae <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00e      	b.n	8000c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d80a      	bhi.n	8000c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f000 f911 	bl	8000e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <HAL_InitTick+0x5c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	200000b0 	.word	0x200000b0

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	200000b0 	.word	0x200000b0

08000cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cbc:	f7ff ffee 	bl	8000c9c <HAL_GetTick>
 8000cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ccc:	d005      	beq.n	8000cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_Delay+0x44>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cda:	bf00      	nop
 8000cdc:	f7ff ffde 	bl	8000c9c <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d8f7      	bhi.n	8000cdc <HAL_Delay+0x28>
  {
  }
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <__NVIC_SetPriorityGrouping+0x40>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <__NVIC_SetPriorityGrouping+0x40>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00
 8000d40:	05fa0000 	.word	0x05fa0000

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f7ff ff8e 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff47 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e88:	f7ff ff5c 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff ff8e 	bl	8000db4 <NVIC_EncodePriority>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff5d 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffb0 	bl	8000e1c <SysTick_Config>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000ecc:	f3bf 8f5f 	dmb	sy
}
 8000ed0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <HAL_MPU_Disable+0x28>)
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed6:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_MPU_Disable+0x28>)
 8000ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000edc:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_MPU_Disable+0x2c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00
 8000ef4:	e000ed90 	.word	0xe000ed90

08000ef8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f00:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <HAL_MPU_Enable+0x38>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_MPU_Enable+0x3c>)
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0e:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <HAL_MPU_Enable+0x3c>)
 8000f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f14:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f16:	f3bf 8f4f 	dsb	sy
}
 8000f1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f1c:	f3bf 8f6f 	isb	sy
}
 8000f20:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed90 	.word	0xe000ed90
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	785a      	ldrb	r2, [r3, #1]
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_MPU_ConfigRegion+0x84>)
 8000f46:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d029      	beq.n	8000fa4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000f50:	4a1a      	ldr	r2, [pc, #104]	; (8000fbc <HAL_MPU_ConfigRegion+0x84>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7b1b      	ldrb	r3, [r3, #12]
 8000f5c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7adb      	ldrb	r3, [r3, #11]
 8000f62:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7a9b      	ldrb	r3, [r3, #10]
 8000f6a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7b5b      	ldrb	r3, [r3, #13]
 8000f72:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7b9b      	ldrb	r3, [r3, #14]
 8000f7a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	7bdb      	ldrb	r3, [r3, #15]
 8000f82:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f84:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	7a5b      	ldrb	r3, [r3, #9]
 8000f8a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f8c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7a1b      	ldrb	r3, [r3, #8]
 8000f92:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f94:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	7812      	ldrb	r2, [r2, #0]
 8000f9a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f9e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fa0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000fa2:	e005      	b.n	8000fb0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <HAL_MPU_ConfigRegion+0x84>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <HAL_MPU_ConfigRegion+0x84>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed90 	.word	0xe000ed90

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
 8000fde:	e175      	b.n	80012cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	f040 8164 	bne.w	80012c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d005      	beq.n	8001016 <HAL_GPIO_Init+0x56>
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d130      	bne.n	8001078 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	f003 0201 	and.w	r2, r3, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b03      	cmp	r3, #3
 8001082:	d017      	beq.n	80010b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d123      	bne.n	8001108 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3208      	adds	r2, #8
 8001102:	69b9      	ldr	r1, [r7, #24]
 8001104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0203 	and.w	r2, r3, #3
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80be 	beq.w	80012c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	4b66      	ldr	r3, [pc, #408]	; (80012e4 <HAL_GPIO_Init+0x324>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a65      	ldr	r2, [pc, #404]	; (80012e4 <HAL_GPIO_Init+0x324>)
 8001150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001154:	6453      	str	r3, [r2, #68]	; 0x44
 8001156:	4b63      	ldr	r3, [pc, #396]	; (80012e4 <HAL_GPIO_Init+0x324>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001162:	4a61      	ldr	r2, [pc, #388]	; (80012e8 <HAL_GPIO_Init+0x328>)
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	3302      	adds	r3, #2
 800116a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	220f      	movs	r2, #15
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a58      	ldr	r2, [pc, #352]	; (80012ec <HAL_GPIO_Init+0x32c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d037      	beq.n	80011fe <HAL_GPIO_Init+0x23e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a57      	ldr	r2, [pc, #348]	; (80012f0 <HAL_GPIO_Init+0x330>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d031      	beq.n	80011fa <HAL_GPIO_Init+0x23a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a56      	ldr	r2, [pc, #344]	; (80012f4 <HAL_GPIO_Init+0x334>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d02b      	beq.n	80011f6 <HAL_GPIO_Init+0x236>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a55      	ldr	r2, [pc, #340]	; (80012f8 <HAL_GPIO_Init+0x338>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d025      	beq.n	80011f2 <HAL_GPIO_Init+0x232>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a54      	ldr	r2, [pc, #336]	; (80012fc <HAL_GPIO_Init+0x33c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01f      	beq.n	80011ee <HAL_GPIO_Init+0x22e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a53      	ldr	r2, [pc, #332]	; (8001300 <HAL_GPIO_Init+0x340>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d019      	beq.n	80011ea <HAL_GPIO_Init+0x22a>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a52      	ldr	r2, [pc, #328]	; (8001304 <HAL_GPIO_Init+0x344>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0x226>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a51      	ldr	r2, [pc, #324]	; (8001308 <HAL_GPIO_Init+0x348>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00d      	beq.n	80011e2 <HAL_GPIO_Init+0x222>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a50      	ldr	r2, [pc, #320]	; (800130c <HAL_GPIO_Init+0x34c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x21e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4f      	ldr	r2, [pc, #316]	; (8001310 <HAL_GPIO_Init+0x350>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_Init+0x21a>
 80011d6:	2309      	movs	r3, #9
 80011d8:	e012      	b.n	8001200 <HAL_GPIO_Init+0x240>
 80011da:	230a      	movs	r3, #10
 80011dc:	e010      	b.n	8001200 <HAL_GPIO_Init+0x240>
 80011de:	2308      	movs	r3, #8
 80011e0:	e00e      	b.n	8001200 <HAL_GPIO_Init+0x240>
 80011e2:	2307      	movs	r3, #7
 80011e4:	e00c      	b.n	8001200 <HAL_GPIO_Init+0x240>
 80011e6:	2306      	movs	r3, #6
 80011e8:	e00a      	b.n	8001200 <HAL_GPIO_Init+0x240>
 80011ea:	2305      	movs	r3, #5
 80011ec:	e008      	b.n	8001200 <HAL_GPIO_Init+0x240>
 80011ee:	2304      	movs	r3, #4
 80011f0:	e006      	b.n	8001200 <HAL_GPIO_Init+0x240>
 80011f2:	2303      	movs	r3, #3
 80011f4:	e004      	b.n	8001200 <HAL_GPIO_Init+0x240>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_Init+0x240>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_GPIO_Init+0x240>
 80011fe:	2300      	movs	r3, #0
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	f002 0203 	and.w	r2, r2, #3
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	4093      	lsls	r3, r2
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001210:	4935      	ldr	r1, [pc, #212]	; (80012e8 <HAL_GPIO_Init+0x328>)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800121e:	4b3d      	ldr	r3, [pc, #244]	; (8001314 <HAL_GPIO_Init+0x354>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001242:	4a34      	ldr	r2, [pc, #208]	; (8001314 <HAL_GPIO_Init+0x354>)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001248:	4b32      	ldr	r3, [pc, #200]	; (8001314 <HAL_GPIO_Init+0x354>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800126c:	4a29      	ldr	r2, [pc, #164]	; (8001314 <HAL_GPIO_Init+0x354>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001272:	4b28      	ldr	r3, [pc, #160]	; (8001314 <HAL_GPIO_Init+0x354>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001296:	4a1f      	ldr	r2, [pc, #124]	; (8001314 <HAL_GPIO_Init+0x354>)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_GPIO_Init+0x354>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c0:	4a14      	ldr	r2, [pc, #80]	; (8001314 <HAL_GPIO_Init+0x354>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3301      	adds	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2b0f      	cmp	r3, #15
 80012d0:	f67f ae86 	bls.w	8000fe0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40013800 	.word	0x40013800
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020c00 	.word	0x40020c00
 80012fc:	40021000 	.word	0x40021000
 8001300:	40021400 	.word	0x40021400
 8001304:	40021800 	.word	0x40021800
 8001308:	40021c00 	.word	0x40021c00
 800130c:	40022000 	.word	0x40022000
 8001310:	40022400 	.word	0x40022400
 8001314:	40013c00 	.word	0x40013c00

08001318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
 8001324:	4613      	mov	r3, r2
 8001326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001328:	787b      	ldrb	r3, [r7, #1]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001334:	e003      	b.n	800133e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	041a      	lsls	r2, r3, #16
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	619a      	str	r2, [r3, #24]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a22      	ldr	r2, [pc, #136]	; (80013e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001378:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800137a:	f7ff fc8f 	bl	8000c9c <HAL_GetTick>
 800137e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001380:	e009      	b.n	8001396 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001382:	f7ff fc8b 	bl	8000c9c <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001390:	d901      	bls.n	8001396 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e022      	b.n	80013dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a2:	d1ee      	bne.n	8001382 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013b0:	f7ff fc74 	bl	8000c9c <HAL_GetTick>
 80013b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013b6:	e009      	b.n	80013cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013b8:	f7ff fc70 	bl	8000c9c <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013c6:	d901      	bls.n	80013cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e007      	b.n	80013dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013d8:	d1ee      	bne.n	80013b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40007000 	.word	0x40007000

080013ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e29b      	b.n	800193a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 8087 	beq.w	800151e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001410:	4b96      	ldr	r3, [pc, #600]	; (800166c <HAL_RCC_OscConfig+0x280>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 030c 	and.w	r3, r3, #12
 8001418:	2b04      	cmp	r3, #4
 800141a:	d00c      	beq.n	8001436 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800141c:	4b93      	ldr	r3, [pc, #588]	; (800166c <HAL_RCC_OscConfig+0x280>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 030c 	and.w	r3, r3, #12
 8001424:	2b08      	cmp	r3, #8
 8001426:	d112      	bne.n	800144e <HAL_RCC_OscConfig+0x62>
 8001428:	4b90      	ldr	r3, [pc, #576]	; (800166c <HAL_RCC_OscConfig+0x280>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001434:	d10b      	bne.n	800144e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001436:	4b8d      	ldr	r3, [pc, #564]	; (800166c <HAL_RCC_OscConfig+0x280>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d06c      	beq.n	800151c <HAL_RCC_OscConfig+0x130>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d168      	bne.n	800151c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e275      	b.n	800193a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001456:	d106      	bne.n	8001466 <HAL_RCC_OscConfig+0x7a>
 8001458:	4b84      	ldr	r3, [pc, #528]	; (800166c <HAL_RCC_OscConfig+0x280>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a83      	ldr	r2, [pc, #524]	; (800166c <HAL_RCC_OscConfig+0x280>)
 800145e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	e02e      	b.n	80014c4 <HAL_RCC_OscConfig+0xd8>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10c      	bne.n	8001488 <HAL_RCC_OscConfig+0x9c>
 800146e:	4b7f      	ldr	r3, [pc, #508]	; (800166c <HAL_RCC_OscConfig+0x280>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a7e      	ldr	r2, [pc, #504]	; (800166c <HAL_RCC_OscConfig+0x280>)
 8001474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b7c      	ldr	r3, [pc, #496]	; (800166c <HAL_RCC_OscConfig+0x280>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a7b      	ldr	r2, [pc, #492]	; (800166c <HAL_RCC_OscConfig+0x280>)
 8001480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e01d      	b.n	80014c4 <HAL_RCC_OscConfig+0xd8>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0xc0>
 8001492:	4b76      	ldr	r3, [pc, #472]	; (800166c <HAL_RCC_OscConfig+0x280>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a75      	ldr	r2, [pc, #468]	; (800166c <HAL_RCC_OscConfig+0x280>)
 8001498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b73      	ldr	r3, [pc, #460]	; (800166c <HAL_RCC_OscConfig+0x280>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a72      	ldr	r2, [pc, #456]	; (800166c <HAL_RCC_OscConfig+0x280>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e00b      	b.n	80014c4 <HAL_RCC_OscConfig+0xd8>
 80014ac:	4b6f      	ldr	r3, [pc, #444]	; (800166c <HAL_RCC_OscConfig+0x280>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a6e      	ldr	r2, [pc, #440]	; (800166c <HAL_RCC_OscConfig+0x280>)
 80014b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b6c      	ldr	r3, [pc, #432]	; (800166c <HAL_RCC_OscConfig+0x280>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a6b      	ldr	r2, [pc, #428]	; (800166c <HAL_RCC_OscConfig+0x280>)
 80014be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d013      	beq.n	80014f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fbe6 	bl	8000c9c <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fbe2 	bl	8000c9c <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	; 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e229      	b.n	800193a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	4b61      	ldr	r3, [pc, #388]	; (800166c <HAL_RCC_OscConfig+0x280>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0xe8>
 80014f2:	e014      	b.n	800151e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fbd2 	bl	8000c9c <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fbce 	bl	8000c9c <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e215      	b.n	800193a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	4b57      	ldr	r3, [pc, #348]	; (800166c <HAL_RCC_OscConfig+0x280>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x110>
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d069      	beq.n	80015fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800152a:	4b50      	ldr	r3, [pc, #320]	; (800166c <HAL_RCC_OscConfig+0x280>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00b      	beq.n	800154e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001536:	4b4d      	ldr	r3, [pc, #308]	; (800166c <HAL_RCC_OscConfig+0x280>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b08      	cmp	r3, #8
 8001540:	d11c      	bne.n	800157c <HAL_RCC_OscConfig+0x190>
 8001542:	4b4a      	ldr	r3, [pc, #296]	; (800166c <HAL_RCC_OscConfig+0x280>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d116      	bne.n	800157c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154e:	4b47      	ldr	r3, [pc, #284]	; (800166c <HAL_RCC_OscConfig+0x280>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <HAL_RCC_OscConfig+0x17a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d001      	beq.n	8001566 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e1e9      	b.n	800193a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001566:	4b41      	ldr	r3, [pc, #260]	; (800166c <HAL_RCC_OscConfig+0x280>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	493d      	ldr	r1, [pc, #244]	; (800166c <HAL_RCC_OscConfig+0x280>)
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157a:	e040      	b.n	80015fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d023      	beq.n	80015cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001584:	4b39      	ldr	r3, [pc, #228]	; (800166c <HAL_RCC_OscConfig+0x280>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a38      	ldr	r2, [pc, #224]	; (800166c <HAL_RCC_OscConfig+0x280>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fb84 	bl	8000c9c <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001598:	f7ff fb80 	bl	8000c9c <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e1c7      	b.n	800193a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015aa:	4b30      	ldr	r3, [pc, #192]	; (800166c <HAL_RCC_OscConfig+0x280>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b6:	4b2d      	ldr	r3, [pc, #180]	; (800166c <HAL_RCC_OscConfig+0x280>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4929      	ldr	r1, [pc, #164]	; (800166c <HAL_RCC_OscConfig+0x280>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
 80015ca:	e018      	b.n	80015fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_RCC_OscConfig+0x280>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a26      	ldr	r2, [pc, #152]	; (800166c <HAL_RCC_OscConfig+0x280>)
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fb60 	bl	8000c9c <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e0:	f7ff fb5c 	bl	8000c9c <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1a3      	b.n	800193a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <HAL_RCC_OscConfig+0x280>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d038      	beq.n	800167c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d019      	beq.n	8001646 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <HAL_RCC_OscConfig+0x280>)
 8001614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001616:	4a15      	ldr	r2, [pc, #84]	; (800166c <HAL_RCC_OscConfig+0x280>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161e:	f7ff fb3d 	bl	8000c9c <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001626:	f7ff fb39 	bl	8000c9c <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e180      	b.n	800193a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_RCC_OscConfig+0x280>)
 800163a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x23a>
 8001644:	e01a      	b.n	800167c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_RCC_OscConfig+0x280>)
 8001648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_RCC_OscConfig+0x280>)
 800164c:	f023 0301 	bic.w	r3, r3, #1
 8001650:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001652:	f7ff fb23 	bl	8000c9c <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	e00a      	b.n	8001670 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800165a:	f7ff fb1f 	bl	8000c9c <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d903      	bls.n	8001670 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e166      	b.n	800193a <HAL_RCC_OscConfig+0x54e>
 800166c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001670:	4b92      	ldr	r3, [pc, #584]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 8001672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1ee      	bne.n	800165a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80a4 	beq.w	80017d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168a:	4b8c      	ldr	r3, [pc, #560]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10d      	bne.n	80016b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	4b89      	ldr	r3, [pc, #548]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a88      	ldr	r2, [pc, #544]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b86      	ldr	r3, [pc, #536]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ae:	2301      	movs	r3, #1
 80016b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b2:	4b83      	ldr	r3, [pc, #524]	; (80018c0 <HAL_RCC_OscConfig+0x4d4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d118      	bne.n	80016f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80016be:	4b80      	ldr	r3, [pc, #512]	; (80018c0 <HAL_RCC_OscConfig+0x4d4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a7f      	ldr	r2, [pc, #508]	; (80018c0 <HAL_RCC_OscConfig+0x4d4>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fae7 	bl	8000c9c <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d2:	f7ff fae3 	bl	8000c9c <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b64      	cmp	r3, #100	; 0x64
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e12a      	b.n	800193a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e4:	4b76      	ldr	r3, [pc, #472]	; (80018c0 <HAL_RCC_OscConfig+0x4d4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x31a>
 80016f8:	4b70      	ldr	r3, [pc, #448]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fc:	4a6f      	ldr	r2, [pc, #444]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6713      	str	r3, [r2, #112]	; 0x70
 8001704:	e02d      	b.n	8001762 <HAL_RCC_OscConfig+0x376>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x33c>
 800170e:	4b6b      	ldr	r3, [pc, #428]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001712:	4a6a      	ldr	r2, [pc, #424]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	6713      	str	r3, [r2, #112]	; 0x70
 800171a:	4b68      	ldr	r3, [pc, #416]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	4a67      	ldr	r2, [pc, #412]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 8001720:	f023 0304 	bic.w	r3, r3, #4
 8001724:	6713      	str	r3, [r2, #112]	; 0x70
 8001726:	e01c      	b.n	8001762 <HAL_RCC_OscConfig+0x376>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b05      	cmp	r3, #5
 800172e:	d10c      	bne.n	800174a <HAL_RCC_OscConfig+0x35e>
 8001730:	4b62      	ldr	r3, [pc, #392]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	4a61      	ldr	r2, [pc, #388]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6713      	str	r3, [r2, #112]	; 0x70
 800173c:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001740:	4a5e      	ldr	r2, [pc, #376]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6713      	str	r3, [r2, #112]	; 0x70
 8001748:	e00b      	b.n	8001762 <HAL_RCC_OscConfig+0x376>
 800174a:	4b5c      	ldr	r3, [pc, #368]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 800174c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174e:	4a5b      	ldr	r2, [pc, #364]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 8001750:	f023 0301 	bic.w	r3, r3, #1
 8001754:	6713      	str	r3, [r2, #112]	; 0x70
 8001756:	4b59      	ldr	r3, [pc, #356]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175a:	4a58      	ldr	r2, [pc, #352]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 800175c:	f023 0304 	bic.w	r3, r3, #4
 8001760:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d015      	beq.n	8001796 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176a:	f7ff fa97 	bl	8000c9c <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff fa93 	bl	8000c9c <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001780:	4293      	cmp	r3, r2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e0d8      	b.n	800193a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001788:	4b4c      	ldr	r3, [pc, #304]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0ee      	beq.n	8001772 <HAL_RCC_OscConfig+0x386>
 8001794:	e014      	b.n	80017c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001796:	f7ff fa81 	bl	8000c9c <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7ff fa7d 	bl	8000c9c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e0c2      	b.n	800193a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b4:	4b41      	ldr	r3, [pc, #260]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1ee      	bne.n	800179e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d105      	bne.n	80017d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c6:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	4a3c      	ldr	r2, [pc, #240]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 80017cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 80ae 	beq.w	8001938 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017dc:	4b37      	ldr	r3, [pc, #220]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d06d      	beq.n	80018c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d14b      	bne.n	8001888 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f0:	4b32      	ldr	r3, [pc, #200]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a31      	ldr	r2, [pc, #196]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 80017f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff fa4e 	bl	8000c9c <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7ff fa4a 	bl	8000c9c <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e091      	b.n	800193a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001816:	4b29      	ldr	r3, [pc, #164]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69da      	ldr	r2, [r3, #28]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	019b      	lsls	r3, r3, #6
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	085b      	lsrs	r3, r3, #1
 800183a:	3b01      	subs	r3, #1
 800183c:	041b      	lsls	r3, r3, #16
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	061b      	lsls	r3, r3, #24
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	071b      	lsls	r3, r3, #28
 800184e:	491b      	ldr	r1, [pc, #108]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a18      	ldr	r2, [pc, #96]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 800185a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800185e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fa1c 	bl	8000c9c <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff fa18 	bl	8000c9c <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e05f      	b.n	800193a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x47c>
 8001886:	e057      	b.n	8001938 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 800188e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001894:	f7ff fa02 	bl	8000c9c <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff f9fe 	bl	8000c9c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e045      	b.n	800193a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ae:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_RCC_OscConfig+0x4d0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x4b0>
 80018ba:	e03d      	b.n	8001938 <HAL_RCC_OscConfig+0x54c>
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80018c4:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <HAL_RCC_OscConfig+0x558>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d030      	beq.n	8001934 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d129      	bne.n	8001934 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d122      	bne.n	8001934 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018f4:	4013      	ands	r3, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d119      	bne.n	8001934 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	085b      	lsrs	r3, r3, #1
 800190c:	3b01      	subs	r3, #1
 800190e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001910:	429a      	cmp	r2, r3
 8001912:	d10f      	bne.n	8001934 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d107      	bne.n	8001934 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800

08001948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0d0      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001960:	4b6a      	ldr	r3, [pc, #424]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d910      	bls.n	8001990 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b67      	ldr	r3, [pc, #412]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 020f 	bic.w	r2, r3, #15
 8001976:	4965      	ldr	r1, [pc, #404]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b63      	ldr	r3, [pc, #396]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0b8      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d020      	beq.n	80019de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a8:	4b59      	ldr	r3, [pc, #356]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4a58      	ldr	r2, [pc, #352]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 80019ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c0:	4b53      	ldr	r3, [pc, #332]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4a52      	ldr	r2, [pc, #328]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 80019c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019cc:	4b50      	ldr	r3, [pc, #320]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	494d      	ldr	r1, [pc, #308]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d040      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d115      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e07f      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0a:	4b41      	ldr	r3, [pc, #260]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e073      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1a:	4b3d      	ldr	r3, [pc, #244]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e06b      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2a:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f023 0203 	bic.w	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4936      	ldr	r1, [pc, #216]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a3c:	f7ff f92e 	bl	8000c9c <HAL_GetTick>
 8001a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a44:	f7ff f92a 	bl	8000c9c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e053      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 020c 	and.w	r2, r3, #12
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1eb      	bne.n	8001a44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d210      	bcs.n	8001a9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 020f 	bic.w	r2, r3, #15
 8001a82:	4922      	ldr	r1, [pc, #136]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e032      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4916      	ldr	r1, [pc, #88]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d009      	beq.n	8001ada <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	490e      	ldr	r1, [pc, #56]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ada:	f000 f821 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	490a      	ldr	r1, [pc, #40]	; (8001b14 <HAL_RCC_ClockConfig+0x1cc>)
 8001aec:	5ccb      	ldrb	r3, [r1, r3]
 8001aee:	fa22 f303 	lsr.w	r3, r2, r3
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <HAL_RCC_ClockConfig+0x1d0>)
 8001af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_RCC_ClockConfig+0x1d4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff f88a 	bl	8000c14 <HAL_InitTick>

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023c00 	.word	0x40023c00
 8001b10:	40023800 	.word	0x40023800
 8001b14:	08003224 	.word	0x08003224
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000004 	.word	0x20000004

08001b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b24:	b090      	sub	sp, #64	; 0x40
 8001b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b30:	2300      	movs	r3, #0
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b38:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d00d      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x40>
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	f200 80a1 	bhi.w	8001c8c <HAL_RCC_GetSysClockFreq+0x16c>
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <HAL_RCC_GetSysClockFreq+0x34>
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d003      	beq.n	8001b5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b52:	e09b      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b58:	e09b      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b5a:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b5e:	e098      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b60:	4b4f      	ldr	r3, [pc, #316]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b68:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b6a:	4b4d      	ldr	r3, [pc, #308]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d028      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b76:	4b4a      	ldr	r3, [pc, #296]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	099b      	lsrs	r3, r3, #6
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	623b      	str	r3, [r7, #32]
 8001b80:	627a      	str	r2, [r7, #36]	; 0x24
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b8c:	fb03 f201 	mul.w	r2, r3, r1
 8001b90:	2300      	movs	r3, #0
 8001b92:	fb00 f303 	mul.w	r3, r0, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	4a43      	ldr	r2, [pc, #268]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b9a:	fba0 1202 	umull	r1, r2, r0, r2
 8001b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ba6:	4413      	add	r3, r2
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bac:	2200      	movs	r2, #0
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	61fa      	str	r2, [r7, #28]
 8001bb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bba:	f7fe fb45 	bl	8000248 <__aeabi_uldivmod>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bc6:	e053      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc8:	4b35      	ldr	r3, [pc, #212]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	099b      	lsrs	r3, r3, #6
 8001bce:	2200      	movs	r2, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	617a      	str	r2, [r7, #20]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bda:	f04f 0b00 	mov.w	fp, #0
 8001bde:	4652      	mov	r2, sl
 8001be0:	465b      	mov	r3, fp
 8001be2:	f04f 0000 	mov.w	r0, #0
 8001be6:	f04f 0100 	mov.w	r1, #0
 8001bea:	0159      	lsls	r1, r3, #5
 8001bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf0:	0150      	lsls	r0, r2, #5
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	ebb2 080a 	subs.w	r8, r2, sl
 8001bfa:	eb63 090b 	sbc.w	r9, r3, fp
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c12:	ebb2 0408 	subs.w	r4, r2, r8
 8001c16:	eb63 0509 	sbc.w	r5, r3, r9
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	00eb      	lsls	r3, r5, #3
 8001c24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c28:	00e2      	lsls	r2, r4, #3
 8001c2a:	4614      	mov	r4, r2
 8001c2c:	461d      	mov	r5, r3
 8001c2e:	eb14 030a 	adds.w	r3, r4, sl
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	eb45 030b 	adc.w	r3, r5, fp
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c46:	4629      	mov	r1, r5
 8001c48:	028b      	lsls	r3, r1, #10
 8001c4a:	4621      	mov	r1, r4
 8001c4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c50:	4621      	mov	r1, r4
 8001c52:	028a      	lsls	r2, r1, #10
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	60fa      	str	r2, [r7, #12]
 8001c60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c64:	f7fe faf0 	bl	8000248 <__aeabi_uldivmod>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	0c1b      	lsrs	r3, r3, #16
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001c80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c8a:	e002      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c8e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3740      	adds	r7, #64	; 0x40
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	00f42400 	.word	0x00f42400
 8001ca8:	017d7840 	.word	0x017d7840

08001cac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000000 	.word	0x20000000

08001cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cc8:	f7ff fff0 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	0a9b      	lsrs	r3, r3, #10
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4903      	ldr	r1, [pc, #12]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	08003234 	.word	0x08003234

08001cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cf0:	f7ff ffdc 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	0b5b      	lsrs	r3, r3, #13
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	4903      	ldr	r1, [pc, #12]	; (8001d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d02:	5ccb      	ldrb	r3, [r1, r3]
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	08003234 	.word	0x08003234

08001d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d012      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d3c:	4b69      	ldr	r3, [pc, #420]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	4a68      	ldr	r2, [pc, #416]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d46:	6093      	str	r3, [r2, #8]
 8001d48:	4b66      	ldr	r3, [pc, #408]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d50:	4964      	ldr	r1, [pc, #400]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d017      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d6e:	4b5d      	ldr	r3, [pc, #372]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7c:	4959      	ldr	r1, [pc, #356]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d017      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001daa:	4b4e      	ldr	r3, [pc, #312]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	494a      	ldr	r1, [pc, #296]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dc8:	d101      	bne.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001de6:	2301      	movs	r3, #1
 8001de8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 808b 	beq.w	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001df8:	4b3a      	ldr	r3, [pc, #232]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	4a39      	ldr	r2, [pc, #228]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e02:	6413      	str	r3, [r2, #64]	; 0x40
 8001e04:	4b37      	ldr	r3, [pc, #220]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e10:	4b35      	ldr	r3, [pc, #212]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a34      	ldr	r2, [pc, #208]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e1c:	f7fe ff3e 	bl	8000c9c <HAL_GetTick>
 8001e20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e24:	f7fe ff3a 	bl	8000c9c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e38f      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e36:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e42:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d035      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d02e      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e60:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e82:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e88:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d114      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7fe ff02 	bl	8000c9c <HAL_GetTick>
 8001e98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e9c:	f7fe fefe 	bl	8000c9c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e351      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0ee      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001eca:	d111      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001eda:	400b      	ands	r3, r1
 8001edc:	4901      	ldr	r1, [pc, #4]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
 8001ee2:	e00b      	b.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	0ffffcff 	.word	0x0ffffcff
 8001ef0:	4bac      	ldr	r3, [pc, #688]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4aab      	ldr	r2, [pc, #684]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001efa:	6093      	str	r3, [r2, #8]
 8001efc:	4ba9      	ldr	r3, [pc, #676]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001efe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f08:	49a6      	ldr	r1, [pc, #664]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d010      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f1a:	4ba2      	ldr	r3, [pc, #648]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f20:	4aa0      	ldr	r2, [pc, #640]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f2a:	4b9e      	ldr	r3, [pc, #632]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f34:	499b      	ldr	r1, [pc, #620]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f48:	4b96      	ldr	r3, [pc, #600]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f56:	4993      	ldr	r1, [pc, #588]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f6a:	4b8e      	ldr	r3, [pc, #568]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f78:	498a      	ldr	r1, [pc, #552]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f8c:	4b85      	ldr	r3, [pc, #532]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f9a:	4982      	ldr	r1, [pc, #520]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001fae:	4b7d      	ldr	r3, [pc, #500]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbc:	4979      	ldr	r1, [pc, #484]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00a      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fd0:	4b74      	ldr	r3, [pc, #464]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	f023 0203 	bic.w	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	4971      	ldr	r1, [pc, #452]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ff2:	4b6c      	ldr	r3, [pc, #432]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff8:	f023 020c 	bic.w	r2, r3, #12
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002000:	4968      	ldr	r1, [pc, #416]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002014:	4b63      	ldr	r3, [pc, #396]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	4960      	ldr	r1, [pc, #384]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002024:	4313      	orrs	r3, r2
 8002026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002036:	4b5b      	ldr	r3, [pc, #364]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002044:	4957      	ldr	r1, [pc, #348]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00a      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002058:	4b52      	ldr	r3, [pc, #328]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800205a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	494f      	ldr	r1, [pc, #316]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800207a:	4b4a      	ldr	r3, [pc, #296]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002080:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	4946      	ldr	r1, [pc, #280]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00a      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800209c:	4b41      	ldr	r3, [pc, #260]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	493e      	ldr	r1, [pc, #248]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80020be:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020cc:	4935      	ldr	r1, [pc, #212]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020e0:	4b30      	ldr	r3, [pc, #192]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020ee:	492d      	ldr	r1, [pc, #180]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d011      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002102:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002108:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002110:	4924      	ldr	r1, [pc, #144]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800211c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002120:	d101      	bne.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002122:	2301      	movs	r3, #1
 8002124:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002132:	2301      	movs	r3, #1
 8002134:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002142:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002148:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002150:	4914      	ldr	r1, [pc, #80]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00b      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002174:	490b      	ldr	r1, [pc, #44]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00f      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002198:	4902      	ldr	r1, [pc, #8]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021a0:	e002      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00b      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021b4:	4b8a      	ldr	r3, [pc, #552]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c4:	4986      	ldr	r1, [pc, #536]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00b      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80021d8:	4b81      	ldr	r3, [pc, #516]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021e8:	497d      	ldr	r1, [pc, #500]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d006      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 80d6 	beq.w	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002204:	4b76      	ldr	r3, [pc, #472]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a75      	ldr	r2, [pc, #468]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800220a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800220e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002210:	f7fe fd44 	bl	8000c9c <HAL_GetTick>
 8002214:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002218:	f7fe fd40 	bl	8000c9c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	; 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e195      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800222a:	4b6d      	ldr	r3, [pc, #436]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d021      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11d      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800224a:	4b65      	ldr	r3, [pc, #404]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800224c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002250:	0c1b      	lsrs	r3, r3, #16
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002258:	4b61      	ldr	r3, [pc, #388]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800225a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800225e:	0e1b      	lsrs	r3, r3, #24
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	019a      	lsls	r2, r3, #6
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	041b      	lsls	r3, r3, #16
 8002270:	431a      	orrs	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	061b      	lsls	r3, r3, #24
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	071b      	lsls	r3, r3, #28
 800227e:	4958      	ldr	r1, [pc, #352]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d004      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d02e      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022b0:	d129      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022b2:	4b4b      	ldr	r3, [pc, #300]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022b8:	0c1b      	lsrs	r3, r3, #16
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022c0:	4b47      	ldr	r3, [pc, #284]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c6:	0f1b      	lsrs	r3, r3, #28
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	019a      	lsls	r2, r3, #6
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	041b      	lsls	r3, r3, #16
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	061b      	lsls	r3, r3, #24
 80022e0:	431a      	orrs	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	071b      	lsls	r3, r3, #28
 80022e6:	493e      	ldr	r1, [pc, #248]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022ee:	4b3c      	ldr	r3, [pc, #240]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022f4:	f023 021f 	bic.w	r2, r3, #31
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	3b01      	subs	r3, #1
 80022fe:	4938      	ldr	r1, [pc, #224]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d01d      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002312:	4b33      	ldr	r3, [pc, #204]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002318:	0e1b      	lsrs	r3, r3, #24
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002320:	4b2f      	ldr	r3, [pc, #188]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002326:	0f1b      	lsrs	r3, r3, #28
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	019a      	lsls	r2, r3, #6
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	041b      	lsls	r3, r3, #16
 800233a:	431a      	orrs	r2, r3
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	061b      	lsls	r3, r3, #24
 8002340:	431a      	orrs	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	071b      	lsls	r3, r3, #28
 8002346:	4926      	ldr	r1, [pc, #152]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d011      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	019a      	lsls	r2, r3, #6
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	041b      	lsls	r3, r3, #16
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	061b      	lsls	r3, r3, #24
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	071b      	lsls	r3, r3, #28
 8002376:	491a      	ldr	r1, [pc, #104]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800237e:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a17      	ldr	r2, [pc, #92]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002384:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800238a:	f7fe fc87 	bl	8000c9c <HAL_GetTick>
 800238e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002392:	f7fe fc83 	bl	8000c9c <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b64      	cmp	r3, #100	; 0x64
 800239e:	d901      	bls.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0d8      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	f040 80ce 	bne.w	8002554 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80023b8:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c4:	f7fe fc6a 	bl	8000c9c <HAL_GetTick>
 80023c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023ca:	e00b      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023cc:	f7fe fc66 	bl	8000c9c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d904      	bls.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e0bb      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023e4:	4b5e      	ldr	r3, [pc, #376]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023f0:	d0ec      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800240e:	2b00      	cmp	r3, #0
 8002410:	d02e      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d12a      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800241a:	4b51      	ldr	r3, [pc, #324]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800241c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002428:	4b4d      	ldr	r3, [pc, #308]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	0f1b      	lsrs	r3, r3, #28
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	019a      	lsls	r2, r3, #6
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	041b      	lsls	r3, r3, #16
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	061b      	lsls	r3, r3, #24
 8002448:	431a      	orrs	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	071b      	lsls	r3, r3, #28
 800244e:	4944      	ldr	r1, [pc, #272]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002456:	4b42      	ldr	r3, [pc, #264]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800245c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	3b01      	subs	r3, #1
 8002466:	021b      	lsls	r3, r3, #8
 8002468:	493d      	ldr	r1, [pc, #244]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d022      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002484:	d11d      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002486:	4b36      	ldr	r3, [pc, #216]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248c:	0e1b      	lsrs	r3, r3, #24
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002494:	4b32      	ldr	r3, [pc, #200]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249a:	0f1b      	lsrs	r3, r3, #28
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	019a      	lsls	r2, r3, #6
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	041b      	lsls	r3, r3, #16
 80024ae:	431a      	orrs	r2, r3
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	061b      	lsls	r3, r3, #24
 80024b4:	431a      	orrs	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	071b      	lsls	r3, r3, #28
 80024ba:	4929      	ldr	r1, [pc, #164]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d028      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024ce:	4b24      	ldr	r3, [pc, #144]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d4:	0e1b      	lsrs	r3, r3, #24
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024dc:	4b20      	ldr	r3, [pc, #128]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e2:	0c1b      	lsrs	r3, r3, #16
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	019a      	lsls	r2, r3, #6
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	431a      	orrs	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	061b      	lsls	r3, r3, #24
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	071b      	lsls	r3, r3, #28
 8002502:	4917      	ldr	r1, [pc, #92]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800250c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002510:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	4911      	ldr	r1, [pc, #68]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800252c:	f7fe fbb6 	bl	8000c9c <HAL_GetTick>
 8002530:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002534:	f7fe fbb2 	bl	8000c9c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e007      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800254e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002552:	d1ef      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3720      	adds	r7, #32
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e040      	b.n	80025f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe faae 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2224      	movs	r2, #36	; 0x24
 8002590:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0201 	bic.w	r2, r2, #1
 80025a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f974 	bl	8002890 <UART_SetConfig>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e022      	b.n	80025f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fbcc 	bl	8002d58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fc53 	bl	8002e9c <UART_CheckIdleState>
 80025f6:	4603      	mov	r3, r0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002614:	2b20      	cmp	r3, #32
 8002616:	d171      	bne.n	80026fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <HAL_UART_Transmit+0x24>
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e06a      	b.n	80026fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2221      	movs	r2, #33	; 0x21
 8002634:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002636:	f7fe fb31 	bl	8000c9c <HAL_GetTick>
 800263a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	88fa      	ldrh	r2, [r7, #6]
 8002640:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	88fa      	ldrh	r2, [r7, #6]
 8002648:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002654:	d108      	bne.n	8002668 <HAL_UART_Transmit+0x68>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d104      	bne.n	8002668 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	e003      	b.n	8002670 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002670:	e02c      	b.n	80026cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2200      	movs	r2, #0
 800267a:	2180      	movs	r1, #128	; 0x80
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 fc5a 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e038      	b.n	80026fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10b      	bne.n	80026aa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	3302      	adds	r3, #2
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	e007      	b.n	80026ba <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	781a      	ldrb	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	3301      	adds	r3, #1
 80026b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1cc      	bne.n	8002672 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2200      	movs	r2, #0
 80026e0:	2140      	movs	r1, #64	; 0x40
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 fc27 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e005      	b.n	80026fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2220      	movs	r2, #32
 80026f6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	e000      	b.n	80026fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80026fc:	2302      	movs	r3, #2
  }
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b08a      	sub	sp, #40	; 0x28
 800270a:	af02      	add	r7, sp, #8
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	4613      	mov	r3, r2
 8002714:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800271c:	2b20      	cmp	r3, #32
 800271e:	f040 80b1 	bne.w	8002884 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <HAL_UART_Receive+0x28>
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e0a9      	b.n	8002886 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2222      	movs	r2, #34	; 0x22
 800273e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002748:	f7fe faa8 	bl	8000c9c <HAL_GetTick>
 800274c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	88fa      	ldrh	r2, [r7, #6]
 8002752:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	88fa      	ldrh	r2, [r7, #6]
 800275a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002766:	d10e      	bne.n	8002786 <HAL_UART_Receive+0x80>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <HAL_UART_Receive+0x76>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002776:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800277a:	e02d      	b.n	80027d8 <HAL_UART_Receive+0xd2>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	22ff      	movs	r2, #255	; 0xff
 8002780:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002784:	e028      	b.n	80027d8 <HAL_UART_Receive+0xd2>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10d      	bne.n	80027aa <HAL_UART_Receive+0xa4>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d104      	bne.n	80027a0 <HAL_UART_Receive+0x9a>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	22ff      	movs	r2, #255	; 0xff
 800279a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800279e:	e01b      	b.n	80027d8 <HAL_UART_Receive+0xd2>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	227f      	movs	r2, #127	; 0x7f
 80027a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027a8:	e016      	b.n	80027d8 <HAL_UART_Receive+0xd2>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027b2:	d10d      	bne.n	80027d0 <HAL_UART_Receive+0xca>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d104      	bne.n	80027c6 <HAL_UART_Receive+0xc0>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	227f      	movs	r2, #127	; 0x7f
 80027c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027c4:	e008      	b.n	80027d8 <HAL_UART_Receive+0xd2>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	223f      	movs	r2, #63	; 0x3f
 80027ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027ce:	e003      	b.n	80027d8 <HAL_UART_Receive+0xd2>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80027de:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e8:	d108      	bne.n	80027fc <HAL_UART_Receive+0xf6>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d104      	bne.n	80027fc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	e003      	b.n	8002804 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002804:	e032      	b.n	800286c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2200      	movs	r2, #0
 800280e:	2120      	movs	r1, #32
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 fb90 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e032      	b.n	8002886 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10c      	bne.n	8002840 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	b29a      	uxth	r2, r3
 800282e:	8a7b      	ldrh	r3, [r7, #18]
 8002830:	4013      	ands	r3, r2
 8002832:	b29a      	uxth	r2, r3
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	3302      	adds	r3, #2
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	e00c      	b.n	800285a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	b2da      	uxtb	r2, r3
 8002848:	8a7b      	ldrh	r3, [r7, #18]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	4013      	ands	r3, r2
 800284e:	b2da      	uxtb	r2, r3
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	3301      	adds	r3, #1
 8002858:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002860:	b29b      	uxth	r3, r3
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1c6      	bne.n	8002806 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002884:	2302      	movs	r3, #2
  }
}
 8002886:	4618      	mov	r0, r3
 8002888:	3720      	adds	r7, #32
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4ba6      	ldr	r3, [pc, #664]	; (8002b54 <UART_SetConfig+0x2c4>)
 80028bc:	4013      	ands	r3, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	6979      	ldr	r1, [r7, #20]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	430a      	orrs	r2, r1
 8002900:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a94      	ldr	r2, [pc, #592]	; (8002b58 <UART_SetConfig+0x2c8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d120      	bne.n	800294e <UART_SetConfig+0xbe>
 800290c:	4b93      	ldr	r3, [pc, #588]	; (8002b5c <UART_SetConfig+0x2cc>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b03      	cmp	r3, #3
 8002918:	d816      	bhi.n	8002948 <UART_SetConfig+0xb8>
 800291a:	a201      	add	r2, pc, #4	; (adr r2, 8002920 <UART_SetConfig+0x90>)
 800291c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002920:	08002931 	.word	0x08002931
 8002924:	0800293d 	.word	0x0800293d
 8002928:	08002937 	.word	0x08002937
 800292c:	08002943 	.word	0x08002943
 8002930:	2301      	movs	r3, #1
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	e150      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002936:	2302      	movs	r3, #2
 8002938:	77fb      	strb	r3, [r7, #31]
 800293a:	e14d      	b.n	8002bd8 <UART_SetConfig+0x348>
 800293c:	2304      	movs	r3, #4
 800293e:	77fb      	strb	r3, [r7, #31]
 8002940:	e14a      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002942:	2308      	movs	r3, #8
 8002944:	77fb      	strb	r3, [r7, #31]
 8002946:	e147      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002948:	2310      	movs	r3, #16
 800294a:	77fb      	strb	r3, [r7, #31]
 800294c:	e144      	b.n	8002bd8 <UART_SetConfig+0x348>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a83      	ldr	r2, [pc, #524]	; (8002b60 <UART_SetConfig+0x2d0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d132      	bne.n	80029be <UART_SetConfig+0x12e>
 8002958:	4b80      	ldr	r3, [pc, #512]	; (8002b5c <UART_SetConfig+0x2cc>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d828      	bhi.n	80029b8 <UART_SetConfig+0x128>
 8002966:	a201      	add	r2, pc, #4	; (adr r2, 800296c <UART_SetConfig+0xdc>)
 8002968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296c:	080029a1 	.word	0x080029a1
 8002970:	080029b9 	.word	0x080029b9
 8002974:	080029b9 	.word	0x080029b9
 8002978:	080029b9 	.word	0x080029b9
 800297c:	080029ad 	.word	0x080029ad
 8002980:	080029b9 	.word	0x080029b9
 8002984:	080029b9 	.word	0x080029b9
 8002988:	080029b9 	.word	0x080029b9
 800298c:	080029a7 	.word	0x080029a7
 8002990:	080029b9 	.word	0x080029b9
 8002994:	080029b9 	.word	0x080029b9
 8002998:	080029b9 	.word	0x080029b9
 800299c:	080029b3 	.word	0x080029b3
 80029a0:	2300      	movs	r3, #0
 80029a2:	77fb      	strb	r3, [r7, #31]
 80029a4:	e118      	b.n	8002bd8 <UART_SetConfig+0x348>
 80029a6:	2302      	movs	r3, #2
 80029a8:	77fb      	strb	r3, [r7, #31]
 80029aa:	e115      	b.n	8002bd8 <UART_SetConfig+0x348>
 80029ac:	2304      	movs	r3, #4
 80029ae:	77fb      	strb	r3, [r7, #31]
 80029b0:	e112      	b.n	8002bd8 <UART_SetConfig+0x348>
 80029b2:	2308      	movs	r3, #8
 80029b4:	77fb      	strb	r3, [r7, #31]
 80029b6:	e10f      	b.n	8002bd8 <UART_SetConfig+0x348>
 80029b8:	2310      	movs	r3, #16
 80029ba:	77fb      	strb	r3, [r7, #31]
 80029bc:	e10c      	b.n	8002bd8 <UART_SetConfig+0x348>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a68      	ldr	r2, [pc, #416]	; (8002b64 <UART_SetConfig+0x2d4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d120      	bne.n	8002a0a <UART_SetConfig+0x17a>
 80029c8:	4b64      	ldr	r3, [pc, #400]	; (8002b5c <UART_SetConfig+0x2cc>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029d2:	2b30      	cmp	r3, #48	; 0x30
 80029d4:	d013      	beq.n	80029fe <UART_SetConfig+0x16e>
 80029d6:	2b30      	cmp	r3, #48	; 0x30
 80029d8:	d814      	bhi.n	8002a04 <UART_SetConfig+0x174>
 80029da:	2b20      	cmp	r3, #32
 80029dc:	d009      	beq.n	80029f2 <UART_SetConfig+0x162>
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d810      	bhi.n	8002a04 <UART_SetConfig+0x174>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <UART_SetConfig+0x15c>
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d006      	beq.n	80029f8 <UART_SetConfig+0x168>
 80029ea:	e00b      	b.n	8002a04 <UART_SetConfig+0x174>
 80029ec:	2300      	movs	r3, #0
 80029ee:	77fb      	strb	r3, [r7, #31]
 80029f0:	e0f2      	b.n	8002bd8 <UART_SetConfig+0x348>
 80029f2:	2302      	movs	r3, #2
 80029f4:	77fb      	strb	r3, [r7, #31]
 80029f6:	e0ef      	b.n	8002bd8 <UART_SetConfig+0x348>
 80029f8:	2304      	movs	r3, #4
 80029fa:	77fb      	strb	r3, [r7, #31]
 80029fc:	e0ec      	b.n	8002bd8 <UART_SetConfig+0x348>
 80029fe:	2308      	movs	r3, #8
 8002a00:	77fb      	strb	r3, [r7, #31]
 8002a02:	e0e9      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002a04:	2310      	movs	r3, #16
 8002a06:	77fb      	strb	r3, [r7, #31]
 8002a08:	e0e6      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a56      	ldr	r2, [pc, #344]	; (8002b68 <UART_SetConfig+0x2d8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d120      	bne.n	8002a56 <UART_SetConfig+0x1c6>
 8002a14:	4b51      	ldr	r3, [pc, #324]	; (8002b5c <UART_SetConfig+0x2cc>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a1e:	2bc0      	cmp	r3, #192	; 0xc0
 8002a20:	d013      	beq.n	8002a4a <UART_SetConfig+0x1ba>
 8002a22:	2bc0      	cmp	r3, #192	; 0xc0
 8002a24:	d814      	bhi.n	8002a50 <UART_SetConfig+0x1c0>
 8002a26:	2b80      	cmp	r3, #128	; 0x80
 8002a28:	d009      	beq.n	8002a3e <UART_SetConfig+0x1ae>
 8002a2a:	2b80      	cmp	r3, #128	; 0x80
 8002a2c:	d810      	bhi.n	8002a50 <UART_SetConfig+0x1c0>
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <UART_SetConfig+0x1a8>
 8002a32:	2b40      	cmp	r3, #64	; 0x40
 8002a34:	d006      	beq.n	8002a44 <UART_SetConfig+0x1b4>
 8002a36:	e00b      	b.n	8002a50 <UART_SetConfig+0x1c0>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	77fb      	strb	r3, [r7, #31]
 8002a3c:	e0cc      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	77fb      	strb	r3, [r7, #31]
 8002a42:	e0c9      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002a44:	2304      	movs	r3, #4
 8002a46:	77fb      	strb	r3, [r7, #31]
 8002a48:	e0c6      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	77fb      	strb	r3, [r7, #31]
 8002a4e:	e0c3      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002a50:	2310      	movs	r3, #16
 8002a52:	77fb      	strb	r3, [r7, #31]
 8002a54:	e0c0      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a44      	ldr	r2, [pc, #272]	; (8002b6c <UART_SetConfig+0x2dc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d125      	bne.n	8002aac <UART_SetConfig+0x21c>
 8002a60:	4b3e      	ldr	r3, [pc, #248]	; (8002b5c <UART_SetConfig+0x2cc>)
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a6e:	d017      	beq.n	8002aa0 <UART_SetConfig+0x210>
 8002a70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a74:	d817      	bhi.n	8002aa6 <UART_SetConfig+0x216>
 8002a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a7a:	d00b      	beq.n	8002a94 <UART_SetConfig+0x204>
 8002a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a80:	d811      	bhi.n	8002aa6 <UART_SetConfig+0x216>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <UART_SetConfig+0x1fe>
 8002a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a8a:	d006      	beq.n	8002a9a <UART_SetConfig+0x20a>
 8002a8c:	e00b      	b.n	8002aa6 <UART_SetConfig+0x216>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	77fb      	strb	r3, [r7, #31]
 8002a92:	e0a1      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002a94:	2302      	movs	r3, #2
 8002a96:	77fb      	strb	r3, [r7, #31]
 8002a98:	e09e      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	77fb      	strb	r3, [r7, #31]
 8002a9e:	e09b      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	77fb      	strb	r3, [r7, #31]
 8002aa4:	e098      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002aa6:	2310      	movs	r3, #16
 8002aa8:	77fb      	strb	r3, [r7, #31]
 8002aaa:	e095      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a2f      	ldr	r2, [pc, #188]	; (8002b70 <UART_SetConfig+0x2e0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d125      	bne.n	8002b02 <UART_SetConfig+0x272>
 8002ab6:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <UART_SetConfig+0x2cc>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ac0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ac4:	d017      	beq.n	8002af6 <UART_SetConfig+0x266>
 8002ac6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002aca:	d817      	bhi.n	8002afc <UART_SetConfig+0x26c>
 8002acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad0:	d00b      	beq.n	8002aea <UART_SetConfig+0x25a>
 8002ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad6:	d811      	bhi.n	8002afc <UART_SetConfig+0x26c>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <UART_SetConfig+0x254>
 8002adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae0:	d006      	beq.n	8002af0 <UART_SetConfig+0x260>
 8002ae2:	e00b      	b.n	8002afc <UART_SetConfig+0x26c>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	77fb      	strb	r3, [r7, #31]
 8002ae8:	e076      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002aea:	2302      	movs	r3, #2
 8002aec:	77fb      	strb	r3, [r7, #31]
 8002aee:	e073      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002af0:	2304      	movs	r3, #4
 8002af2:	77fb      	strb	r3, [r7, #31]
 8002af4:	e070      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002af6:	2308      	movs	r3, #8
 8002af8:	77fb      	strb	r3, [r7, #31]
 8002afa:	e06d      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002afc:	2310      	movs	r3, #16
 8002afe:	77fb      	strb	r3, [r7, #31]
 8002b00:	e06a      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <UART_SetConfig+0x2e4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d138      	bne.n	8002b7e <UART_SetConfig+0x2ee>
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <UART_SetConfig+0x2cc>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002b16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b1a:	d017      	beq.n	8002b4c <UART_SetConfig+0x2bc>
 8002b1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b20:	d82a      	bhi.n	8002b78 <UART_SetConfig+0x2e8>
 8002b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b26:	d00b      	beq.n	8002b40 <UART_SetConfig+0x2b0>
 8002b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2c:	d824      	bhi.n	8002b78 <UART_SetConfig+0x2e8>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <UART_SetConfig+0x2aa>
 8002b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b36:	d006      	beq.n	8002b46 <UART_SetConfig+0x2b6>
 8002b38:	e01e      	b.n	8002b78 <UART_SetConfig+0x2e8>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	77fb      	strb	r3, [r7, #31]
 8002b3e:	e04b      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002b40:	2302      	movs	r3, #2
 8002b42:	77fb      	strb	r3, [r7, #31]
 8002b44:	e048      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002b46:	2304      	movs	r3, #4
 8002b48:	77fb      	strb	r3, [r7, #31]
 8002b4a:	e045      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	77fb      	strb	r3, [r7, #31]
 8002b50:	e042      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002b52:	bf00      	nop
 8002b54:	efff69f3 	.word	0xefff69f3
 8002b58:	40011000 	.word	0x40011000
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40004400 	.word	0x40004400
 8002b64:	40004800 	.word	0x40004800
 8002b68:	40004c00 	.word	0x40004c00
 8002b6c:	40005000 	.word	0x40005000
 8002b70:	40011400 	.word	0x40011400
 8002b74:	40007800 	.word	0x40007800
 8002b78:	2310      	movs	r3, #16
 8002b7a:	77fb      	strb	r3, [r7, #31]
 8002b7c:	e02c      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a72      	ldr	r2, [pc, #456]	; (8002d4c <UART_SetConfig+0x4bc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d125      	bne.n	8002bd4 <UART_SetConfig+0x344>
 8002b88:	4b71      	ldr	r3, [pc, #452]	; (8002d50 <UART_SetConfig+0x4c0>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b96:	d017      	beq.n	8002bc8 <UART_SetConfig+0x338>
 8002b98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b9c:	d817      	bhi.n	8002bce <UART_SetConfig+0x33e>
 8002b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba2:	d00b      	beq.n	8002bbc <UART_SetConfig+0x32c>
 8002ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba8:	d811      	bhi.n	8002bce <UART_SetConfig+0x33e>
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <UART_SetConfig+0x326>
 8002bae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bb2:	d006      	beq.n	8002bc2 <UART_SetConfig+0x332>
 8002bb4:	e00b      	b.n	8002bce <UART_SetConfig+0x33e>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	77fb      	strb	r3, [r7, #31]
 8002bba:	e00d      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	77fb      	strb	r3, [r7, #31]
 8002bc0:	e00a      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	77fb      	strb	r3, [r7, #31]
 8002bc6:	e007      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002bc8:	2308      	movs	r3, #8
 8002bca:	77fb      	strb	r3, [r7, #31]
 8002bcc:	e004      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002bce:	2310      	movs	r3, #16
 8002bd0:	77fb      	strb	r3, [r7, #31]
 8002bd2:	e001      	b.n	8002bd8 <UART_SetConfig+0x348>
 8002bd4:	2310      	movs	r3, #16
 8002bd6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be0:	d15b      	bne.n	8002c9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002be2:	7ffb      	ldrb	r3, [r7, #31]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d828      	bhi.n	8002c3a <UART_SetConfig+0x3aa>
 8002be8:	a201      	add	r2, pc, #4	; (adr r2, 8002bf0 <UART_SetConfig+0x360>)
 8002bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bee:	bf00      	nop
 8002bf0:	08002c15 	.word	0x08002c15
 8002bf4:	08002c1d 	.word	0x08002c1d
 8002bf8:	08002c25 	.word	0x08002c25
 8002bfc:	08002c3b 	.word	0x08002c3b
 8002c00:	08002c2b 	.word	0x08002c2b
 8002c04:	08002c3b 	.word	0x08002c3b
 8002c08:	08002c3b 	.word	0x08002c3b
 8002c0c:	08002c3b 	.word	0x08002c3b
 8002c10:	08002c33 	.word	0x08002c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c14:	f7ff f856 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8002c18:	61b8      	str	r0, [r7, #24]
        break;
 8002c1a:	e013      	b.n	8002c44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c1c:	f7ff f866 	bl	8001cec <HAL_RCC_GetPCLK2Freq>
 8002c20:	61b8      	str	r0, [r7, #24]
        break;
 8002c22:	e00f      	b.n	8002c44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c24:	4b4b      	ldr	r3, [pc, #300]	; (8002d54 <UART_SetConfig+0x4c4>)
 8002c26:	61bb      	str	r3, [r7, #24]
        break;
 8002c28:	e00c      	b.n	8002c44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c2a:	f7fe ff79 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8002c2e:	61b8      	str	r0, [r7, #24]
        break;
 8002c30:	e008      	b.n	8002c44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c36:	61bb      	str	r3, [r7, #24]
        break;
 8002c38:	e004      	b.n	8002c44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	77bb      	strb	r3, [r7, #30]
        break;
 8002c42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d074      	beq.n	8002d34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	005a      	lsls	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	085b      	lsrs	r3, r3, #1
 8002c54:	441a      	add	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	2b0f      	cmp	r3, #15
 8002c64:	d916      	bls.n	8002c94 <UART_SetConfig+0x404>
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6c:	d212      	bcs.n	8002c94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f023 030f 	bic.w	r3, r3, #15
 8002c76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	89fb      	ldrh	r3, [r7, #14]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	89fa      	ldrh	r2, [r7, #14]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	e04f      	b.n	8002d34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	77bb      	strb	r3, [r7, #30]
 8002c98:	e04c      	b.n	8002d34 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c9a:	7ffb      	ldrb	r3, [r7, #31]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d828      	bhi.n	8002cf2 <UART_SetConfig+0x462>
 8002ca0:	a201      	add	r2, pc, #4	; (adr r2, 8002ca8 <UART_SetConfig+0x418>)
 8002ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca6:	bf00      	nop
 8002ca8:	08002ccd 	.word	0x08002ccd
 8002cac:	08002cd5 	.word	0x08002cd5
 8002cb0:	08002cdd 	.word	0x08002cdd
 8002cb4:	08002cf3 	.word	0x08002cf3
 8002cb8:	08002ce3 	.word	0x08002ce3
 8002cbc:	08002cf3 	.word	0x08002cf3
 8002cc0:	08002cf3 	.word	0x08002cf3
 8002cc4:	08002cf3 	.word	0x08002cf3
 8002cc8:	08002ceb 	.word	0x08002ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ccc:	f7fe fffa 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8002cd0:	61b8      	str	r0, [r7, #24]
        break;
 8002cd2:	e013      	b.n	8002cfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cd4:	f7ff f80a 	bl	8001cec <HAL_RCC_GetPCLK2Freq>
 8002cd8:	61b8      	str	r0, [r7, #24]
        break;
 8002cda:	e00f      	b.n	8002cfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <UART_SetConfig+0x4c4>)
 8002cde:	61bb      	str	r3, [r7, #24]
        break;
 8002ce0:	e00c      	b.n	8002cfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ce2:	f7fe ff1d 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8002ce6:	61b8      	str	r0, [r7, #24]
        break;
 8002ce8:	e008      	b.n	8002cfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cee:	61bb      	str	r3, [r7, #24]
        break;
 8002cf0:	e004      	b.n	8002cfc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	77bb      	strb	r3, [r7, #30]
        break;
 8002cfa:	bf00      	nop
    }

    if (pclk != 0U)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d018      	beq.n	8002d34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	085a      	lsrs	r2, r3, #1
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	441a      	add	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b0f      	cmp	r3, #15
 8002d1a:	d909      	bls.n	8002d30 <UART_SetConfig+0x4a0>
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d22:	d205      	bcs.n	8002d30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	e001      	b.n	8002d34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002d40:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40007c00 	.word	0x40007c00
 8002d50:	40023800 	.word	0x40023800
 8002d54:	00f42400 	.word	0x00f42400

08002d58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01a      	beq.n	8002e6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e56:	d10a      	bne.n	8002e6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	605a      	str	r2, [r3, #4]
  }
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002eac:	f7fd fef6 	bl	8000c9c <HAL_GetTick>
 8002eb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d10e      	bne.n	8002ede <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f831 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e027      	b.n	8002f2e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d10e      	bne.n	8002f0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002eec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f81b 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e011      	b.n	8002f2e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b09c      	sub	sp, #112	; 0x70
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	4613      	mov	r3, r2
 8002f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f46:	e0a7      	b.n	8003098 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	f000 80a3 	beq.w	8003098 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f52:	f7fd fea3 	bl	8000c9c <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d302      	bcc.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x32>
 8002f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d13f      	bne.n	8002fe8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f70:	e853 3f00 	ldrex	r3, [r3]
 8002f74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f7c:	667b      	str	r3, [r7, #100]	; 0x64
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f88:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e6      	bne.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa4:	e853 3f00 	ldrex	r3, [r3]
 8002fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	663b      	str	r3, [r7, #96]	; 0x60
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3308      	adds	r3, #8
 8002fb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fba:	64ba      	str	r2, [r7, #72]	; 0x48
 8002fbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002fc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fc2:	e841 2300 	strex	r3, r2, [r1]
 8002fc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1e5      	bne.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e068      	b.n	80030ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d050      	beq.n	8003098 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003004:	d148      	bne.n	8003098 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800300e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003024:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302e:	637b      	str	r3, [r7, #52]	; 0x34
 8003030:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e6      	bne.n	8003010 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3308      	adds	r3, #8
 8003048:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	e853 3f00 	ldrex	r3, [r3]
 8003050:	613b      	str	r3, [r7, #16]
   return(result);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	66bb      	str	r3, [r7, #104]	; 0x68
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3308      	adds	r3, #8
 8003060:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003062:	623a      	str	r2, [r7, #32]
 8003064:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003066:	69f9      	ldr	r1, [r7, #28]
 8003068:	6a3a      	ldr	r2, [r7, #32]
 800306a:	e841 2300 	strex	r3, r2, [r1]
 800306e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1e5      	bne.n	8003042 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e010      	b.n	80030ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4013      	ands	r3, r2
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	461a      	mov	r2, r3
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	f43f af48 	beq.w	8002f48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3770      	adds	r7, #112	; 0x70
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <memset>:
 80030c2:	4402      	add	r2, r0
 80030c4:	4603      	mov	r3, r0
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d100      	bne.n	80030cc <memset+0xa>
 80030ca:	4770      	bx	lr
 80030cc:	f803 1b01 	strb.w	r1, [r3], #1
 80030d0:	e7f9      	b.n	80030c6 <memset+0x4>
	...

080030d4 <__libc_init_array>:
 80030d4:	b570      	push	{r4, r5, r6, lr}
 80030d6:	4d0d      	ldr	r5, [pc, #52]	; (800310c <__libc_init_array+0x38>)
 80030d8:	4c0d      	ldr	r4, [pc, #52]	; (8003110 <__libc_init_array+0x3c>)
 80030da:	1b64      	subs	r4, r4, r5
 80030dc:	10a4      	asrs	r4, r4, #2
 80030de:	2600      	movs	r6, #0
 80030e0:	42a6      	cmp	r6, r4
 80030e2:	d109      	bne.n	80030f8 <__libc_init_array+0x24>
 80030e4:	4d0b      	ldr	r5, [pc, #44]	; (8003114 <__libc_init_array+0x40>)
 80030e6:	4c0c      	ldr	r4, [pc, #48]	; (8003118 <__libc_init_array+0x44>)
 80030e8:	f000 f826 	bl	8003138 <_init>
 80030ec:	1b64      	subs	r4, r4, r5
 80030ee:	10a4      	asrs	r4, r4, #2
 80030f0:	2600      	movs	r6, #0
 80030f2:	42a6      	cmp	r6, r4
 80030f4:	d105      	bne.n	8003102 <__libc_init_array+0x2e>
 80030f6:	bd70      	pop	{r4, r5, r6, pc}
 80030f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030fc:	4798      	blx	r3
 80030fe:	3601      	adds	r6, #1
 8003100:	e7ee      	b.n	80030e0 <__libc_init_array+0xc>
 8003102:	f855 3b04 	ldr.w	r3, [r5], #4
 8003106:	4798      	blx	r3
 8003108:	3601      	adds	r6, #1
 800310a:	e7f2      	b.n	80030f2 <__libc_init_array+0x1e>
 800310c:	08003244 	.word	0x08003244
 8003110:	08003244 	.word	0x08003244
 8003114:	08003244 	.word	0x08003244
 8003118:	08003248 	.word	0x08003248

0800311c <memcpy>:
 800311c:	440a      	add	r2, r1
 800311e:	4291      	cmp	r1, r2
 8003120:	f100 33ff 	add.w	r3, r0, #4294967295
 8003124:	d100      	bne.n	8003128 <memcpy+0xc>
 8003126:	4770      	bx	lr
 8003128:	b510      	push	{r4, lr}
 800312a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800312e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003132:	4291      	cmp	r1, r2
 8003134:	d1f9      	bne.n	800312a <memcpy+0xe>
 8003136:	bd10      	pop	{r4, pc}

08003138 <_init>:
 8003138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313a:	bf00      	nop
 800313c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313e:	bc08      	pop	{r3}
 8003140:	469e      	mov	lr, r3
 8003142:	4770      	bx	lr

08003144 <_fini>:
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003146:	bf00      	nop
 8003148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314a:	bc08      	pop	{r3}
 800314c:	469e      	mov	lr, r3
 800314e:	4770      	bx	lr
