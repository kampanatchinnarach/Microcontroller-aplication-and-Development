
Lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b78  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001d70  08001d70  00011d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dc8  08001dc8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001dc8  08001dc8  00011dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001dd0  08001dd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dd0  08001dd0  00011dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dd4  08001dd4  00011dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001de4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001de4  00020030  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004851  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011ef  00000000  00000000  000248ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004a8  00000000  00000000  00025ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000358  00000000  00000000  00025f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025586  00000000  00000000  000262c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000061f2  00000000  00000000  0004b846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7784  00000000  00000000  00051a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000010a0  00000000  00000000  001391bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0013a25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08001d58 	.word	0x08001d58

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08001d58 	.word	0x08001d58

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08a      	sub	sp, #40	; 0x28
 8000538:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054a:	4b4c      	ldr	r3, [pc, #304]	; (800067c <MX_GPIO_Init+0x148>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a4b      	ldr	r2, [pc, #300]	; (800067c <MX_GPIO_Init+0x148>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b49      	ldr	r3, [pc, #292]	; (800067c <MX_GPIO_Init+0x148>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b46      	ldr	r3, [pc, #280]	; (800067c <MX_GPIO_Init+0x148>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a45      	ldr	r2, [pc, #276]	; (800067c <MX_GPIO_Init+0x148>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b43      	ldr	r3, [pc, #268]	; (800067c <MX_GPIO_Init+0x148>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800057a:	4b40      	ldr	r3, [pc, #256]	; (800067c <MX_GPIO_Init+0x148>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a3f      	ldr	r2, [pc, #252]	; (800067c <MX_GPIO_Init+0x148>)
 8000580:	f043 0320 	orr.w	r3, r3, #32
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b3d      	ldr	r3, [pc, #244]	; (800067c <MX_GPIO_Init+0x148>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0320 	and.w	r3, r3, #32
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000592:	4b3a      	ldr	r3, [pc, #232]	; (800067c <MX_GPIO_Init+0x148>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a39      	ldr	r2, [pc, #228]	; (800067c <MX_GPIO_Init+0x148>)
 8000598:	f043 0310 	orr.w	r3, r3, #16
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b37      	ldr	r3, [pc, #220]	; (800067c <MX_GPIO_Init+0x148>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0310 	and.w	r3, r3, #16
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005aa:	4b34      	ldr	r3, [pc, #208]	; (800067c <MX_GPIO_Init+0x148>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a33      	ldr	r2, [pc, #204]	; (800067c <MX_GPIO_Init+0x148>)
 80005b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b31      	ldr	r3, [pc, #196]	; (800067c <MX_GPIO_Init+0x148>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80005c8:	482d      	ldr	r0, [pc, #180]	; (8000680 <MX_GPIO_Init+0x14c>)
 80005ca:	f000 fec1 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 80005d4:	482b      	ldr	r0, [pc, #172]	; (8000684 <MX_GPIO_Init+0x150>)
 80005d6:	f000 febb 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_14, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 80005e0:	4829      	ldr	r0, [pc, #164]	; (8000688 <MX_GPIO_Init+0x154>)
 80005e2:	f000 feb5 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4619      	mov	r1, r3
 80005fa:	4824      	ldr	r0, [pc, #144]	; (800068c <MX_GPIO_Init+0x158>)
 80005fc:	f000 fce4 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000600:	2301      	movs	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	481f      	ldr	r0, [pc, #124]	; (8000690 <MX_GPIO_Init+0x15c>)
 8000614:	f000 fcd8 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000618:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	4813      	ldr	r0, [pc, #76]	; (8000680 <MX_GPIO_Init+0x14c>)
 8000632:	f000 fcc9 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8000636:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_GPIO_Init+0x150>)
 8000650:	f000 fcba 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000654:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	4806      	ldr	r0, [pc, #24]	; (8000688 <MX_GPIO_Init+0x154>)
 800066e:	f000 fcab 	bl	8000fc8 <HAL_GPIO_Init>

}
 8000672:	bf00      	nop
 8000674:	3728      	adds	r7, #40	; 0x28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40021400 	.word	0x40021400
 8000684:	40021000 	.word	0x40021000
 8000688:	40021800 	.word	0x40021800
 800068c:	40020800 	.word	0x40020800
 8000690:	40020000 	.word	0x40020000

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f000 fb2e 	bl	8000cfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 fa2f 	bl	8000b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f7ff ff47 	bl	8000534 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  	uint8_t state[9][8] =
 80006a6:	4a50      	ldr	r2, [pc, #320]	; (80007e8 <main+0x154>)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4611      	mov	r1, r2
 80006ac:	2248      	movs	r2, #72	; 0x48
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fb44 	bl	8001d3c <memcpy>

	//check button is pressed



	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 80006b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b8:	484c      	ldr	r0, [pc, #304]	; (80007ec <main+0x158>)
 80006ba:	f000 fe31 	bl	8001320 <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d17c      	bne.n	80007be <main+0x12a>
	  {
		clicked = 1;
 80006c4:	4b4a      	ldr	r3, [pc, #296]	; (80007f0 <main+0x15c>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
		if (n>=8) {
 80006ca:	4b4a      	ldr	r3, [pc, #296]	; (80007f4 <main+0x160>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b07      	cmp	r3, #7
 80006d0:	d903      	bls.n	80006da <main+0x46>
			n =  1 ;
 80006d2:	4b48      	ldr	r3, [pc, #288]	; (80007f4 <main+0x160>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	e005      	b.n	80006e6 <main+0x52>
		}
		else{
			n++;
 80006da:	4b46      	ldr	r3, [pc, #280]	; (80007f4 <main+0x160>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b44      	ldr	r3, [pc, #272]	; (80007f4 <main+0x160>)
 80006e4:	701a      	strb	r2, [r3, #0]
		}

		HAL_Delay(300);
 80006e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006ea:	f000 fb63 	bl	8000db4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13,state[n][0]);
 80006ee:	4b41      	ldr	r3, [pc, #260]	; (80007f4 <main+0x160>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	3350      	adds	r3, #80	; 0x50
 80006f6:	443b      	add	r3, r7
 80006f8:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80006fc:	461a      	mov	r2, r3
 80006fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000702:	483d      	ldr	r0, [pc, #244]	; (80007f8 <main+0x164>)
 8000704:	f000 fe24 	bl	8001350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, state[n][1]);
 8000708:	4b3a      	ldr	r3, [pc, #232]	; (80007f4 <main+0x160>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	3350      	adds	r3, #80	; 0x50
 8000710:	443b      	add	r3, r7
 8000712:	f813 3c4b 	ldrb.w	r3, [r3, #-75]
 8000716:	461a      	mov	r2, r3
 8000718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071c:	4837      	ldr	r0, [pc, #220]	; (80007fc <main+0x168>)
 800071e:	f000 fe17 	bl	8001350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,state[n][2]);
 8000722:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <main+0x160>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	3350      	adds	r3, #80	; 0x50
 800072a:	443b      	add	r3, r7
 800072c:	f813 3c4a 	ldrb.w	r3, [r3, #-74]
 8000730:	461a      	mov	r2, r3
 8000732:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000736:	4831      	ldr	r0, [pc, #196]	; (80007fc <main+0x168>)
 8000738:	f000 fe0a 	bl	8001350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14,state[n][3]);
 800073c:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <main+0x160>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	3350      	adds	r3, #80	; 0x50
 8000744:	443b      	add	r3, r7
 8000746:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800074a:	461a      	mov	r2, r3
 800074c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000750:	4829      	ldr	r0, [pc, #164]	; (80007f8 <main+0x164>)
 8000752:	f000 fdfd 	bl	8001350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13,state[n][4]);
 8000756:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <main+0x160>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	3350      	adds	r3, #80	; 0x50
 800075e:	443b      	add	r3, r7
 8000760:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000764:	461a      	mov	r2, r3
 8000766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076a:	4824      	ldr	r0, [pc, #144]	; (80007fc <main+0x168>)
 800076c:	f000 fdf0 	bl	8001350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15,state[n][5]);
 8000770:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <main+0x160>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	3350      	adds	r3, #80	; 0x50
 8000778:	443b      	add	r3, r7
 800077a:	f813 3c47 	ldrb.w	r3, [r3, #-71]
 800077e:	461a      	mov	r2, r3
 8000780:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000784:	481c      	ldr	r0, [pc, #112]	; (80007f8 <main+0x164>)
 8000786:	f000 fde3 	bl	8001350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14,state[n][6]);
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <main+0x160>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	3350      	adds	r3, #80	; 0x50
 8000792:	443b      	add	r3, r7
 8000794:	f813 3c46 	ldrb.w	r3, [r3, #-70]
 8000798:	461a      	mov	r2, r3
 800079a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079e:	4818      	ldr	r0, [pc, #96]	; (8000800 <main+0x16c>)
 80007a0:	f000 fdd6 	bl	8001350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, state[n][7]);
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <main+0x160>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	3350      	adds	r3, #80	; 0x50
 80007ac:	443b      	add	r3, r7
 80007ae:	f813 3c45 	ldrb.w	r3, [r3, #-69]
 80007b2:	461a      	mov	r2, r3
 80007b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b8:	4811      	ldr	r0, [pc, #68]	; (8000800 <main+0x16c>)
 80007ba:	f000 fdc9 	bl	8001350 <HAL_GPIO_WritePin>





		  reverse = n-1;
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <main+0x160>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <main+0x170>)
 80007c8:	701a      	strb	r2, [r3, #0]

	if(clicked ==1){
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <main+0x15c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	f040 8107 	bne.w	80009e2 <main+0x34e>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80007d4:	2101      	movs	r1, #1
 80007d6:	480c      	ldr	r0, [pc, #48]	; (8000808 <main+0x174>)
 80007d8:	f000 fda2 	bl	8001320 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	f040 80ff 	bne.w	80009e2 <main+0x34e>

		  for(reverse;reverse!=n;reverse--){
 80007e4:	e08b      	b.n	80008fe <main+0x26a>
 80007e6:	bf00      	nop
 80007e8:	08001d70 	.word	0x08001d70
 80007ec:	40020800 	.word	0x40020800
 80007f0:	2000002a 	.word	0x2000002a
 80007f4:	20000028 	.word	0x20000028
 80007f8:	40021400 	.word	0x40021400
 80007fc:	40021000 	.word	0x40021000
 8000800:	40021800 	.word	0x40021800
 8000804:	20000029 	.word	0x20000029
 8000808:	40020000 	.word	0x40020000
		  if(reverse == 0)
 800080c:	4bb5      	ldr	r3, [pc, #724]	; (8000ae4 <main+0x450>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d102      	bne.n	800081a <main+0x186>
		  {
			  reverse = 8;
 8000814:	4bb3      	ldr	r3, [pc, #716]	; (8000ae4 <main+0x450>)
 8000816:	2208      	movs	r2, #8
 8000818:	701a      	strb	r2, [r3, #0]
		  }
			 	  HAL_Delay(300);
 800081a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800081e:	f000 fac9 	bl	8000db4 <HAL_Delay>
			 	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13,state[reverse][0]);
 8000822:	4bb0      	ldr	r3, [pc, #704]	; (8000ae4 <main+0x450>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	3350      	adds	r3, #80	; 0x50
 800082a:	443b      	add	r3, r7
 800082c:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8000830:	461a      	mov	r2, r3
 8000832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000836:	48ac      	ldr	r0, [pc, #688]	; (8000ae8 <main+0x454>)
 8000838:	f000 fd8a 	bl	8001350 <HAL_GPIO_WritePin>
			 	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9,state[reverse][1]);
 800083c:	4ba9      	ldr	r3, [pc, #676]	; (8000ae4 <main+0x450>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	3350      	adds	r3, #80	; 0x50
 8000844:	443b      	add	r3, r7
 8000846:	f813 3c4b 	ldrb.w	r3, [r3, #-75]
 800084a:	461a      	mov	r2, r3
 800084c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000850:	48a6      	ldr	r0, [pc, #664]	; (8000aec <main+0x458>)
 8000852:	f000 fd7d 	bl	8001350 <HAL_GPIO_WritePin>
			 	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,state[reverse][2]);
 8000856:	4ba3      	ldr	r3, [pc, #652]	; (8000ae4 <main+0x450>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	3350      	adds	r3, #80	; 0x50
 800085e:	443b      	add	r3, r7
 8000860:	f813 3c4a 	ldrb.w	r3, [r3, #-74]
 8000864:	461a      	mov	r2, r3
 8000866:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800086a:	48a0      	ldr	r0, [pc, #640]	; (8000aec <main+0x458>)
 800086c:	f000 fd70 	bl	8001350 <HAL_GPIO_WritePin>
			 	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14,state[reverse][3]);
 8000870:	4b9c      	ldr	r3, [pc, #624]	; (8000ae4 <main+0x450>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	3350      	adds	r3, #80	; 0x50
 8000878:	443b      	add	r3, r7
 800087a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800087e:	461a      	mov	r2, r3
 8000880:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000884:	4898      	ldr	r0, [pc, #608]	; (8000ae8 <main+0x454>)
 8000886:	f000 fd63 	bl	8001350 <HAL_GPIO_WritePin>
			 	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13,state[reverse][4]);
 800088a:	4b96      	ldr	r3, [pc, #600]	; (8000ae4 <main+0x450>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	3350      	adds	r3, #80	; 0x50
 8000892:	443b      	add	r3, r7
 8000894:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000898:	461a      	mov	r2, r3
 800089a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089e:	4893      	ldr	r0, [pc, #588]	; (8000aec <main+0x458>)
 80008a0:	f000 fd56 	bl	8001350 <HAL_GPIO_WritePin>
			 	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15,state[reverse][5]);
 80008a4:	4b8f      	ldr	r3, [pc, #572]	; (8000ae4 <main+0x450>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	3350      	adds	r3, #80	; 0x50
 80008ac:	443b      	add	r3, r7
 80008ae:	f813 3c47 	ldrb.w	r3, [r3, #-71]
 80008b2:	461a      	mov	r2, r3
 80008b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b8:	488b      	ldr	r0, [pc, #556]	; (8000ae8 <main+0x454>)
 80008ba:	f000 fd49 	bl	8001350 <HAL_GPIO_WritePin>
			 	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14,state[reverse][6]);
 80008be:	4b89      	ldr	r3, [pc, #548]	; (8000ae4 <main+0x450>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	3350      	adds	r3, #80	; 0x50
 80008c6:	443b      	add	r3, r7
 80008c8:	f813 3c46 	ldrb.w	r3, [r3, #-70]
 80008cc:	461a      	mov	r2, r3
 80008ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008d2:	4887      	ldr	r0, [pc, #540]	; (8000af0 <main+0x45c>)
 80008d4:	f000 fd3c 	bl	8001350 <HAL_GPIO_WritePin>
			 	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9,state[reverse][7]);
 80008d8:	4b82      	ldr	r3, [pc, #520]	; (8000ae4 <main+0x450>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	3350      	adds	r3, #80	; 0x50
 80008e0:	443b      	add	r3, r7
 80008e2:	f813 3c45 	ldrb.w	r3, [r3, #-69]
 80008e6:	461a      	mov	r2, r3
 80008e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ec:	4880      	ldr	r0, [pc, #512]	; (8000af0 <main+0x45c>)
 80008ee:	f000 fd2f 	bl	8001350 <HAL_GPIO_WritePin>
		  for(reverse;reverse!=n;reverse--){
 80008f2:	4b7c      	ldr	r3, [pc, #496]	; (8000ae4 <main+0x450>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b7a      	ldr	r3, [pc, #488]	; (8000ae4 <main+0x450>)
 80008fc:	701a      	strb	r2, [r3, #0]
 80008fe:	4b79      	ldr	r3, [pc, #484]	; (8000ae4 <main+0x450>)
 8000900:	781a      	ldrb	r2, [r3, #0]
 8000902:	4b7c      	ldr	r3, [pc, #496]	; (8000af4 <main+0x460>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	429a      	cmp	r2, r3
 8000908:	d180      	bne.n	800080c <main+0x178>

		  }
		  HAL_Delay(300);
 800090a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800090e:	f000 fa51 	bl	8000db4 <HAL_Delay>
		  			 	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13,state[reverse][0]);
 8000912:	4b74      	ldr	r3, [pc, #464]	; (8000ae4 <main+0x450>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	3350      	adds	r3, #80	; 0x50
 800091a:	443b      	add	r3, r7
 800091c:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8000920:	461a      	mov	r2, r3
 8000922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000926:	4870      	ldr	r0, [pc, #448]	; (8000ae8 <main+0x454>)
 8000928:	f000 fd12 	bl	8001350 <HAL_GPIO_WritePin>
		  			 	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9,state[reverse][1]);
 800092c:	4b6d      	ldr	r3, [pc, #436]	; (8000ae4 <main+0x450>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	3350      	adds	r3, #80	; 0x50
 8000934:	443b      	add	r3, r7
 8000936:	f813 3c4b 	ldrb.w	r3, [r3, #-75]
 800093a:	461a      	mov	r2, r3
 800093c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000940:	486a      	ldr	r0, [pc, #424]	; (8000aec <main+0x458>)
 8000942:	f000 fd05 	bl	8001350 <HAL_GPIO_WritePin>
		  			 	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,state[reverse][2]);
 8000946:	4b67      	ldr	r3, [pc, #412]	; (8000ae4 <main+0x450>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	00db      	lsls	r3, r3, #3
 800094c:	3350      	adds	r3, #80	; 0x50
 800094e:	443b      	add	r3, r7
 8000950:	f813 3c4a 	ldrb.w	r3, [r3, #-74]
 8000954:	461a      	mov	r2, r3
 8000956:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800095a:	4864      	ldr	r0, [pc, #400]	; (8000aec <main+0x458>)
 800095c:	f000 fcf8 	bl	8001350 <HAL_GPIO_WritePin>
		  			 	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14,state[reverse][3]);
 8000960:	4b60      	ldr	r3, [pc, #384]	; (8000ae4 <main+0x450>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	3350      	adds	r3, #80	; 0x50
 8000968:	443b      	add	r3, r7
 800096a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800096e:	461a      	mov	r2, r3
 8000970:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000974:	485c      	ldr	r0, [pc, #368]	; (8000ae8 <main+0x454>)
 8000976:	f000 fceb 	bl	8001350 <HAL_GPIO_WritePin>
		  			 	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13,state[reverse][4]);
 800097a:	4b5a      	ldr	r3, [pc, #360]	; (8000ae4 <main+0x450>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	3350      	adds	r3, #80	; 0x50
 8000982:	443b      	add	r3, r7
 8000984:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000988:	461a      	mov	r2, r3
 800098a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098e:	4857      	ldr	r0, [pc, #348]	; (8000aec <main+0x458>)
 8000990:	f000 fcde 	bl	8001350 <HAL_GPIO_WritePin>
		  			 	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15,state[reverse][5]);
 8000994:	4b53      	ldr	r3, [pc, #332]	; (8000ae4 <main+0x450>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	3350      	adds	r3, #80	; 0x50
 800099c:	443b      	add	r3, r7
 800099e:	f813 3c47 	ldrb.w	r3, [r3, #-71]
 80009a2:	461a      	mov	r2, r3
 80009a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a8:	484f      	ldr	r0, [pc, #316]	; (8000ae8 <main+0x454>)
 80009aa:	f000 fcd1 	bl	8001350 <HAL_GPIO_WritePin>
		  			 	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14,state[reverse][6]);
 80009ae:	4b4d      	ldr	r3, [pc, #308]	; (8000ae4 <main+0x450>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	3350      	adds	r3, #80	; 0x50
 80009b6:	443b      	add	r3, r7
 80009b8:	f813 3c46 	ldrb.w	r3, [r3, #-70]
 80009bc:	461a      	mov	r2, r3
 80009be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c2:	484b      	ldr	r0, [pc, #300]	; (8000af0 <main+0x45c>)
 80009c4:	f000 fcc4 	bl	8001350 <HAL_GPIO_WritePin>
		  			 	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9,state[reverse][7]);
 80009c8:	4b46      	ldr	r3, [pc, #280]	; (8000ae4 <main+0x450>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	3350      	adds	r3, #80	; 0x50
 80009d0:	443b      	add	r3, r7
 80009d2:	f813 3c45 	ldrb.w	r3, [r3, #-69]
 80009d6:	461a      	mov	r2, r3
 80009d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009dc:	4844      	ldr	r0, [pc, #272]	; (8000af0 <main+0x45c>)
 80009de:	f000 fcb7 	bl	8001350 <HAL_GPIO_WritePin>


	  }
	}
	if(clicked == 0){
 80009e2:	4b45      	ldr	r3, [pc, #276]	; (8000af8 <main+0x464>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f47f ae64 	bne.w	80006b4 <main+0x20>
		 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80009ec:	2101      	movs	r1, #1
 80009ee:	4843      	ldr	r0, [pc, #268]	; (8000afc <main+0x468>)
 80009f0:	f000 fc96 	bl	8001320 <HAL_GPIO_ReadPin>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f47f ae5c 	bne.w	80006b4 <main+0x20>

			 for(int i = 0;i<=9;i++)   {
 80009fc:	2300      	movs	r3, #0
 80009fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a00:	e066      	b.n	8000ad0 <main+0x43c>
				 HAL_Delay(300);
 8000a02:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a06:	f000 f9d5 	bl	8000db4 <HAL_Delay>
			  			 	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13,state[i][0]);
 8000a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	3350      	adds	r3, #80	; 0x50
 8000a10:	443b      	add	r3, r7
 8000a12:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8000a16:	461a      	mov	r2, r3
 8000a18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1c:	4832      	ldr	r0, [pc, #200]	; (8000ae8 <main+0x454>)
 8000a1e:	f000 fc97 	bl	8001350 <HAL_GPIO_WritePin>
			  			 	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9,state[i][1]);
 8000a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	3350      	adds	r3, #80	; 0x50
 8000a28:	443b      	add	r3, r7
 8000a2a:	f813 3c4b 	ldrb.w	r3, [r3, #-75]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a34:	482d      	ldr	r0, [pc, #180]	; (8000aec <main+0x458>)
 8000a36:	f000 fc8b 	bl	8001350 <HAL_GPIO_WritePin>
			  			 	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,state[i][2]);
 8000a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	3350      	adds	r3, #80	; 0x50
 8000a40:	443b      	add	r3, r7
 8000a42:	f813 3c4a 	ldrb.w	r3, [r3, #-74]
 8000a46:	461a      	mov	r2, r3
 8000a48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a4c:	4827      	ldr	r0, [pc, #156]	; (8000aec <main+0x458>)
 8000a4e:	f000 fc7f 	bl	8001350 <HAL_GPIO_WritePin>
			  			 	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14,state[i][3]);
 8000a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	3350      	adds	r3, #80	; 0x50
 8000a58:	443b      	add	r3, r7
 8000a5a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a64:	4820      	ldr	r0, [pc, #128]	; (8000ae8 <main+0x454>)
 8000a66:	f000 fc73 	bl	8001350 <HAL_GPIO_WritePin>
			  			 	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13,state[i][4]);
 8000a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	3350      	adds	r3, #80	; 0x50
 8000a70:	443b      	add	r3, r7
 8000a72:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000a76:	461a      	mov	r2, r3
 8000a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7c:	481b      	ldr	r0, [pc, #108]	; (8000aec <main+0x458>)
 8000a7e:	f000 fc67 	bl	8001350 <HAL_GPIO_WritePin>
			  			 	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15,state[i][5]);
 8000a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	3350      	adds	r3, #80	; 0x50
 8000a88:	443b      	add	r3, r7
 8000a8a:	f813 3c47 	ldrb.w	r3, [r3, #-71]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a94:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <main+0x454>)
 8000a96:	f000 fc5b 	bl	8001350 <HAL_GPIO_WritePin>
			  			 	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14,state[i][6]);
 8000a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	3350      	adds	r3, #80	; 0x50
 8000aa0:	443b      	add	r3, r7
 8000aa2:	f813 3c46 	ldrb.w	r3, [r3, #-70]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aac:	4810      	ldr	r0, [pc, #64]	; (8000af0 <main+0x45c>)
 8000aae:	f000 fc4f 	bl	8001350 <HAL_GPIO_WritePin>
			  			 	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9,state[i][7]);
 8000ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	3350      	adds	r3, #80	; 0x50
 8000ab8:	443b      	add	r3, r7
 8000aba:	f813 3c45 	ldrb.w	r3, [r3, #-69]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac4:	480a      	ldr	r0, [pc, #40]	; (8000af0 <main+0x45c>)
 8000ac6:	f000 fc43 	bl	8001350 <HAL_GPIO_WritePin>
			 for(int i = 0;i<=9;i++)   {
 8000aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000acc:	3301      	adds	r3, #1
 8000ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ad2:	2b09      	cmp	r3, #9
 8000ad4:	dd95      	ble.n	8000a02 <main+0x36e>

			 }
		  			 	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13,0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <main+0x454>)
 8000ade:	f000 fc37 	bl	8001350 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8000ae2:	e5e7      	b.n	80006b4 <main+0x20>
 8000ae4:	20000029 	.word	0x20000029
 8000ae8:	40021400 	.word	0x40021400
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40021800 	.word	0x40021800
 8000af4:	20000028 	.word	0x20000028
 8000af8:	2000002a 	.word	0x2000002a
 8000afc:	40020000 	.word	0x40020000

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b094      	sub	sp, #80	; 0x50
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	2234      	movs	r2, #52	; 0x34
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 f8e8 	bl	8001ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b24:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <SystemClock_Config+0xd4>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	4a2a      	ldr	r2, [pc, #168]	; (8000bd4 <SystemClock_Config+0xd4>)
 8000b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b30:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <SystemClock_Config+0xd4>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b3c:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <SystemClock_Config+0xd8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a25      	ldr	r2, [pc, #148]	; (8000bd8 <SystemClock_Config+0xd8>)
 8000b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <SystemClock_Config+0xd8>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b60:	2302      	movs	r3, #2
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b64:	2300      	movs	r3, #0
 8000b66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b6c:	23d8      	movs	r3, #216	; 0xd8
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fc4f 	bl	8001424 <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b8c:	f000 f826 	bl	8000bdc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b90:	f000 fbf8 	bl	8001384 <HAL_PWREx_EnableOverDrive>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b9a:	f000 f81f 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9e:	230f      	movs	r3, #15
 8000ba0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000baa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	2107      	movs	r1, #7
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fedf 	bl	8001980 <HAL_RCC_ClockConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000bc8:	f000 f808 	bl	8000bdc <Error_Handler>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3750      	adds	r7, #80	; 0x50
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40007000 	.word	0x40007000

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_MspInit+0x44>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_MspInit+0x44>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_MspInit+0x44>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_MspInit+0x44>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <HAL_MspInit+0x44>)
 8000c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_MspInit+0x44>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <NMI_Handler+0x4>

08000c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <MemManage_Handler+0x4>

08000c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7c:	f000 f87a 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cae:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc4:	4c0b      	ldr	r4, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cd2:	f7ff ffd7 	bl	8000c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f001 f80d 	bl	8001cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fcdb 	bl	8000694 <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cec:	08001dd8 	.word	0x08001dd8
  ldr r2, =_sbss
 8000cf0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cf4:	20000030 	.word	0x20000030

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>

08000cfa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfe:	2003      	movs	r0, #3
 8000d00:	f000 f92e 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d04:	200f      	movs	r0, #15
 8000d06:	f000 f805 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d0a:	f7ff ff6d 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x54>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x58>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f93b 	bl	8000fae <HAL_SYSTICK_Config>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00e      	b.n	8000d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d80a      	bhi.n	8000d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f000 f911 	bl	8000f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d54:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_InitTick+0x5c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000004 	.word	0x20000004

08000d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x20>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x24>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <HAL_IncTick+0x24>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008
 8000d98:	2000002c 	.word	0x2000002c

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2000002c 	.word	0x2000002c

08000db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff ffee 	bl	8000d9c <HAL_GetTick>
 8000dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dcc:	d005      	beq.n	8000dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_Delay+0x44>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dda:	bf00      	nop
 8000ddc:	f7ff ffde 	bl	8000d9c <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d8f7      	bhi.n	8000ddc <HAL_Delay+0x28>
  {
  }
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <__NVIC_SetPriorityGrouping+0x40>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x40>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00
 8000e40:	05fa0000 	.word	0x05fa0000

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	; (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	; 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f2c:	d301      	bcc.n	8000f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <SysTick_Config+0x40>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f7ff ff8e 	bl	8000e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <SysTick_Config+0x40>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <SysTick_Config+0x40>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff47 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff5c 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff8e 	bl	8000eb4 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5d 	bl	8000e60 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffb0 	bl	8000f1c <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	e175      	b.n	80012d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	f040 8164 	bne.w	80012ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d005      	beq.n	800101e <HAL_GPIO_Init+0x56>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d130      	bne.n	8001080 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	f003 0201 	and.w	r2, r3, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b03      	cmp	r3, #3
 800108a:	d017      	beq.n	80010bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d123      	bne.n	8001110 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	69b9      	ldr	r1, [r7, #24]
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0203 	and.w	r2, r3, #3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80be 	beq.w	80012ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	4b66      	ldr	r3, [pc, #408]	; (80012ec <HAL_GPIO_Init+0x324>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	4a65      	ldr	r2, [pc, #404]	; (80012ec <HAL_GPIO_Init+0x324>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115c:	6453      	str	r3, [r2, #68]	; 0x44
 800115e:	4b63      	ldr	r3, [pc, #396]	; (80012ec <HAL_GPIO_Init+0x324>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800116a:	4a61      	ldr	r2, [pc, #388]	; (80012f0 <HAL_GPIO_Init+0x328>)
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3302      	adds	r3, #2
 8001172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	220f      	movs	r2, #15
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a58      	ldr	r2, [pc, #352]	; (80012f4 <HAL_GPIO_Init+0x32c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d037      	beq.n	8001206 <HAL_GPIO_Init+0x23e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a57      	ldr	r2, [pc, #348]	; (80012f8 <HAL_GPIO_Init+0x330>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d031      	beq.n	8001202 <HAL_GPIO_Init+0x23a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a56      	ldr	r2, [pc, #344]	; (80012fc <HAL_GPIO_Init+0x334>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d02b      	beq.n	80011fe <HAL_GPIO_Init+0x236>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a55      	ldr	r2, [pc, #340]	; (8001300 <HAL_GPIO_Init+0x338>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d025      	beq.n	80011fa <HAL_GPIO_Init+0x232>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a54      	ldr	r2, [pc, #336]	; (8001304 <HAL_GPIO_Init+0x33c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d01f      	beq.n	80011f6 <HAL_GPIO_Init+0x22e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a53      	ldr	r2, [pc, #332]	; (8001308 <HAL_GPIO_Init+0x340>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d019      	beq.n	80011f2 <HAL_GPIO_Init+0x22a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a52      	ldr	r2, [pc, #328]	; (800130c <HAL_GPIO_Init+0x344>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0x226>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a51      	ldr	r2, [pc, #324]	; (8001310 <HAL_GPIO_Init+0x348>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d00d      	beq.n	80011ea <HAL_GPIO_Init+0x222>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a50      	ldr	r2, [pc, #320]	; (8001314 <HAL_GPIO_Init+0x34c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x21e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4f      	ldr	r2, [pc, #316]	; (8001318 <HAL_GPIO_Init+0x350>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d101      	bne.n	80011e2 <HAL_GPIO_Init+0x21a>
 80011de:	2309      	movs	r3, #9
 80011e0:	e012      	b.n	8001208 <HAL_GPIO_Init+0x240>
 80011e2:	230a      	movs	r3, #10
 80011e4:	e010      	b.n	8001208 <HAL_GPIO_Init+0x240>
 80011e6:	2308      	movs	r3, #8
 80011e8:	e00e      	b.n	8001208 <HAL_GPIO_Init+0x240>
 80011ea:	2307      	movs	r3, #7
 80011ec:	e00c      	b.n	8001208 <HAL_GPIO_Init+0x240>
 80011ee:	2306      	movs	r3, #6
 80011f0:	e00a      	b.n	8001208 <HAL_GPIO_Init+0x240>
 80011f2:	2305      	movs	r3, #5
 80011f4:	e008      	b.n	8001208 <HAL_GPIO_Init+0x240>
 80011f6:	2304      	movs	r3, #4
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x240>
 80011fa:	2303      	movs	r3, #3
 80011fc:	e004      	b.n	8001208 <HAL_GPIO_Init+0x240>
 80011fe:	2302      	movs	r3, #2
 8001200:	e002      	b.n	8001208 <HAL_GPIO_Init+0x240>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x240>
 8001206:	2300      	movs	r3, #0
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	f002 0203 	and.w	r2, r2, #3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4093      	lsls	r3, r2
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001218:	4935      	ldr	r1, [pc, #212]	; (80012f0 <HAL_GPIO_Init+0x328>)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001226:	4b3d      	ldr	r3, [pc, #244]	; (800131c <HAL_GPIO_Init+0x354>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800124a:	4a34      	ldr	r2, [pc, #208]	; (800131c <HAL_GPIO_Init+0x354>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001250:	4b32      	ldr	r3, [pc, #200]	; (800131c <HAL_GPIO_Init+0x354>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001274:	4a29      	ldr	r2, [pc, #164]	; (800131c <HAL_GPIO_Init+0x354>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800127a:	4b28      	ldr	r3, [pc, #160]	; (800131c <HAL_GPIO_Init+0x354>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800129e:	4a1f      	ldr	r2, [pc, #124]	; (800131c <HAL_GPIO_Init+0x354>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_GPIO_Init+0x354>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <HAL_GPIO_Init+0x354>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3301      	adds	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	2b0f      	cmp	r3, #15
 80012d8:	f67f ae86 	bls.w	8000fe8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40013800 	.word	0x40013800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020c00 	.word	0x40020c00
 8001304:	40021000 	.word	0x40021000
 8001308:	40021400 	.word	0x40021400
 800130c:	40021800 	.word	0x40021800
 8001310:	40021c00 	.word	0x40021c00
 8001314:	40022000 	.word	0x40022000
 8001318:	40022400 	.word	0x40022400
 800131c:	40013c00 	.word	0x40013c00

08001320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	887b      	ldrh	r3, [r7, #2]
 8001332:	4013      	ands	r3, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001338:	2301      	movs	r3, #1
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	e001      	b.n	8001342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
 800135c:	4613      	mov	r3, r2
 800135e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001360:	787b      	ldrb	r3, [r7, #1]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001366:	887a      	ldrh	r2, [r7, #2]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800136c:	e003      	b.n	8001376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800136e:	887b      	ldrh	r3, [r7, #2]
 8001370:	041a      	lsls	r2, r3, #16
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	619a      	str	r2, [r3, #24]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b23      	ldr	r3, [pc, #140]	; (800141c <HAL_PWREx_EnableOverDrive+0x98>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a22      	ldr	r2, [pc, #136]	; (800141c <HAL_PWREx_EnableOverDrive+0x98>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <HAL_PWREx_EnableOverDrive+0x98>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1d      	ldr	r2, [pc, #116]	; (8001420 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013b2:	f7ff fcf3 	bl	8000d9c <HAL_GetTick>
 80013b6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013b8:	e009      	b.n	80013ce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013ba:	f7ff fcef 	bl	8000d9c <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013c8:	d901      	bls.n	80013ce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e022      	b.n	8001414 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013da:	d1ee      	bne.n	80013ba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013e8:	f7ff fcd8 	bl	8000d9c <HAL_GetTick>
 80013ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013ee:	e009      	b.n	8001404 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013f0:	f7ff fcd4 	bl	8000d9c <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013fe:	d901      	bls.n	8001404 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e007      	b.n	8001414 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001410:	d1ee      	bne.n	80013f0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	40007000 	.word	0x40007000

08001424 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800142c:	2300      	movs	r3, #0
 800142e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e29b      	b.n	8001972 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8087 	beq.w	8001556 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001448:	4b96      	ldr	r3, [pc, #600]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	2b04      	cmp	r3, #4
 8001452:	d00c      	beq.n	800146e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001454:	4b93      	ldr	r3, [pc, #588]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 030c 	and.w	r3, r3, #12
 800145c:	2b08      	cmp	r3, #8
 800145e:	d112      	bne.n	8001486 <HAL_RCC_OscConfig+0x62>
 8001460:	4b90      	ldr	r3, [pc, #576]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800146c:	d10b      	bne.n	8001486 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146e:	4b8d      	ldr	r3, [pc, #564]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d06c      	beq.n	8001554 <HAL_RCC_OscConfig+0x130>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d168      	bne.n	8001554 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e275      	b.n	8001972 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148e:	d106      	bne.n	800149e <HAL_RCC_OscConfig+0x7a>
 8001490:	4b84      	ldr	r3, [pc, #528]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a83      	ldr	r2, [pc, #524]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 8001496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	e02e      	b.n	80014fc <HAL_RCC_OscConfig+0xd8>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x9c>
 80014a6:	4b7f      	ldr	r3, [pc, #508]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a7e      	ldr	r2, [pc, #504]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80014ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b7c      	ldr	r3, [pc, #496]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a7b      	ldr	r2, [pc, #492]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80014b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e01d      	b.n	80014fc <HAL_RCC_OscConfig+0xd8>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0xc0>
 80014ca:	4b76      	ldr	r3, [pc, #472]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a75      	ldr	r2, [pc, #468]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b73      	ldr	r3, [pc, #460]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a72      	ldr	r2, [pc, #456]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e00b      	b.n	80014fc <HAL_RCC_OscConfig+0xd8>
 80014e4:	4b6f      	ldr	r3, [pc, #444]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a6e      	ldr	r2, [pc, #440]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80014ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a6b      	ldr	r2, [pc, #428]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80014f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d013      	beq.n	800152c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fc4a 	bl	8000d9c <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fc46 	bl	8000d9c <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e229      	b.n	8001972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	4b61      	ldr	r3, [pc, #388]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0xe8>
 800152a:	e014      	b.n	8001556 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff fc36 	bl	8000d9c <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fc32 	bl	8000d9c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e215      	b.n	8001972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	4b57      	ldr	r3, [pc, #348]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x110>
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d069      	beq.n	8001636 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001562:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00b      	beq.n	8001586 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800156e:	4b4d      	ldr	r3, [pc, #308]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b08      	cmp	r3, #8
 8001578:	d11c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x190>
 800157a:	4b4a      	ldr	r3, [pc, #296]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d116      	bne.n	80015b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	4b47      	ldr	r3, [pc, #284]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d005      	beq.n	800159e <HAL_RCC_OscConfig+0x17a>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d001      	beq.n	800159e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e1e9      	b.n	8001972 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159e:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	493d      	ldr	r1, [pc, #244]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	e040      	b.n	8001636 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d023      	beq.n	8001604 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015bc:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a38      	ldr	r2, [pc, #224]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff fbe8 	bl	8000d9c <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d0:	f7ff fbe4 	bl	8000d9c <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e1c7      	b.n	8001972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e2:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4929      	ldr	r1, [pc, #164]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	600b      	str	r3, [r1, #0]
 8001602:	e018      	b.n	8001636 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001604:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a26      	ldr	r2, [pc, #152]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fbc4 	bl	8000d9c <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001618:	f7ff fbc0 	bl	8000d9c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e1a3      	b.n	8001972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d038      	beq.n	80016b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d019      	beq.n	800167e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 800164c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800164e:	4a15      	ldr	r2, [pc, #84]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001656:	f7ff fba1 	bl	8000d9c <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800165e:	f7ff fb9d 	bl	8000d9c <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e180      	b.n	8001972 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 8001672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x23a>
 800167c:	e01a      	b.n	80016b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 8001680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001682:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168a:	f7ff fb87 	bl	8000d9c <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001690:	e00a      	b.n	80016a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001692:	f7ff fb83 	bl	8000d9c <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d903      	bls.n	80016a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e166      	b.n	8001972 <HAL_RCC_OscConfig+0x54e>
 80016a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a8:	4b92      	ldr	r3, [pc, #584]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 80016aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1ee      	bne.n	8001692 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 80a4 	beq.w	800180a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c2:	4b8c      	ldr	r3, [pc, #560]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10d      	bne.n	80016ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4b89      	ldr	r3, [pc, #548]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a88      	ldr	r2, [pc, #544]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b86      	ldr	r3, [pc, #536]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e6:	2301      	movs	r3, #1
 80016e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ea:	4b83      	ldr	r3, [pc, #524]	; (80018f8 <HAL_RCC_OscConfig+0x4d4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d118      	bne.n	8001728 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80016f6:	4b80      	ldr	r3, [pc, #512]	; (80018f8 <HAL_RCC_OscConfig+0x4d4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a7f      	ldr	r2, [pc, #508]	; (80018f8 <HAL_RCC_OscConfig+0x4d4>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001702:	f7ff fb4b 	bl	8000d9c <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170a:	f7ff fb47 	bl	8000d9c <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b64      	cmp	r3, #100	; 0x64
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e12a      	b.n	8001972 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800171c:	4b76      	ldr	r3, [pc, #472]	; (80018f8 <HAL_RCC_OscConfig+0x4d4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d106      	bne.n	800173e <HAL_RCC_OscConfig+0x31a>
 8001730:	4b70      	ldr	r3, [pc, #448]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	4a6f      	ldr	r2, [pc, #444]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6713      	str	r3, [r2, #112]	; 0x70
 800173c:	e02d      	b.n	800179a <HAL_RCC_OscConfig+0x376>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x33c>
 8001746:	4b6b      	ldr	r3, [pc, #428]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	4a6a      	ldr	r2, [pc, #424]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 800174c:	f023 0301 	bic.w	r3, r3, #1
 8001750:	6713      	str	r3, [r2, #112]	; 0x70
 8001752:	4b68      	ldr	r3, [pc, #416]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 8001754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001756:	4a67      	ldr	r2, [pc, #412]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 8001758:	f023 0304 	bic.w	r3, r3, #4
 800175c:	6713      	str	r3, [r2, #112]	; 0x70
 800175e:	e01c      	b.n	800179a <HAL_RCC_OscConfig+0x376>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b05      	cmp	r3, #5
 8001766:	d10c      	bne.n	8001782 <HAL_RCC_OscConfig+0x35e>
 8001768:	4b62      	ldr	r3, [pc, #392]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 800176a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176c:	4a61      	ldr	r2, [pc, #388]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6713      	str	r3, [r2, #112]	; 0x70
 8001774:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 8001776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001778:	4a5e      	ldr	r2, [pc, #376]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6713      	str	r3, [r2, #112]	; 0x70
 8001780:	e00b      	b.n	800179a <HAL_RCC_OscConfig+0x376>
 8001782:	4b5c      	ldr	r3, [pc, #368]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 8001784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001786:	4a5b      	ldr	r2, [pc, #364]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6713      	str	r3, [r2, #112]	; 0x70
 800178e:	4b59      	ldr	r3, [pc, #356]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 8001790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001792:	4a58      	ldr	r2, [pc, #352]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d015      	beq.n	80017ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a2:	f7ff fafb 	bl	8000d9c <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017aa:	f7ff faf7 	bl	8000d9c <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e0d8      	b.n	8001972 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c0:	4b4c      	ldr	r3, [pc, #304]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0ee      	beq.n	80017aa <HAL_RCC_OscConfig+0x386>
 80017cc:	e014      	b.n	80017f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ce:	f7ff fae5 	bl	8000d9c <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d4:	e00a      	b.n	80017ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d6:	f7ff fae1 	bl	8000d9c <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e0c2      	b.n	8001972 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ec:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1ee      	bne.n	80017d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d105      	bne.n	800180a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fe:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a3c      	ldr	r2, [pc, #240]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 8001804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 80ae 	beq.w	8001970 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001814:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b08      	cmp	r3, #8
 800181e:	d06d      	beq.n	80018fc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d14b      	bne.n	80018c0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001828:	4b32      	ldr	r3, [pc, #200]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a31      	ldr	r2, [pc, #196]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 800182e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff fab2 	bl	8000d9c <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff faae 	bl	8000d9c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e091      	b.n	8001972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184e:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69da      	ldr	r2, [r3, #28]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	019b      	lsls	r3, r3, #6
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	085b      	lsrs	r3, r3, #1
 8001872:	3b01      	subs	r3, #1
 8001874:	041b      	lsls	r3, r3, #16
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	061b      	lsls	r3, r3, #24
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	071b      	lsls	r3, r3, #28
 8001886:	491b      	ldr	r1, [pc, #108]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 8001892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fa80 	bl	8000d9c <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff fa7c 	bl	8000d9c <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e05f      	b.n	8001972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x47c>
 80018be:	e057      	b.n	8001970 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 80018c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff fa66 	bl	8000d9c <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff fa62 	bl	8000d9c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e045      	b.n	8001972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e6:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_RCC_OscConfig+0x4d0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4b0>
 80018f2:	e03d      	b.n	8001970 <HAL_RCC_OscConfig+0x54c>
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80018fc:	4b1f      	ldr	r3, [pc, #124]	; (800197c <HAL_RCC_OscConfig+0x558>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d030      	beq.n	800196c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d129      	bne.n	800196c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d122      	bne.n	800196c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800192c:	4013      	ands	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001932:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001934:	4293      	cmp	r3, r2
 8001936:	d119      	bne.n	800196c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	3b01      	subs	r3, #1
 8001946:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d10f      	bne.n	800196c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001956:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d107      	bne.n	800196c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800

08001980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0d0      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001998:	4b6a      	ldr	r3, [pc, #424]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 030f 	and.w	r3, r3, #15
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d910      	bls.n	80019c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b67      	ldr	r3, [pc, #412]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 020f 	bic.w	r2, r3, #15
 80019ae:	4965      	ldr	r1, [pc, #404]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b6:	4b63      	ldr	r3, [pc, #396]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0b8      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d020      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e0:	4b59      	ldr	r3, [pc, #356]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4a58      	ldr	r2, [pc, #352]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 80019e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f8:	4b53      	ldr	r3, [pc, #332]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a52      	ldr	r2, [pc, #328]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 80019fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a04:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	494d      	ldr	r1, [pc, #308]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d040      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d115      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e07f      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a42:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d109      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e073      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a52:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e06b      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a62:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f023 0203 	bic.w	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4936      	ldr	r1, [pc, #216]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a74:	f7ff f992 	bl	8000d9c <HAL_GetTick>
 8001a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7c:	f7ff f98e 	bl	8000d9c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e053      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 020c 	and.w	r2, r3, #12
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d1eb      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d210      	bcs.n	8001ad4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 020f 	bic.w	r2, r3, #15
 8001aba:	4922      	ldr	r1, [pc, #136]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e032      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d008      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	4916      	ldr	r1, [pc, #88]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d009      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	490e      	ldr	r1, [pc, #56]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b12:	f000 f821 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8001b16:	4602      	mov	r2, r0
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	490a      	ldr	r1, [pc, #40]	; (8001b4c <HAL_RCC_ClockConfig+0x1cc>)
 8001b24:	5ccb      	ldrb	r3, [r1, r3]
 8001b26:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <HAL_RCC_ClockConfig+0x1d0>)
 8001b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_RCC_ClockConfig+0x1d4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f8ee 	bl	8000d14 <HAL_InitTick>

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023c00 	.word	0x40023c00
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	08001db8 	.word	0x08001db8
 8001b50:	20000000 	.word	0x20000000
 8001b54:	20000004 	.word	0x20000004

08001b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b5c:	b090      	sub	sp, #64	; 0x40
 8001b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	637b      	str	r3, [r7, #52]	; 0x34
 8001b64:	2300      	movs	r3, #0
 8001b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b68:	2300      	movs	r3, #0
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b70:	4b59      	ldr	r3, [pc, #356]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 030c 	and.w	r3, r3, #12
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d00d      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x40>
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	f200 80a1 	bhi.w	8001cc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x34>
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d003      	beq.n	8001b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b8a:	e09b      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b8c:	4b53      	ldr	r3, [pc, #332]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x184>)
 8001b8e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b90:	e09b      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b92:	4b53      	ldr	r3, [pc, #332]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b96:	e098      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b98:	4b4f      	ldr	r3, [pc, #316]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ba2:	4b4d      	ldr	r3, [pc, #308]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d028      	beq.n	8001c00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bae:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	099b      	lsrs	r3, r3, #6
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	623b      	str	r3, [r7, #32]
 8001bb8:	627a      	str	r2, [r7, #36]	; 0x24
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bc4:	fb03 f201 	mul.w	r2, r3, r1
 8001bc8:	2300      	movs	r3, #0
 8001bca:	fb00 f303 	mul.w	r3, r0, r3
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a43      	ldr	r2, [pc, #268]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bd2:	fba0 1202 	umull	r1, r2, r0, r2
 8001bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bd8:	460a      	mov	r2, r1
 8001bda:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bde:	4413      	add	r3, r2
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be4:	2200      	movs	r2, #0
 8001be6:	61bb      	str	r3, [r7, #24]
 8001be8:	61fa      	str	r2, [r7, #28]
 8001bea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bf2:	f7fe fb21 	bl	8000238 <__aeabi_uldivmod>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bfe:	e053      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c00:	4b35      	ldr	r3, [pc, #212]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	2200      	movs	r2, #0
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	617a      	str	r2, [r7, #20]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c12:	f04f 0b00 	mov.w	fp, #0
 8001c16:	4652      	mov	r2, sl
 8001c18:	465b      	mov	r3, fp
 8001c1a:	f04f 0000 	mov.w	r0, #0
 8001c1e:	f04f 0100 	mov.w	r1, #0
 8001c22:	0159      	lsls	r1, r3, #5
 8001c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c28:	0150      	lsls	r0, r2, #5
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	ebb2 080a 	subs.w	r8, r2, sl
 8001c32:	eb63 090b 	sbc.w	r9, r3, fp
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c4a:	ebb2 0408 	subs.w	r4, r2, r8
 8001c4e:	eb63 0509 	sbc.w	r5, r3, r9
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	00eb      	lsls	r3, r5, #3
 8001c5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c60:	00e2      	lsls	r2, r4, #3
 8001c62:	4614      	mov	r4, r2
 8001c64:	461d      	mov	r5, r3
 8001c66:	eb14 030a 	adds.w	r3, r4, sl
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	eb45 030b 	adc.w	r3, r5, fp
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c7e:	4629      	mov	r1, r5
 8001c80:	028b      	lsls	r3, r1, #10
 8001c82:	4621      	mov	r1, r4
 8001c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c88:	4621      	mov	r1, r4
 8001c8a:	028a      	lsls	r2, r1, #10
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c92:	2200      	movs	r2, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	60fa      	str	r2, [r7, #12]
 8001c98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c9c:	f7fe facc 	bl	8000238 <__aeabi_uldivmod>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	0c1b      	lsrs	r3, r3, #16
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001cb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cc2:	e002      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x184>)
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3740      	adds	r7, #64	; 0x40
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	00f42400 	.word	0x00f42400
 8001ce0:	017d7840 	.word	0x017d7840

08001ce4 <memset>:
 8001ce4:	4402      	add	r2, r0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d100      	bne.n	8001cee <memset+0xa>
 8001cec:	4770      	bx	lr
 8001cee:	f803 1b01 	strb.w	r1, [r3], #1
 8001cf2:	e7f9      	b.n	8001ce8 <memset+0x4>

08001cf4 <__libc_init_array>:
 8001cf4:	b570      	push	{r4, r5, r6, lr}
 8001cf6:	4d0d      	ldr	r5, [pc, #52]	; (8001d2c <__libc_init_array+0x38>)
 8001cf8:	4c0d      	ldr	r4, [pc, #52]	; (8001d30 <__libc_init_array+0x3c>)
 8001cfa:	1b64      	subs	r4, r4, r5
 8001cfc:	10a4      	asrs	r4, r4, #2
 8001cfe:	2600      	movs	r6, #0
 8001d00:	42a6      	cmp	r6, r4
 8001d02:	d109      	bne.n	8001d18 <__libc_init_array+0x24>
 8001d04:	4d0b      	ldr	r5, [pc, #44]	; (8001d34 <__libc_init_array+0x40>)
 8001d06:	4c0c      	ldr	r4, [pc, #48]	; (8001d38 <__libc_init_array+0x44>)
 8001d08:	f000 f826 	bl	8001d58 <_init>
 8001d0c:	1b64      	subs	r4, r4, r5
 8001d0e:	10a4      	asrs	r4, r4, #2
 8001d10:	2600      	movs	r6, #0
 8001d12:	42a6      	cmp	r6, r4
 8001d14:	d105      	bne.n	8001d22 <__libc_init_array+0x2e>
 8001d16:	bd70      	pop	{r4, r5, r6, pc}
 8001d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d1c:	4798      	blx	r3
 8001d1e:	3601      	adds	r6, #1
 8001d20:	e7ee      	b.n	8001d00 <__libc_init_array+0xc>
 8001d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d26:	4798      	blx	r3
 8001d28:	3601      	adds	r6, #1
 8001d2a:	e7f2      	b.n	8001d12 <__libc_init_array+0x1e>
 8001d2c:	08001dd0 	.word	0x08001dd0
 8001d30:	08001dd0 	.word	0x08001dd0
 8001d34:	08001dd0 	.word	0x08001dd0
 8001d38:	08001dd4 	.word	0x08001dd4

08001d3c <memcpy>:
 8001d3c:	440a      	add	r2, r1
 8001d3e:	4291      	cmp	r1, r2
 8001d40:	f100 33ff 	add.w	r3, r0, #4294967295
 8001d44:	d100      	bne.n	8001d48 <memcpy+0xc>
 8001d46:	4770      	bx	lr
 8001d48:	b510      	push	{r4, lr}
 8001d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d52:	4291      	cmp	r1, r2
 8001d54:	d1f9      	bne.n	8001d4a <memcpy+0xe>
 8001d56:	bd10      	pop	{r4, pc}

08001d58 <_init>:
 8001d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5a:	bf00      	nop
 8001d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d5e:	bc08      	pop	{r3}
 8001d60:	469e      	mov	lr, r3
 8001d62:	4770      	bx	lr

08001d64 <_fini>:
 8001d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d66:	bf00      	nop
 8001d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d6a:	bc08      	pop	{r3}
 8001d6c:	469e      	mov	lr, r3
 8001d6e:	4770      	bx	lr
