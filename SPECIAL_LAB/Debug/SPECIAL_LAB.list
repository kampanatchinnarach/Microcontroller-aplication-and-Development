
SPECIAL_LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d70  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003f68  08003f68  00013f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ff4  08003ff4  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08003ff4  08003ff4  00013ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ffc  08003ffc  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ffc  08003ffc  00013ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08004004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20000040  08004044  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08004044  00020454  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002006e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aba4  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b24  00000000  00000000  0002ac55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  0002c780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000615  00000000  00000000  0002cf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ad4  00000000  00000000  0002d58d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b653  00000000  00000000  00054061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0724  00000000  00000000  0005f6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f24  00000000  00000000  0014fdd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00151cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000040 	.word	0x20000040
 8000214:	00000000 	.word	0x00000000
 8000218:	08003f50 	.word	0x08003f50

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000044 	.word	0x20000044
 8000234:	08003f50 	.word	0x08003f50

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295
 800026c:	f04f 30ff 	movne.w	r0, #4294967295
 8000270:	f000 b970 	b.w	8000554 <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9e08      	ldr	r6, [sp, #32]
 8000292:	460d      	mov	r5, r1
 8000294:	4604      	mov	r4, r0
 8000296:	460f      	mov	r7, r1
 8000298:	2b00      	cmp	r3, #0
 800029a:	d14a      	bne.n	8000332 <__udivmoddi4+0xa6>
 800029c:	428a      	cmp	r2, r1
 800029e:	4694      	mov	ip, r2
 80002a0:	d965      	bls.n	800036e <__udivmoddi4+0xe2>
 80002a2:	fab2 f382 	clz	r3, r2
 80002a6:	b143      	cbz	r3, 80002ba <__udivmoddi4+0x2e>
 80002a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002ac:	f1c3 0220 	rsb	r2, r3, #32
 80002b0:	409f      	lsls	r7, r3
 80002b2:	fa20 f202 	lsr.w	r2, r0, r2
 80002b6:	4317      	orrs	r7, r2
 80002b8:	409c      	lsls	r4, r3
 80002ba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002be:	fa1f f58c 	uxth.w	r5, ip
 80002c2:	fbb7 f1fe 	udiv	r1, r7, lr
 80002c6:	0c22      	lsrs	r2, r4, #16
 80002c8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002cc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002d0:	fb01 f005 	mul.w	r0, r1, r5
 80002d4:	4290      	cmp	r0, r2
 80002d6:	d90a      	bls.n	80002ee <__udivmoddi4+0x62>
 80002d8:	eb1c 0202 	adds.w	r2, ip, r2
 80002dc:	f101 37ff 	add.w	r7, r1, #4294967295
 80002e0:	f080 811c 	bcs.w	800051c <__udivmoddi4+0x290>
 80002e4:	4290      	cmp	r0, r2
 80002e6:	f240 8119 	bls.w	800051c <__udivmoddi4+0x290>
 80002ea:	3902      	subs	r1, #2
 80002ec:	4462      	add	r2, ip
 80002ee:	1a12      	subs	r2, r2, r0
 80002f0:	b2a4      	uxth	r4, r4
 80002f2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002f6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002fe:	fb00 f505 	mul.w	r5, r0, r5
 8000302:	42a5      	cmp	r5, r4
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x90>
 8000306:	eb1c 0404 	adds.w	r4, ip, r4
 800030a:	f100 32ff 	add.w	r2, r0, #4294967295
 800030e:	f080 8107 	bcs.w	8000520 <__udivmoddi4+0x294>
 8000312:	42a5      	cmp	r5, r4
 8000314:	f240 8104 	bls.w	8000520 <__udivmoddi4+0x294>
 8000318:	4464      	add	r4, ip
 800031a:	3802      	subs	r0, #2
 800031c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000320:	1b64      	subs	r4, r4, r5
 8000322:	2100      	movs	r1, #0
 8000324:	b11e      	cbz	r6, 800032e <__udivmoddi4+0xa2>
 8000326:	40dc      	lsrs	r4, r3
 8000328:	2300      	movs	r3, #0
 800032a:	e9c6 4300 	strd	r4, r3, [r6]
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	428b      	cmp	r3, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0xbc>
 8000336:	2e00      	cmp	r6, #0
 8000338:	f000 80ed 	beq.w	8000516 <__udivmoddi4+0x28a>
 800033c:	2100      	movs	r1, #0
 800033e:	e9c6 0500 	strd	r0, r5, [r6]
 8000342:	4608      	mov	r0, r1
 8000344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000348:	fab3 f183 	clz	r1, r3
 800034c:	2900      	cmp	r1, #0
 800034e:	d149      	bne.n	80003e4 <__udivmoddi4+0x158>
 8000350:	42ab      	cmp	r3, r5
 8000352:	d302      	bcc.n	800035a <__udivmoddi4+0xce>
 8000354:	4282      	cmp	r2, r0
 8000356:	f200 80f8 	bhi.w	800054a <__udivmoddi4+0x2be>
 800035a:	1a84      	subs	r4, r0, r2
 800035c:	eb65 0203 	sbc.w	r2, r5, r3
 8000360:	2001      	movs	r0, #1
 8000362:	4617      	mov	r7, r2
 8000364:	2e00      	cmp	r6, #0
 8000366:	d0e2      	beq.n	800032e <__udivmoddi4+0xa2>
 8000368:	e9c6 4700 	strd	r4, r7, [r6]
 800036c:	e7df      	b.n	800032e <__udivmoddi4+0xa2>
 800036e:	b902      	cbnz	r2, 8000372 <__udivmoddi4+0xe6>
 8000370:	deff      	udf	#255	; 0xff
 8000372:	fab2 f382 	clz	r3, r2
 8000376:	2b00      	cmp	r3, #0
 8000378:	f040 8090 	bne.w	800049c <__udivmoddi4+0x210>
 800037c:	1a8a      	subs	r2, r1, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	2101      	movs	r1, #1
 8000388:	fbb2 f5f7 	udiv	r5, r2, r7
 800038c:	fb07 2015 	mls	r0, r7, r5, r2
 8000390:	0c22      	lsrs	r2, r4, #16
 8000392:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000396:	fb0e f005 	mul.w	r0, lr, r5
 800039a:	4290      	cmp	r0, r2
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x124>
 800039e:	eb1c 0202 	adds.w	r2, ip, r2
 80003a2:	f105 38ff 	add.w	r8, r5, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x122>
 80003a8:	4290      	cmp	r0, r2
 80003aa:	f200 80cb 	bhi.w	8000544 <__udivmoddi4+0x2b8>
 80003ae:	4645      	mov	r5, r8
 80003b0:	1a12      	subs	r2, r2, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003b8:	fb07 2210 	mls	r2, r7, r0, r2
 80003bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c0:	fb0e fe00 	mul.w	lr, lr, r0
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x14e>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d0:	d202      	bcs.n	80003d8 <__udivmoddi4+0x14c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f200 80bb 	bhi.w	800054e <__udivmoddi4+0x2c2>
 80003d8:	4610      	mov	r0, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003e2:	e79f      	b.n	8000324 <__udivmoddi4+0x98>
 80003e4:	f1c1 0720 	rsb	r7, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80003f2:	fa05 f401 	lsl.w	r4, r5, r1
 80003f6:	fa20 f307 	lsr.w	r3, r0, r7
 80003fa:	40fd      	lsrs	r5, r7
 80003fc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000400:	4323      	orrs	r3, r4
 8000402:	fbb5 f8f9 	udiv	r8, r5, r9
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	fb09 5518 	mls	r5, r9, r8, r5
 800040e:	0c1c      	lsrs	r4, r3, #16
 8000410:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000414:	fb08 f50e 	mul.w	r5, r8, lr
 8000418:	42a5      	cmp	r5, r4
 800041a:	fa02 f201 	lsl.w	r2, r2, r1
 800041e:	fa00 f001 	lsl.w	r0, r0, r1
 8000422:	d90b      	bls.n	800043c <__udivmoddi4+0x1b0>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f108 3aff 	add.w	sl, r8, #4294967295
 800042c:	f080 8088 	bcs.w	8000540 <__udivmoddi4+0x2b4>
 8000430:	42a5      	cmp	r5, r4
 8000432:	f240 8085 	bls.w	8000540 <__udivmoddi4+0x2b4>
 8000436:	f1a8 0802 	sub.w	r8, r8, #2
 800043a:	4464      	add	r4, ip
 800043c:	1b64      	subs	r4, r4, r5
 800043e:	b29d      	uxth	r5, r3
 8000440:	fbb4 f3f9 	udiv	r3, r4, r9
 8000444:	fb09 4413 	mls	r4, r9, r3, r4
 8000448:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800044c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x1da>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f103 35ff 	add.w	r5, r3, #4294967295
 800045c:	d26c      	bcs.n	8000538 <__udivmoddi4+0x2ac>
 800045e:	45a6      	cmp	lr, r4
 8000460:	d96a      	bls.n	8000538 <__udivmoddi4+0x2ac>
 8000462:	3b02      	subs	r3, #2
 8000464:	4464      	add	r4, ip
 8000466:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800046a:	fba3 9502 	umull	r9, r5, r3, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	42ac      	cmp	r4, r5
 8000474:	46c8      	mov	r8, r9
 8000476:	46ae      	mov	lr, r5
 8000478:	d356      	bcc.n	8000528 <__udivmoddi4+0x29c>
 800047a:	d053      	beq.n	8000524 <__udivmoddi4+0x298>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x208>
 800047e:	ebb0 0208 	subs.w	r2, r0, r8
 8000482:	eb64 040e 	sbc.w	r4, r4, lr
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40ca      	lsrs	r2, r1
 800048c:	40cc      	lsrs	r4, r1
 800048e:	4317      	orrs	r7, r2
 8000490:	e9c6 7400 	strd	r7, r4, [r6]
 8000494:	4618      	mov	r0, r3
 8000496:	2100      	movs	r1, #0
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	f1c3 0120 	rsb	r1, r3, #32
 80004a0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004a4:	fa20 f201 	lsr.w	r2, r0, r1
 80004a8:	fa25 f101 	lsr.w	r1, r5, r1
 80004ac:	409d      	lsls	r5, r3
 80004ae:	432a      	orrs	r2, r5
 80004b0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b4:	fa1f fe8c 	uxth.w	lr, ip
 80004b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80004bc:	fb07 1510 	mls	r5, r7, r0, r1
 80004c0:	0c11      	lsrs	r1, r2, #16
 80004c2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004c6:	fb00 f50e 	mul.w	r5, r0, lr
 80004ca:	428d      	cmp	r5, r1
 80004cc:	fa04 f403 	lsl.w	r4, r4, r3
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x258>
 80004d2:	eb1c 0101 	adds.w	r1, ip, r1
 80004d6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004da:	d22f      	bcs.n	800053c <__udivmoddi4+0x2b0>
 80004dc:	428d      	cmp	r5, r1
 80004de:	d92d      	bls.n	800053c <__udivmoddi4+0x2b0>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	1b49      	subs	r1, r1, r5
 80004e6:	b292      	uxth	r2, r2
 80004e8:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ec:	fb07 1115 	mls	r1, r7, r5, r1
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	fb05 f10e 	mul.w	r1, r5, lr
 80004f8:	4291      	cmp	r1, r2
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x282>
 80004fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000500:	f105 38ff 	add.w	r8, r5, #4294967295
 8000504:	d216      	bcs.n	8000534 <__udivmoddi4+0x2a8>
 8000506:	4291      	cmp	r1, r2
 8000508:	d914      	bls.n	8000534 <__udivmoddi4+0x2a8>
 800050a:	3d02      	subs	r5, #2
 800050c:	4462      	add	r2, ip
 800050e:	1a52      	subs	r2, r2, r1
 8000510:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000514:	e738      	b.n	8000388 <__udivmoddi4+0xfc>
 8000516:	4631      	mov	r1, r6
 8000518:	4630      	mov	r0, r6
 800051a:	e708      	b.n	800032e <__udivmoddi4+0xa2>
 800051c:	4639      	mov	r1, r7
 800051e:	e6e6      	b.n	80002ee <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e6fb      	b.n	800031c <__udivmoddi4+0x90>
 8000524:	4548      	cmp	r0, r9
 8000526:	d2a9      	bcs.n	800047c <__udivmoddi4+0x1f0>
 8000528:	ebb9 0802 	subs.w	r8, r9, r2
 800052c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000530:	3b01      	subs	r3, #1
 8000532:	e7a3      	b.n	800047c <__udivmoddi4+0x1f0>
 8000534:	4645      	mov	r5, r8
 8000536:	e7ea      	b.n	800050e <__udivmoddi4+0x282>
 8000538:	462b      	mov	r3, r5
 800053a:	e794      	b.n	8000466 <__udivmoddi4+0x1da>
 800053c:	4640      	mov	r0, r8
 800053e:	e7d1      	b.n	80004e4 <__udivmoddi4+0x258>
 8000540:	46d0      	mov	r8, sl
 8000542:	e77b      	b.n	800043c <__udivmoddi4+0x1b0>
 8000544:	3d02      	subs	r5, #2
 8000546:	4462      	add	r2, ip
 8000548:	e732      	b.n	80003b0 <__udivmoddi4+0x124>
 800054a:	4608      	mov	r0, r1
 800054c:	e70a      	b.n	8000364 <__udivmoddi4+0xd8>
 800054e:	4464      	add	r4, ip
 8000550:	3802      	subs	r0, #2
 8000552:	e742      	b.n	80003da <__udivmoddi4+0x14e>

08000554 <__aeabi_idiv0>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_GPIO_Init+0x44>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a0e      	ldr	r2, [pc, #56]	; (800059c <MX_GPIO_Init+0x44>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_GPIO_Init+0x44>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_GPIO_Init+0x44>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a08      	ldr	r2, [pc, #32]	; (800059c <MX_GPIO_Init+0x44>)
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_GPIO_Init+0x44>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0308 	and.w	r3, r3, #8
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]

}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f828 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f7ff ffd6 	bl	8000558 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005ac:	f000 fb3e 	bl	8000c2c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005b0:	f000 fb9c 	bl	8000cec <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 fb6a 	bl	8000c8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, (uint8_t*) text, sizeof(text), 100);
 80005b8:	2364      	movs	r3, #100	; 0x64
 80005ba:	2224      	movs	r2, #36	; 0x24
 80005bc:	490a      	ldr	r1, [pc, #40]	; (80005e8 <main+0x48>)
 80005be:	480b      	ldr	r0, [pc, #44]	; (80005ec <main+0x4c>)
 80005c0:	f002 f9ce 	bl	8002960 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*) ready, strlen(ready), 1000);
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <main+0x50>)
 80005c6:	f7ff fe41 	bl	800024c <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d2:	4907      	ldr	r1, [pc, #28]	; (80005f0 <main+0x50>)
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <main+0x4c>)
 80005d6:	f002 f9c3 	bl	8002960 <HAL_UART_Transmit>

	HAL_UART_Receive_IT(&huart3, (uint8_t*) &rc, 1);
 80005da:	2201      	movs	r2, #1
 80005dc:	4905      	ldr	r1, [pc, #20]	; (80005f4 <main+0x54>)
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <main+0x4c>)
 80005e0:	f002 fa41 	bl	8002a66 <HAL_UART_Receive_IT>
//            HAL_UART_Transmit(&huart3, &receivedCharName, 1, 1000);
//            myName[strlen(myName)] = receivedCharName;
//          }
//        }
//      }
	while (1) {
 80005e4:	e7fe      	b.n	80005e4 <main+0x44>
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	200003c8 	.word	0x200003c8
 80005f0:	20000024 	.word	0x20000024
 80005f4:	20000250 	.word	0x20000250

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	2234      	movs	r2, #52	; 0x34
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fc6e 	bl	8003ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <SystemClock_Config+0xd4>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a2a      	ldr	r2, [pc, #168]	; (80006cc <SystemClock_Config+0xd4>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <SystemClock_Config+0xd4>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <SystemClock_Config+0xd8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a25      	ldr	r2, [pc, #148]	; (80006d0 <SystemClock_Config+0xd8>)
 800063a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <SystemClock_Config+0xd8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000660:	2308      	movs	r3, #8
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000664:	23d8      	movs	r3, #216	; 0xd8
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800066c:	2302      	movs	r3, #2
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	4618      	mov	r0, r3
 800067a:	f001 f867 	bl	800174c <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000684:	f000 fa72 	bl	8000b6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000688:	f001 f810 	bl	80016ac <HAL_PWREx_EnableOverDrive>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000692:	f000 fa6b 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	2107      	movs	r1, #7
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 faf7 	bl	8001ca8 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006c0:	f000 fa54 	bl	8000b6c <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

	if (huart == &huart3 && nameInput == true) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a89      	ldr	r2, [pc, #548]	; (8000904 <HAL_UART_RxCpltCallback+0x230>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d16f      	bne.n	80007c4 <HAL_UART_RxCpltCallback+0xf0>
 80006e4:	4b88      	ldr	r3, [pc, #544]	; (8000908 <HAL_UART_RxCpltCallback+0x234>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d06b      	beq.n	80007c4 <HAL_UART_RxCpltCallback+0xf0>
		if (rc == '\r') {
 80006ec:	4b87      	ldr	r3, [pc, #540]	; (800090c <HAL_UART_RxCpltCallback+0x238>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b0d      	cmp	r3, #13
 80006f2:	d13a      	bne.n	800076a <HAL_UART_RxCpltCallback+0x96>
			nameInput = false;
 80006f4:	4b84      	ldr	r3, [pc, #528]	; (8000908 <HAL_UART_RxCpltCallback+0x234>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
			strcpy(nameTemp, myName);
 80006fa:	4985      	ldr	r1, [pc, #532]	; (8000910 <HAL_UART_RxCpltCallback+0x23c>)
 80006fc:	4885      	ldr	r0, [pc, #532]	; (8000914 <HAL_UART_RxCpltCallback+0x240>)
 80006fe:	f003 fc1f 	bl	8003f40 <strcpy>
			strcat(nameTemp, "\r");
 8000702:	4884      	ldr	r0, [pc, #528]	; (8000914 <HAL_UART_RxCpltCallback+0x240>)
 8000704:	f7ff fda2 	bl	800024c <strlen>
 8000708:	4603      	mov	r3, r0
 800070a:	461a      	mov	r2, r3
 800070c:	4b81      	ldr	r3, [pc, #516]	; (8000914 <HAL_UART_RxCpltCallback+0x240>)
 800070e:	4413      	add	r3, r2
 8000710:	4981      	ldr	r1, [pc, #516]	; (8000918 <HAL_UART_RxCpltCallback+0x244>)
 8000712:	461a      	mov	r2, r3
 8000714:	460b      	mov	r3, r1
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*) nameTemp, sizeof(nameTemp),
 800071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071e:	2264      	movs	r2, #100	; 0x64
 8000720:	497c      	ldr	r1, [pc, #496]	; (8000914 <HAL_UART_RxCpltCallback+0x240>)
 8000722:	487e      	ldr	r0, [pc, #504]	; (800091c <HAL_UART_RxCpltCallback+0x248>)
 8000724:	f002 f91c 	bl	8002960 <HAL_UART_Transmit>
					1000);
			strcpy(nameTemp, myName);
 8000728:	4979      	ldr	r1, [pc, #484]	; (8000910 <HAL_UART_RxCpltCallback+0x23c>)
 800072a:	487a      	ldr	r0, [pc, #488]	; (8000914 <HAL_UART_RxCpltCallback+0x240>)
 800072c:	f003 fc08 	bl	8003f40 <strcpy>
			memset(myName, 0, sizeof(myName));
 8000730:	2264      	movs	r2, #100	; 0x64
 8000732:	2100      	movs	r1, #0
 8000734:	4876      	ldr	r0, [pc, #472]	; (8000910 <HAL_UART_RxCpltCallback+0x23c>)
 8000736:	f003 fbd7 	bl	8003ee8 <memset>
			if(strcmp(nameTemp,"q")==0){
 800073a:	4979      	ldr	r1, [pc, #484]	; (8000920 <HAL_UART_RxCpltCallback+0x24c>)
 800073c:	4875      	ldr	r0, [pc, #468]	; (8000914 <HAL_UART_RxCpltCallback+0x240>)
 800073e:	f7ff fd7b 	bl	8000238 <strcmp>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d107      	bne.n	8000758 <HAL_UART_RxCpltCallback+0x84>
				HAL_UART_Transmit(&huart3, (uint8_t*) "\r\nQuit Already",sizeof("\r\nQuit Already"), 1000);
 8000748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074c:	220f      	movs	r2, #15
 800074e:	4975      	ldr	r1, [pc, #468]	; (8000924 <HAL_UART_RxCpltCallback+0x250>)
 8000750:	486c      	ldr	r0, [pc, #432]	; (8000904 <HAL_UART_RxCpltCallback+0x230>)
 8000752:	f002 f905 	bl	8002960 <HAL_UART_Transmit>
				return 0;
 8000756:	e1e3      	b.n	8000b20 <HAL_UART_RxCpltCallback+0x44c>
			}
			HAL_UART_Receive_IT(&huart1, (uint8_t*) &rc, 1);
 8000758:	2201      	movs	r2, #1
 800075a:	496c      	ldr	r1, [pc, #432]	; (800090c <HAL_UART_RxCpltCallback+0x238>)
 800075c:	486f      	ldr	r0, [pc, #444]	; (800091c <HAL_UART_RxCpltCallback+0x248>)
 800075e:	f002 f982 	bl	8002a66 <HAL_UART_Receive_IT>
			rc = '\0';
 8000762:	4b6a      	ldr	r3, [pc, #424]	; (800090c <HAL_UART_RxCpltCallback+0x238>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	e02c      	b.n	80007c4 <HAL_UART_RxCpltCallback+0xf0>

		}

		else if (rc == 0x08) {
 800076a:	4b68      	ldr	r3, [pc, #416]	; (800090c <HAL_UART_RxCpltCallback+0x238>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b08      	cmp	r3, #8
 8000770:	d114      	bne.n	800079c <HAL_UART_RxCpltCallback+0xc8>

			if (strlen(myName) >= 0) {
				HAL_UART_Receive_IT(&huart3, (uint8_t*) &rc, 1);
 8000772:	2201      	movs	r2, #1
 8000774:	4965      	ldr	r1, [pc, #404]	; (800090c <HAL_UART_RxCpltCallback+0x238>)
 8000776:	4863      	ldr	r0, [pc, #396]	; (8000904 <HAL_UART_RxCpltCallback+0x230>)
 8000778:	f002 f975 	bl	8002a66 <HAL_UART_Receive_IT>
				myName[strlen(myName) - 1] = '\0';
 800077c:	4864      	ldr	r0, [pc, #400]	; (8000910 <HAL_UART_RxCpltCallback+0x23c>)
 800077e:	f7ff fd65 	bl	800024c <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	3b01      	subs	r3, #1
 8000786:	4a62      	ldr	r2, [pc, #392]	; (8000910 <HAL_UART_RxCpltCallback+0x23c>)
 8000788:	2100      	movs	r1, #0
 800078a:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&huart3, (uint8_t*) "\b \b", 3, 1000);
 800078c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000790:	2203      	movs	r2, #3
 8000792:	4965      	ldr	r1, [pc, #404]	; (8000928 <HAL_UART_RxCpltCallback+0x254>)
 8000794:	485b      	ldr	r0, [pc, #364]	; (8000904 <HAL_UART_RxCpltCallback+0x230>)
 8000796:	f002 f8e3 	bl	8002960 <HAL_UART_Transmit>
 800079a:	e013      	b.n	80007c4 <HAL_UART_RxCpltCallback+0xf0>
			}

		}

		else {
			HAL_UART_Receive_IT(&huart3, (uint8_t*) &rc, 1);
 800079c:	2201      	movs	r2, #1
 800079e:	495b      	ldr	r1, [pc, #364]	; (800090c <HAL_UART_RxCpltCallback+0x238>)
 80007a0:	4858      	ldr	r0, [pc, #352]	; (8000904 <HAL_UART_RxCpltCallback+0x230>)
 80007a2:	f002 f960 	bl	8002a66 <HAL_UART_Receive_IT>
			myName[strlen(myName)] = rc;
 80007a6:	485a      	ldr	r0, [pc, #360]	; (8000910 <HAL_UART_RxCpltCallback+0x23c>)
 80007a8:	f7ff fd50 	bl	800024c <strlen>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4a57      	ldr	r2, [pc, #348]	; (800090c <HAL_UART_RxCpltCallback+0x238>)
 80007b0:	7811      	ldrb	r1, [r2, #0]
 80007b2:	4a57      	ldr	r2, [pc, #348]	; (8000910 <HAL_UART_RxCpltCallback+0x23c>)
 80007b4:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart3, (uint8_t*) &rc, 1, 1000);
 80007b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ba:	2201      	movs	r2, #1
 80007bc:	4953      	ldr	r1, [pc, #332]	; (800090c <HAL_UART_RxCpltCallback+0x238>)
 80007be:	4851      	ldr	r0, [pc, #324]	; (8000904 <HAL_UART_RxCpltCallback+0x230>)
 80007c0:	f002 f8ce 	bl	8002960 <HAL_UART_Transmit>
		}
	}

	if (huart == &huart3 && !nameInput) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a4f      	ldr	r2, [pc, #316]	; (8000904 <HAL_UART_RxCpltCallback+0x230>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d173      	bne.n	80008b4 <HAL_UART_RxCpltCallback+0x1e0>
 80007cc:	4b4e      	ldr	r3, [pc, #312]	; (8000908 <HAL_UART_RxCpltCallback+0x234>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	f083 0301 	eor.w	r3, r3, #1
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d06c      	beq.n	80008b4 <HAL_UART_RxCpltCallback+0x1e0>
		if (rc == '\r') {
 80007da:	4b4c      	ldr	r3, [pc, #304]	; (800090c <HAL_UART_RxCpltCallback+0x238>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b0d      	cmp	r3, #13
 80007e0:	d13b      	bne.n	800085a <HAL_UART_RxCpltCallback+0x186>
			if(strcmp(inputBuffer,"q")==0){
 80007e2:	494f      	ldr	r1, [pc, #316]	; (8000920 <HAL_UART_RxCpltCallback+0x24c>)
 80007e4:	4851      	ldr	r0, [pc, #324]	; (800092c <HAL_UART_RxCpltCallback+0x258>)
 80007e6:	f7ff fd27 	bl	8000238 <strcmp>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d10d      	bne.n	800080c <HAL_UART_RxCpltCallback+0x138>
										HAL_UART_Transmit(&huart1, (uint8_t*) "q",1, 1000);
 80007f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f4:	2201      	movs	r2, #1
 80007f6:	494a      	ldr	r1, [pc, #296]	; (8000920 <HAL_UART_RxCpltCallback+0x24c>)
 80007f8:	4848      	ldr	r0, [pc, #288]	; (800091c <HAL_UART_RxCpltCallback+0x248>)
 80007fa:	f002 f8b1 	bl	8002960 <HAL_UART_Transmit>
										HAL_UART_Transmit(&huart3, (uint8_t*) "\r\nQuit Already",sizeof("\r\nQuit Already"), 1000);
 80007fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000802:	220f      	movs	r2, #15
 8000804:	4947      	ldr	r1, [pc, #284]	; (8000924 <HAL_UART_RxCpltCallback+0x250>)
 8000806:	483f      	ldr	r0, [pc, #252]	; (8000904 <HAL_UART_RxCpltCallback+0x230>)
 8000808:	f002 f8aa 	bl	8002960 <HAL_UART_Transmit>

									}
			inputBuffer[strlen(inputBuffer)] = '\r';
 800080c:	4847      	ldr	r0, [pc, #284]	; (800092c <HAL_UART_RxCpltCallback+0x258>)
 800080e:	f7ff fd1d 	bl	800024c <strlen>
 8000812:	4603      	mov	r3, r0
 8000814:	4a45      	ldr	r2, [pc, #276]	; (800092c <HAL_UART_RxCpltCallback+0x258>)
 8000816:	210d      	movs	r1, #13
 8000818:	54d1      	strb	r1, [r2, r3]

			HAL_UART_Transmit(&huart1, (uint8_t*)&inputBuffer,strlen(&inputBuffer), 1000);
 800081a:	4844      	ldr	r0, [pc, #272]	; (800092c <HAL_UART_RxCpltCallback+0x258>)
 800081c:	f7ff fd16 	bl	800024c <strlen>
 8000820:	4603      	mov	r3, r0
 8000822:	b29a      	uxth	r2, r3
 8000824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000828:	4940      	ldr	r1, [pc, #256]	; (800092c <HAL_UART_RxCpltCallback+0x258>)
 800082a:	483c      	ldr	r0, [pc, #240]	; (800091c <HAL_UART_RxCpltCallback+0x248>)
 800082c:	f002 f898 	bl	8002960 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", strlen("\r\n"), 1000);
 8000830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000834:	2202      	movs	r2, #2
 8000836:	493e      	ldr	r1, [pc, #248]	; (8000930 <HAL_UART_RxCpltCallback+0x25c>)
 8000838:	4832      	ldr	r0, [pc, #200]	; (8000904 <HAL_UART_RxCpltCallback+0x230>)
 800083a:	f002 f891 	bl	8002960 <HAL_UART_Transmit>
			//receivingData = true;
			memset(inputBuffer, 0, sizeof(inputBuffer));
 800083e:	2264      	movs	r2, #100	; 0x64
 8000840:	2100      	movs	r1, #0
 8000842:	483a      	ldr	r0, [pc, #232]	; (800092c <HAL_UART_RxCpltCallback+0x258>)
 8000844:	f003 fb50 	bl	8003ee8 <memset>
			rc = '\0';
 8000848:	4b30      	ldr	r3, [pc, #192]	; (800090c <HAL_UART_RxCpltCallback+0x238>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, (uint8_t*) &rc, 1);
 800084e:	2201      	movs	r2, #1
 8000850:	492e      	ldr	r1, [pc, #184]	; (800090c <HAL_UART_RxCpltCallback+0x238>)
 8000852:	4832      	ldr	r0, [pc, #200]	; (800091c <HAL_UART_RxCpltCallback+0x248>)
 8000854:	f002 f907 	bl	8002a66 <HAL_UART_Receive_IT>
 8000858:	e02c      	b.n	80008b4 <HAL_UART_RxCpltCallback+0x1e0>
		}

		else if (rc == 0x08) {
 800085a:	4b2c      	ldr	r3, [pc, #176]	; (800090c <HAL_UART_RxCpltCallback+0x238>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b08      	cmp	r3, #8
 8000860:	d114      	bne.n	800088c <HAL_UART_RxCpltCallback+0x1b8>
			if (strlen(inputBuffer) >= 0) {
				HAL_UART_Receive_IT(&huart3, (uint8_t*) &rc, 1);
 8000862:	2201      	movs	r2, #1
 8000864:	4929      	ldr	r1, [pc, #164]	; (800090c <HAL_UART_RxCpltCallback+0x238>)
 8000866:	4827      	ldr	r0, [pc, #156]	; (8000904 <HAL_UART_RxCpltCallback+0x230>)
 8000868:	f002 f8fd 	bl	8002a66 <HAL_UART_Receive_IT>
				inputBuffer[strlen(inputBuffer) - 1] = '\0';
 800086c:	482f      	ldr	r0, [pc, #188]	; (800092c <HAL_UART_RxCpltCallback+0x258>)
 800086e:	f7ff fced 	bl	800024c <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	3b01      	subs	r3, #1
 8000876:	4a2d      	ldr	r2, [pc, #180]	; (800092c <HAL_UART_RxCpltCallback+0x258>)
 8000878:	2100      	movs	r1, #0
 800087a:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&huart3, (uint8_t*) "\b \b", 3, 1000);
 800087c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000880:	2203      	movs	r2, #3
 8000882:	4929      	ldr	r1, [pc, #164]	; (8000928 <HAL_UART_RxCpltCallback+0x254>)
 8000884:	481f      	ldr	r0, [pc, #124]	; (8000904 <HAL_UART_RxCpltCallback+0x230>)
 8000886:	f002 f86b 	bl	8002960 <HAL_UART_Transmit>
 800088a:	e013      	b.n	80008b4 <HAL_UART_RxCpltCallback+0x1e0>
			}

		}

		else {
			HAL_UART_Transmit(&huart3, (uint8_t*) &rc, 1, 1000);
 800088c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000890:	2201      	movs	r2, #1
 8000892:	491e      	ldr	r1, [pc, #120]	; (800090c <HAL_UART_RxCpltCallback+0x238>)
 8000894:	481b      	ldr	r0, [pc, #108]	; (8000904 <HAL_UART_RxCpltCallback+0x230>)
 8000896:	f002 f863 	bl	8002960 <HAL_UART_Transmit>
			inputBuffer[strlen(inputBuffer)] = rc;
 800089a:	4824      	ldr	r0, [pc, #144]	; (800092c <HAL_UART_RxCpltCallback+0x258>)
 800089c:	f7ff fcd6 	bl	800024c <strlen>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4a1a      	ldr	r2, [pc, #104]	; (800090c <HAL_UART_RxCpltCallback+0x238>)
 80008a4:	7811      	ldrb	r1, [r2, #0]
 80008a6:	4a21      	ldr	r2, [pc, #132]	; (800092c <HAL_UART_RxCpltCallback+0x258>)
 80008a8:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Receive_IT(&huart3, (uint8_t*) &rc, 1);
 80008aa:	2201      	movs	r2, #1
 80008ac:	4917      	ldr	r1, [pc, #92]	; (800090c <HAL_UART_RxCpltCallback+0x238>)
 80008ae:	4815      	ldr	r0, [pc, #84]	; (8000904 <HAL_UART_RxCpltCallback+0x230>)
 80008b0:	f002 f8d9 	bl	8002a66 <HAL_UART_Receive_IT>
		}
	}
	if (huart == &huart1) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a19      	ldr	r2, [pc, #100]	; (800091c <HAL_UART_RxCpltCallback+0x248>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	f040 8131 	bne.w	8000b20 <HAL_UART_RxCpltCallback+0x44c>
		if (strlen(yourName) == 0) {
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <HAL_UART_RxCpltCallback+0x260>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f040 80a1 	bne.w	8000a0a <HAL_UART_RxCpltCallback+0x336>
			if (rc == '\r') {
 80008c8:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_UART_RxCpltCallback+0x238>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b0d      	cmp	r3, #13
 80008ce:	f040 808e 	bne.w	80009ee <HAL_UART_RxCpltCallback+0x31a>
				strcpy(yourName, recieveText);
 80008d2:	4919      	ldr	r1, [pc, #100]	; (8000938 <HAL_UART_RxCpltCallback+0x264>)
 80008d4:	4817      	ldr	r0, [pc, #92]	; (8000934 <HAL_UART_RxCpltCallback+0x260>)
 80008d6:	f003 fb33 	bl	8003f40 <strcpy>
				memset(recieveText, '\0', sizeof(recieveText));
 80008da:	2264      	movs	r2, #100	; 0x64
 80008dc:	2100      	movs	r1, #0
 80008de:	4816      	ldr	r0, [pc, #88]	; (8000938 <HAL_UART_RxCpltCallback+0x264>)
 80008e0:	f003 fb02 	bl	8003ee8 <memset>
				if(strcmp(yourName,"q")==0){
 80008e4:	490e      	ldr	r1, [pc, #56]	; (8000920 <HAL_UART_RxCpltCallback+0x24c>)
 80008e6:	4813      	ldr	r0, [pc, #76]	; (8000934 <HAL_UART_RxCpltCallback+0x260>)
 80008e8:	f7ff fca6 	bl	8000238 <strcmp>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d126      	bne.n	8000940 <HAL_UART_RxCpltCallback+0x26c>
					HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n already quit",sizeof("\r\n already quit"), HAL_MAX_DELAY);
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	2210      	movs	r2, #16
 80008f8:	4910      	ldr	r1, [pc, #64]	; (800093c <HAL_UART_RxCpltCallback+0x268>)
 80008fa:	4802      	ldr	r0, [pc, #8]	; (8000904 <HAL_UART_RxCpltCallback+0x230>)
 80008fc:	f002 f830 	bl	8002960 <HAL_UART_Transmit>
					return 0;
 8000900:	e10e      	b.n	8000b20 <HAL_UART_RxCpltCallback+0x44c>
 8000902:	bf00      	nop
 8000904:	200003c8 	.word	0x200003c8
 8000908:	20000033 	.word	0x20000033
 800090c:	20000250 	.word	0x20000250
 8000910:	2000005c 	.word	0x2000005c
 8000914:	20000254 	.word	0x20000254
 8000918:	08003f68 	.word	0x08003f68
 800091c:	200002b8 	.word	0x200002b8
 8000920:	08003f6c 	.word	0x08003f6c
 8000924:	08003f70 	.word	0x08003f70
 8000928:	08003f80 	.word	0x08003f80
 800092c:	200001ec 	.word	0x200001ec
 8000930:	08003f84 	.word	0x08003f84
 8000934:	200000c0 	.word	0x200000c0
 8000938:	20000124 	.word	0x20000124
 800093c:	08003f88 	.word	0x08003f88
				}
				HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n        ",
 8000940:	f04f 33ff 	mov.w	r3, #4294967295
 8000944:	220a      	movs	r2, #10
 8000946:	4978      	ldr	r1, [pc, #480]	; (8000b28 <HAL_UART_RxCpltCallback+0x454>)
 8000948:	4878      	ldr	r0, [pc, #480]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 800094a:	f002 f809 	bl	8002960 <HAL_UART_Transmit>
						strlen("\r\n        "), HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart3, (uint8_t*) yourName,
						strlen(yourName), HAL_MAX_DELAY);
 800094e:	4878      	ldr	r0, [pc, #480]	; (8000b30 <HAL_UART_RxCpltCallback+0x45c>)
 8000950:	f7ff fc7c 	bl	800024c <strlen>
 8000954:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart3, (uint8_t*) yourName,
 8000956:	b29a      	uxth	r2, r3
 8000958:	f04f 33ff 	mov.w	r3, #4294967295
 800095c:	4974      	ldr	r1, [pc, #464]	; (8000b30 <HAL_UART_RxCpltCallback+0x45c>)
 800095e:	4873      	ldr	r0, [pc, #460]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 8000960:	f001 fffe 	bl	8002960 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*) " is ready!!!",
 8000964:	f04f 33ff 	mov.w	r3, #4294967295
 8000968:	220d      	movs	r2, #13
 800096a:	4972      	ldr	r1, [pc, #456]	; (8000b34 <HAL_UART_RxCpltCallback+0x460>)
 800096c:	486f      	ldr	r0, [pc, #444]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 800096e:	f001 fff7 	bl	8002960 <HAL_UART_Transmit>
						sizeof(" is ready!!!"), HAL_MAX_DELAY);
				strcat(yourName, " : ");
 8000972:	486f      	ldr	r0, [pc, #444]	; (8000b30 <HAL_UART_RxCpltCallback+0x45c>)
 8000974:	f7ff fc6a 	bl	800024c <strlen>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	4b6c      	ldr	r3, [pc, #432]	; (8000b30 <HAL_UART_RxCpltCallback+0x45c>)
 800097e:	4413      	add	r3, r2
 8000980:	4a6d      	ldr	r2, [pc, #436]	; (8000b38 <HAL_UART_RxCpltCallback+0x464>)
 8000982:	6810      	ldr	r0, [r2, #0]
 8000984:	6018      	str	r0, [r3, #0]
				rc = '\0';
 8000986:	4b6d      	ldr	r3, [pc, #436]	; (8000b3c <HAL_UART_RxCpltCallback+0x468>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, (uint8_t*) "\r", strlen("\r"), 1000);
 800098c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000990:	2201      	movs	r2, #1
 8000992:	496b      	ldr	r1, [pc, #428]	; (8000b40 <HAL_UART_RxCpltCallback+0x46c>)
 8000994:	4865      	ldr	r0, [pc, #404]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 8000996:	f001 ffe3 	bl	8002960 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*)"\n",strlen("\n"), HAL_MAX_DELAY);
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	2201      	movs	r2, #1
 80009a0:	4968      	ldr	r1, [pc, #416]	; (8000b44 <HAL_UART_RxCpltCallback+0x470>)
 80009a2:	4862      	ldr	r0, [pc, #392]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 80009a4:	f001 ffdc 	bl	8002960 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*) "        ",strlen("        "), HAL_MAX_DELAY);
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ac:	2208      	movs	r2, #8
 80009ae:	4966      	ldr	r1, [pc, #408]	; (8000b48 <HAL_UART_RxCpltCallback+0x474>)
 80009b0:	485e      	ldr	r0, [pc, #376]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 80009b2:	f001 ffd5 	bl	8002960 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*) nameTemp,strlen(nameTemp), HAL_MAX_DELAY);
 80009b6:	4865      	ldr	r0, [pc, #404]	; (8000b4c <HAL_UART_RxCpltCallback+0x478>)
 80009b8:	f7ff fc48 	bl	800024c <strlen>
 80009bc:	4603      	mov	r3, r0
 80009be:	b29a      	uxth	r2, r3
 80009c0:	f04f 33ff 	mov.w	r3, #4294967295
 80009c4:	4961      	ldr	r1, [pc, #388]	; (8000b4c <HAL_UART_RxCpltCallback+0x478>)
 80009c6:	4859      	ldr	r0, [pc, #356]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 80009c8:	f001 ffca 	bl	8002960 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*) mymyText,strlen(mymyText), HAL_MAX_DELAY);
 80009cc:	4860      	ldr	r0, [pc, #384]	; (8000b50 <HAL_UART_RxCpltCallback+0x47c>)
 80009ce:	f7ff fc3d 	bl	800024c <strlen>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	495d      	ldr	r1, [pc, #372]	; (8000b50 <HAL_UART_RxCpltCallback+0x47c>)
 80009dc:	4853      	ldr	r0, [pc, #332]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 80009de:	f001 ffbf 	bl	8002960 <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart3, (uint8_t*) &rc, 1);
 80009e2:	2201      	movs	r2, #1
 80009e4:	4955      	ldr	r1, [pc, #340]	; (8000b3c <HAL_UART_RxCpltCallback+0x468>)
 80009e6:	4851      	ldr	r0, [pc, #324]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 80009e8:	f002 f83d 	bl	8002a66 <HAL_UART_Receive_IT>
 80009ec:	e098      	b.n	8000b20 <HAL_UART_RxCpltCallback+0x44c>
			} else {
				recieveText[strlen(recieveText)] = rc;
 80009ee:	4859      	ldr	r0, [pc, #356]	; (8000b54 <HAL_UART_RxCpltCallback+0x480>)
 80009f0:	f7ff fc2c 	bl	800024c <strlen>
 80009f4:	4603      	mov	r3, r0
 80009f6:	4a51      	ldr	r2, [pc, #324]	; (8000b3c <HAL_UART_RxCpltCallback+0x468>)
 80009f8:	7811      	ldrb	r1, [r2, #0]
 80009fa:	4a56      	ldr	r2, [pc, #344]	; (8000b54 <HAL_UART_RxCpltCallback+0x480>)
 80009fc:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Receive_IT(&huart1, (uint8_t*) &rc, 1);
 80009fe:	2201      	movs	r2, #1
 8000a00:	494e      	ldr	r1, [pc, #312]	; (8000b3c <HAL_UART_RxCpltCallback+0x468>)
 8000a02:	4855      	ldr	r0, [pc, #340]	; (8000b58 <HAL_UART_RxCpltCallback+0x484>)
 8000a04:	f002 f82f 	bl	8002a66 <HAL_UART_Receive_IT>
 8000a08:	e08a      	b.n	8000b20 <HAL_UART_RxCpltCallback+0x44c>
			}
		} else if (strlen(yourName) != 0) {
 8000a0a:	4b49      	ldr	r3, [pc, #292]	; (8000b30 <HAL_UART_RxCpltCallback+0x45c>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f000 8086 	beq.w	8000b20 <HAL_UART_RxCpltCallback+0x44c>
			if (rc == '\r') {
 8000a14:	4b49      	ldr	r3, [pc, #292]	; (8000b3c <HAL_UART_RxCpltCallback+0x468>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b0d      	cmp	r3, #13
 8000a1a:	d174      	bne.n	8000b06 <HAL_UART_RxCpltCallback+0x432>
				strcpy(recieveText2, recieveText);
 8000a1c:	494d      	ldr	r1, [pc, #308]	; (8000b54 <HAL_UART_RxCpltCallback+0x480>)
 8000a1e:	484f      	ldr	r0, [pc, #316]	; (8000b5c <HAL_UART_RxCpltCallback+0x488>)
 8000a20:	f003 fa8e 	bl	8003f40 <strcpy>
				memset(recieveText, '\0', sizeof(recieveText));
 8000a24:	2264      	movs	r2, #100	; 0x64
 8000a26:	2100      	movs	r1, #0
 8000a28:	484a      	ldr	r0, [pc, #296]	; (8000b54 <HAL_UART_RxCpltCallback+0x480>)
 8000a2a:	f003 fa5d 	bl	8003ee8 <memset>
				if (strcmp(recieveText2,"6q")==0) {
 8000a2e:	494c      	ldr	r1, [pc, #304]	; (8000b60 <HAL_UART_RxCpltCallback+0x48c>)
 8000a30:	484a      	ldr	r0, [pc, #296]	; (8000b5c <HAL_UART_RxCpltCallback+0x488>)
 8000a32:	f7ff fc01 	bl	8000238 <strcmp>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <HAL_UART_RxCpltCallback+0x378>
				        HAL_UART_Transmit(&huart3, (uint8_t*) "already quit", sizeof("already quit"), HAL_MAX_DELAY);
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a40:	220d      	movs	r2, #13
 8000a42:	4948      	ldr	r1, [pc, #288]	; (8000b64 <HAL_UART_RxCpltCallback+0x490>)
 8000a44:	4839      	ldr	r0, [pc, #228]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 8000a46:	f001 ff8b 	bl	8002960 <HAL_UART_Transmit>
				        return 0;
 8000a4a:	e069      	b.n	8000b20 <HAL_UART_RxCpltCallback+0x44c>
				    }
				HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", sizeof("\r\n"),HAL_MAX_DELAY);
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a50:	2203      	movs	r2, #3
 8000a52:	4945      	ldr	r1, [pc, #276]	; (8000b68 <HAL_UART_RxCpltCallback+0x494>)
 8000a54:	4835      	ldr	r0, [pc, #212]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 8000a56:	f001 ff83 	bl	8002960 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*) "        ",strlen("        "), HAL_MAX_DELAY);
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	2208      	movs	r2, #8
 8000a60:	4939      	ldr	r1, [pc, #228]	; (8000b48 <HAL_UART_RxCpltCallback+0x474>)
 8000a62:	4832      	ldr	r0, [pc, #200]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 8000a64:	f001 ff7c 	bl	8002960 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*) yourName,strlen(yourName), HAL_MAX_DELAY);
 8000a68:	4831      	ldr	r0, [pc, #196]	; (8000b30 <HAL_UART_RxCpltCallback+0x45c>)
 8000a6a:	f7ff fbef 	bl	800024c <strlen>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	492e      	ldr	r1, [pc, #184]	; (8000b30 <HAL_UART_RxCpltCallback+0x45c>)
 8000a78:	482c      	ldr	r0, [pc, #176]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 8000a7a:	f001 ff71 	bl	8002960 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*) recieveText2,strlen(recieveText2), HAL_MAX_DELAY);
 8000a7e:	4837      	ldr	r0, [pc, #220]	; (8000b5c <HAL_UART_RxCpltCallback+0x488>)
 8000a80:	f7ff fbe4 	bl	800024c <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8c:	4933      	ldr	r1, [pc, #204]	; (8000b5c <HAL_UART_RxCpltCallback+0x488>)
 8000a8e:	4827      	ldr	r0, [pc, #156]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 8000a90:	f001 ff66 	bl	8002960 <HAL_UART_Transmit>
				memset(recieveText2, '\0', sizeof(recieveText2));
 8000a94:	2264      	movs	r2, #100	; 0x64
 8000a96:	2100      	movs	r1, #0
 8000a98:	4830      	ldr	r0, [pc, #192]	; (8000b5c <HAL_UART_RxCpltCallback+0x488>)
 8000a9a:	f003 fa25 	bl	8003ee8 <memset>
				rc = '\0';
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <HAL_UART_RxCpltCallback+0x468>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, (uint8_t*) "\r", strlen("\r"), 1000);
 8000aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4925      	ldr	r1, [pc, #148]	; (8000b40 <HAL_UART_RxCpltCallback+0x46c>)
 8000aac:	481f      	ldr	r0, [pc, #124]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 8000aae:	f001 ff57 	bl	8002960 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*)"\n",strlen("\n"), HAL_MAX_DELAY);
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4922      	ldr	r1, [pc, #136]	; (8000b44 <HAL_UART_RxCpltCallback+0x470>)
 8000aba:	481c      	ldr	r0, [pc, #112]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 8000abc:	f001 ff50 	bl	8002960 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*) "        ",strlen("        "), HAL_MAX_DELAY);
 8000ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac4:	2208      	movs	r2, #8
 8000ac6:	4920      	ldr	r1, [pc, #128]	; (8000b48 <HAL_UART_RxCpltCallback+0x474>)
 8000ac8:	4818      	ldr	r0, [pc, #96]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 8000aca:	f001 ff49 	bl	8002960 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*) nameTemp,strlen(nameTemp), HAL_MAX_DELAY);
 8000ace:	481f      	ldr	r0, [pc, #124]	; (8000b4c <HAL_UART_RxCpltCallback+0x478>)
 8000ad0:	f7ff fbbc 	bl	800024c <strlen>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8000adc:	491b      	ldr	r1, [pc, #108]	; (8000b4c <HAL_UART_RxCpltCallback+0x478>)
 8000ade:	4813      	ldr	r0, [pc, #76]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 8000ae0:	f001 ff3e 	bl	8002960 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*) mymyText,strlen(mymyText), HAL_MAX_DELAY);
 8000ae4:	481a      	ldr	r0, [pc, #104]	; (8000b50 <HAL_UART_RxCpltCallback+0x47c>)
 8000ae6:	f7ff fbb1 	bl	800024c <strlen>
 8000aea:	4603      	mov	r3, r0
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	4917      	ldr	r1, [pc, #92]	; (8000b50 <HAL_UART_RxCpltCallback+0x47c>)
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 8000af6:	f001 ff33 	bl	8002960 <HAL_UART_Transmit>

				HAL_UART_Receive_IT(&huart3, (uint8_t*) &rc, 1);
 8000afa:	2201      	movs	r2, #1
 8000afc:	490f      	ldr	r1, [pc, #60]	; (8000b3c <HAL_UART_RxCpltCallback+0x468>)
 8000afe:	480b      	ldr	r0, [pc, #44]	; (8000b2c <HAL_UART_RxCpltCallback+0x458>)
 8000b00:	f001 ffb1 	bl	8002a66 <HAL_UART_Receive_IT>
 8000b04:	e00c      	b.n	8000b20 <HAL_UART_RxCpltCallback+0x44c>

			}

			else {
				recieveText[strlen(recieveText)] = rc;
 8000b06:	4813      	ldr	r0, [pc, #76]	; (8000b54 <HAL_UART_RxCpltCallback+0x480>)
 8000b08:	f7ff fba0 	bl	800024c <strlen>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <HAL_UART_RxCpltCallback+0x468>)
 8000b10:	7811      	ldrb	r1, [r2, #0]
 8000b12:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <HAL_UART_RxCpltCallback+0x480>)
 8000b14:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Receive_IT(&huart1, (uint8_t*) &rc, 1);
 8000b16:	2201      	movs	r2, #1
 8000b18:	4908      	ldr	r1, [pc, #32]	; (8000b3c <HAL_UART_RxCpltCallback+0x468>)
 8000b1a:	480f      	ldr	r0, [pc, #60]	; (8000b58 <HAL_UART_RxCpltCallback+0x484>)
 8000b1c:	f001 ffa3 	bl	8002a66 <HAL_UART_Receive_IT>
			}
		}
	}
}
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	08003f98 	.word	0x08003f98
 8000b2c:	200003c8 	.word	0x200003c8
 8000b30:	200000c0 	.word	0x200000c0
 8000b34:	08003fa4 	.word	0x08003fa4
 8000b38:	08003fb4 	.word	0x08003fb4
 8000b3c:	20000250 	.word	0x20000250
 8000b40:	08003f68 	.word	0x08003f68
 8000b44:	08003fb8 	.word	0x08003fb8
 8000b48:	08003fbc 	.word	0x08003fbc
 8000b4c:	20000254 	.word	0x20000254
 8000b50:	20000030 	.word	0x20000030
 8000b54:	20000124 	.word	0x20000124
 8000b58:	200002b8 	.word	0x200002b8
 8000b5c:	20000188 	.word	0x20000188
 8000b60:	08003fc8 	.word	0x08003fc8
 8000b64:	08003fcc 	.word	0x08003fcc
 8000b68:	08003f84 	.word	0x08003f84

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b74:	e7fe      	b.n	8000b74 <Error_Handler+0x8>

08000b76 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <NMI_Handler+0x4>

08000b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <HardFault_Handler+0x4>

08000b82 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <MemManage_Handler+0x4>

08000b88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <BusFault_Handler+0x4>

08000b8e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <UsageFault_Handler+0x4>

08000b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc2:	f000 fa33 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <USART1_IRQHandler+0x10>)
 8000bd2:	f001 ff8d 	bl	8002af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200002b8 	.word	0x200002b8

08000be0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <USART2_IRQHandler+0x10>)
 8000be6:	f001 ff83 	bl	8002af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000340 	.word	0x20000340

08000bf4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <USART3_IRQHandler+0x10>)
 8000bfa:	f001 ff79 	bl	8002af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200003c8 	.word	0x200003c8

08000c08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c32:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <MX_USART1_UART_Init+0x5c>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c70:	f001 fe28 	bl	80028c4 <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c7a:	f7ff ff77 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200002b8 	.word	0x200002b8
 8000c88:	40011000 	.word	0x40011000

08000c8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000c92:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <MX_USART2_UART_Init+0x5c>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cd0:	f001 fdf8 	bl	80028c4 <HAL_UART_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cda:	f7ff ff47 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000340 	.word	0x20000340
 8000ce8:	40004400 	.word	0x40004400

08000cec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000cf2:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <MX_USART3_UART_Init+0x5c>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d30:	f001 fdc8 	bl	80028c4 <HAL_UART_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d3a:	f7ff ff17 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200003c8 	.word	0x200003c8
 8000d48:	40004800 	.word	0x40004800

08000d4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0b2      	sub	sp, #200	; 0xc8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	2290      	movs	r2, #144	; 0x90
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f003 f8bb 	bl	8003ee8 <memset>
  if(uartHandle->Instance==USART1)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a7a      	ldr	r2, [pc, #488]	; (8000f60 <HAL_UART_MspInit+0x214>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d159      	bne.n	8000e30 <HAL_UART_MspInit+0xe4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d7c:	2340      	movs	r3, #64	; 0x40
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d80:	2300      	movs	r3, #0
 8000d82:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 f973 	bl	8002074 <HAL_RCCEx_PeriphCLKConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d94:	f7ff feea 	bl	8000b6c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d98:	4b72      	ldr	r3, [pc, #456]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9c:	4a71      	ldr	r2, [pc, #452]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000d9e:	f043 0310 	orr.w	r3, r3, #16
 8000da2:	6453      	str	r3, [r2, #68]	; 0x44
 8000da4:	4b6f      	ldr	r3, [pc, #444]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da8:	f003 0310 	and.w	r3, r3, #16
 8000dac:	623b      	str	r3, [r7, #32]
 8000dae:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db0:	4b6c      	ldr	r3, [pc, #432]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	4a6b      	ldr	r2, [pc, #428]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000db6:	f043 0302 	orr.w	r3, r3, #2
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbc:	4b69      	ldr	r3, [pc, #420]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000de2:	2304      	movs	r3, #4
 8000de4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000dec:	4619      	mov	r1, r3
 8000dee:	485e      	ldr	r0, [pc, #376]	; (8000f68 <HAL_UART_MspInit+0x21c>)
 8000df0:	f000 fab0 	bl	8001354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000df4:	2340      	movs	r3, #64	; 0x40
 8000df6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e16:	4619      	mov	r1, r3
 8000e18:	4853      	ldr	r0, [pc, #332]	; (8000f68 <HAL_UART_MspInit+0x21c>)
 8000e1a:	f000 fa9b 	bl	8001354 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	2025      	movs	r0, #37	; 0x25
 8000e24:	f000 f9ce 	bl	80011c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e28:	2025      	movs	r0, #37	; 0x25
 8000e2a:	f000 f9e7 	bl	80011fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e2e:	e092      	b.n	8000f56 <HAL_UART_MspInit+0x20a>
  else if(uartHandle->Instance==USART2)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a4d      	ldr	r2, [pc, #308]	; (8000f6c <HAL_UART_MspInit+0x220>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d143      	bne.n	8000ec2 <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 f914 	bl	8002074 <HAL_RCCEx_PeriphCLKConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_UART_MspInit+0x10a>
      Error_Handler();
 8000e52:	f7ff fe8b 	bl	8000b6c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e56:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a42      	ldr	r2, [pc, #264]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b40      	ldr	r3, [pc, #256]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	61bb      	str	r3, [r7, #24]
 8000e6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6e:	4b3d      	ldr	r3, [pc, #244]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a3c      	ldr	r2, [pc, #240]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e86:	2360      	movs	r3, #96	; 0x60
 8000e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4831      	ldr	r0, [pc, #196]	; (8000f70 <HAL_UART_MspInit+0x224>)
 8000eac:	f000 fa52 	bl	8001354 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2026      	movs	r0, #38	; 0x26
 8000eb6:	f000 f985 	bl	80011c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eba:	2026      	movs	r0, #38	; 0x26
 8000ebc:	f000 f99e 	bl	80011fc <HAL_NVIC_EnableIRQ>
}
 8000ec0:	e049      	b.n	8000f56 <HAL_UART_MspInit+0x20a>
  else if(uartHandle->Instance==USART3)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a2b      	ldr	r2, [pc, #172]	; (8000f74 <HAL_UART_MspInit+0x228>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d144      	bne.n	8000f56 <HAL_UART_MspInit+0x20a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 f8ca 	bl	8002074 <HAL_RCCEx_PeriphCLKConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8000ee6:	f7ff fe41 	bl	8000b6c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_UART_MspInit+0x218>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f34:	2307      	movs	r3, #7
 8000f36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480b      	ldr	r0, [pc, #44]	; (8000f70 <HAL_UART_MspInit+0x224>)
 8000f42:	f000 fa07 	bl	8001354 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2027      	movs	r0, #39	; 0x27
 8000f4c:	f000 f93a 	bl	80011c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f50:	2027      	movs	r0, #39	; 0x27
 8000f52:	f000 f953 	bl	80011fc <HAL_NVIC_EnableIRQ>
}
 8000f56:	bf00      	nop
 8000f58:	37c8      	adds	r7, #200	; 0xc8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40011000 	.word	0x40011000
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40004400 	.word	0x40004400
 8000f70:	40020c00 	.word	0x40020c00
 8000f74:	40004800 	.word	0x40004800

08000f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f7e:	490e      	ldr	r1, [pc, #56]	; (8000fb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f80:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f94:	4c0b      	ldr	r4, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fa2:	f7ff fe31 	bl	8000c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f002 ffa7 	bl	8003ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000faa:	f7ff faf9 	bl	80005a0 <main>
  bx  lr    
 8000fae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000fbc:	08004004 	.word	0x08004004
  ldr r2, =_sbss
 8000fc0:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000fc4:	20000454 	.word	0x20000454

08000fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC_IRQHandler>
	...

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f914 	bl	8001218 <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f000 f8dc 	bl	80011c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000034 	.word	0x20000034
 8001024:	2000003c 	.word	0x2000003c
 8001028:	20000038 	.word	0x20000038

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	2000003c 	.word	0x2000003c
 8001050:	20000450 	.word	0x20000450

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000450 	.word	0x20000450

0800106c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <__NVIC_GetPriorityGrouping+0x18>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0307 	and.w	r3, r3, #7
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db0b      	blt.n	80010b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 021f 	and.w	r2, r3, #31
 80010a0:	4907      	ldr	r1, [pc, #28]	; (80010c0 <__NVIC_EnableIRQ+0x38>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	2001      	movs	r0, #1
 80010aa:	fa00 f202 	lsl.w	r2, r0, r2
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f7ff ff8e 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d6:	f7ff ff49 	bl	800106c <__NVIC_GetPriorityGrouping>
 80011da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	6978      	ldr	r0, [r7, #20]
 80011e2:	f7ff ff99 	bl	8001118 <NVIC_EncodePriority>
 80011e6:	4602      	mov	r2, r0
 80011e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff68 	bl	80010c4 <__NVIC_SetPriority>
}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff3c 	bl	8001088 <__NVIC_EnableIRQ>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ffad 	bl	8001180 <SysTick_Config>
 8001226:	4603      	mov	r3, r0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800123e:	f7ff ff09 	bl	8001054 <HAL_GetTick>
 8001242:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d008      	beq.n	8001262 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e052      	b.n	8001308 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0216 	bic.w	r2, r2, #22
 8001270:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	695a      	ldr	r2, [r3, #20]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001280:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	2b00      	cmp	r3, #0
 8001288:	d103      	bne.n	8001292 <HAL_DMA_Abort+0x62>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800128e:	2b00      	cmp	r3, #0
 8001290:	d007      	beq.n	80012a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0208 	bic.w	r2, r2, #8
 80012a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0201 	bic.w	r2, r2, #1
 80012b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012b2:	e013      	b.n	80012dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012b4:	f7ff fece 	bl	8001054 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b05      	cmp	r3, #5
 80012c0:	d90c      	bls.n	80012dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2220      	movs	r2, #32
 80012c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2203      	movs	r2, #3
 80012cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e015      	b.n	8001308 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1e4      	bne.n	80012b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ee:	223f      	movs	r2, #63	; 0x3f
 80012f0:	409a      	lsls	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d004      	beq.n	800132e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2280      	movs	r2, #128	; 0x80
 8001328:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e00c      	b.n	8001348 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2205      	movs	r2, #5
 8001332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0201 	bic.w	r2, r2, #1
 8001344:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	e175      	b.n	8001660 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	429a      	cmp	r2, r3
 800138e:	f040 8164 	bne.w	800165a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b01      	cmp	r3, #1
 800139c:	d005      	beq.n	80013aa <HAL_GPIO_Init+0x56>
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d130      	bne.n	800140c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	2203      	movs	r2, #3
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e0:	2201      	movs	r2, #1
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	091b      	lsrs	r3, r3, #4
 80013f6:	f003 0201 	and.w	r2, r3, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b03      	cmp	r3, #3
 8001416:	d017      	beq.n	8001448 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d123      	bne.n	800149c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	08da      	lsrs	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3208      	adds	r2, #8
 800145c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	220f      	movs	r2, #15
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	08da      	lsrs	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3208      	adds	r2, #8
 8001496:	69b9      	ldr	r1, [r7, #24]
 8001498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0203 	and.w	r2, r3, #3
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 80be 	beq.w	800165a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	4b66      	ldr	r3, [pc, #408]	; (8001678 <HAL_GPIO_Init+0x324>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	4a65      	ldr	r2, [pc, #404]	; (8001678 <HAL_GPIO_Init+0x324>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ea:	4b63      	ldr	r3, [pc, #396]	; (8001678 <HAL_GPIO_Init+0x324>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014f6:	4a61      	ldr	r2, [pc, #388]	; (800167c <HAL_GPIO_Init+0x328>)
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3302      	adds	r3, #2
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220f      	movs	r2, #15
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a58      	ldr	r2, [pc, #352]	; (8001680 <HAL_GPIO_Init+0x32c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d037      	beq.n	8001592 <HAL_GPIO_Init+0x23e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a57      	ldr	r2, [pc, #348]	; (8001684 <HAL_GPIO_Init+0x330>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d031      	beq.n	800158e <HAL_GPIO_Init+0x23a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a56      	ldr	r2, [pc, #344]	; (8001688 <HAL_GPIO_Init+0x334>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d02b      	beq.n	800158a <HAL_GPIO_Init+0x236>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a55      	ldr	r2, [pc, #340]	; (800168c <HAL_GPIO_Init+0x338>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d025      	beq.n	8001586 <HAL_GPIO_Init+0x232>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a54      	ldr	r2, [pc, #336]	; (8001690 <HAL_GPIO_Init+0x33c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d01f      	beq.n	8001582 <HAL_GPIO_Init+0x22e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a53      	ldr	r2, [pc, #332]	; (8001694 <HAL_GPIO_Init+0x340>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d019      	beq.n	800157e <HAL_GPIO_Init+0x22a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a52      	ldr	r2, [pc, #328]	; (8001698 <HAL_GPIO_Init+0x344>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d013      	beq.n	800157a <HAL_GPIO_Init+0x226>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a51      	ldr	r2, [pc, #324]	; (800169c <HAL_GPIO_Init+0x348>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00d      	beq.n	8001576 <HAL_GPIO_Init+0x222>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a50      	ldr	r2, [pc, #320]	; (80016a0 <HAL_GPIO_Init+0x34c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d007      	beq.n	8001572 <HAL_GPIO_Init+0x21e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4f      	ldr	r2, [pc, #316]	; (80016a4 <HAL_GPIO_Init+0x350>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_GPIO_Init+0x21a>
 800156a:	2309      	movs	r3, #9
 800156c:	e012      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800156e:	230a      	movs	r3, #10
 8001570:	e010      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001572:	2308      	movs	r3, #8
 8001574:	e00e      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001576:	2307      	movs	r3, #7
 8001578:	e00c      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800157a:	2306      	movs	r3, #6
 800157c:	e00a      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800157e:	2305      	movs	r3, #5
 8001580:	e008      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001582:	2304      	movs	r3, #4
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001586:	2303      	movs	r3, #3
 8001588:	e004      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800158a:	2302      	movs	r3, #2
 800158c:	e002      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001592:	2300      	movs	r3, #0
 8001594:	69fa      	ldr	r2, [r7, #28]
 8001596:	f002 0203 	and.w	r2, r2, #3
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	4093      	lsls	r3, r2
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015a4:	4935      	ldr	r1, [pc, #212]	; (800167c <HAL_GPIO_Init+0x328>)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b2:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <HAL_GPIO_Init+0x354>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015d6:	4a34      	ldr	r2, [pc, #208]	; (80016a8 <HAL_GPIO_Init+0x354>)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015dc:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <HAL_GPIO_Init+0x354>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001600:	4a29      	ldr	r2, [pc, #164]	; (80016a8 <HAL_GPIO_Init+0x354>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <HAL_GPIO_Init+0x354>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162a:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <HAL_GPIO_Init+0x354>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_GPIO_Init+0x354>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <HAL_GPIO_Init+0x354>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3301      	adds	r3, #1
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	2b0f      	cmp	r3, #15
 8001664:	f67f ae86 	bls.w	8001374 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40013800 	.word	0x40013800
 8001680:	40020000 	.word	0x40020000
 8001684:	40020400 	.word	0x40020400
 8001688:	40020800 	.word	0x40020800
 800168c:	40020c00 	.word	0x40020c00
 8001690:	40021000 	.word	0x40021000
 8001694:	40021400 	.word	0x40021400
 8001698:	40021800 	.word	0x40021800
 800169c:	40021c00 	.word	0x40021c00
 80016a0:	40022000 	.word	0x40022000
 80016a4:	40022400 	.word	0x40022400
 80016a8:	40013c00 	.word	0x40013c00

080016ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	4b23      	ldr	r3, [pc, #140]	; (8001744 <HAL_PWREx_EnableOverDrive+0x98>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a22      	ldr	r2, [pc, #136]	; (8001744 <HAL_PWREx_EnableOverDrive+0x98>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_PWREx_EnableOverDrive+0x98>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016da:	f7ff fcbb 	bl	8001054 <HAL_GetTick>
 80016de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016e0:	e009      	b.n	80016f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016e2:	f7ff fcb7 	bl	8001054 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016f0:	d901      	bls.n	80016f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e022      	b.n	800173c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001702:	d1ee      	bne.n	80016e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <HAL_PWREx_EnableOverDrive+0x9c>)
 800170a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001710:	f7ff fca0 	bl	8001054 <HAL_GetTick>
 8001714:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001716:	e009      	b.n	800172c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001718:	f7ff fc9c 	bl	8001054 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001726:	d901      	bls.n	800172c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e007      	b.n	800173c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_PWREx_EnableOverDrive+0x9c>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001734:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001738:	d1ee      	bne.n	8001718 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40023800 	.word	0x40023800
 8001748:	40007000 	.word	0x40007000

0800174c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001754:	2300      	movs	r3, #0
 8001756:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e29b      	b.n	8001c9a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 8087 	beq.w	800187e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001770:	4b96      	ldr	r3, [pc, #600]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b04      	cmp	r3, #4
 800177a:	d00c      	beq.n	8001796 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800177c:	4b93      	ldr	r3, [pc, #588]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b08      	cmp	r3, #8
 8001786:	d112      	bne.n	80017ae <HAL_RCC_OscConfig+0x62>
 8001788:	4b90      	ldr	r3, [pc, #576]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001790:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001794:	d10b      	bne.n	80017ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001796:	4b8d      	ldr	r3, [pc, #564]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d06c      	beq.n	800187c <HAL_RCC_OscConfig+0x130>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d168      	bne.n	800187c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e275      	b.n	8001c9a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_OscConfig+0x7a>
 80017b8:	4b84      	ldr	r3, [pc, #528]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a83      	ldr	r2, [pc, #524]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 80017be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	e02e      	b.n	8001824 <HAL_RCC_OscConfig+0xd8>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x9c>
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a7e      	ldr	r2, [pc, #504]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 80017d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a7b      	ldr	r2, [pc, #492]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 80017e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	e01d      	b.n	8001824 <HAL_RCC_OscConfig+0xd8>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0xc0>
 80017f2:	4b76      	ldr	r3, [pc, #472]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a75      	ldr	r2, [pc, #468]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 80017f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b73      	ldr	r3, [pc, #460]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a72      	ldr	r2, [pc, #456]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 8001804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e00b      	b.n	8001824 <HAL_RCC_OscConfig+0xd8>
 800180c:	4b6f      	ldr	r3, [pc, #444]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a6e      	ldr	r2, [pc, #440]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 8001812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b6c      	ldr	r3, [pc, #432]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a6b      	ldr	r2, [pc, #428]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 800181e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d013      	beq.n	8001854 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff fc12 	bl	8001054 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff fc0e 	bl	8001054 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	; 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e229      	b.n	8001c9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	4b61      	ldr	r3, [pc, #388]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0xe8>
 8001852:	e014      	b.n	800187e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff fbfe 	bl	8001054 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff fbfa 	bl	8001054 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	; 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e215      	b.n	8001c9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186e:	4b57      	ldr	r3, [pc, #348]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x110>
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d069      	beq.n	800195e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800188a:	4b50      	ldr	r3, [pc, #320]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001896:	4b4d      	ldr	r3, [pc, #308]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d11c      	bne.n	80018dc <HAL_RCC_OscConfig+0x190>
 80018a2:	4b4a      	ldr	r3, [pc, #296]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d116      	bne.n	80018dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ae:	4b47      	ldr	r3, [pc, #284]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <HAL_RCC_OscConfig+0x17a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d001      	beq.n	80018c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e1e9      	b.n	8001c9a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c6:	4b41      	ldr	r3, [pc, #260]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	493d      	ldr	r1, [pc, #244]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018da:	e040      	b.n	800195e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d023      	beq.n	800192c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e4:	4b39      	ldr	r3, [pc, #228]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a38      	ldr	r2, [pc, #224]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fbb0 	bl	8001054 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f8:	f7ff fbac 	bl	8001054 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e1c7      	b.n	8001c9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190a:	4b30      	ldr	r3, [pc, #192]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001916:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4929      	ldr	r1, [pc, #164]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
 800192a:	e018      	b.n	800195e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192c:	4b27      	ldr	r3, [pc, #156]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a26      	ldr	r2, [pc, #152]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff fb8c 	bl	8001054 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001940:	f7ff fb88 	bl	8001054 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e1a3      	b.n	8001c9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001952:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d038      	beq.n	80019dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d019      	beq.n	80019a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001972:	4b16      	ldr	r3, [pc, #88]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 8001974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001976:	4a15      	ldr	r2, [pc, #84]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff fb69 	bl	8001054 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff fb65 	bl	8001054 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e180      	b.n	8001c9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 800199a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x23a>
 80019a4:	e01a      	b.n	80019dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 80019a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019aa:	4a08      	ldr	r2, [pc, #32]	; (80019cc <HAL_RCC_OscConfig+0x280>)
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b2:	f7ff fb4f 	bl	8001054 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ba:	f7ff fb4b 	bl	8001054 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d903      	bls.n	80019d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e166      	b.n	8001c9a <HAL_RCC_OscConfig+0x54e>
 80019cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d0:	4b92      	ldr	r3, [pc, #584]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 80019d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1ee      	bne.n	80019ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80a4 	beq.w	8001b32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ea:	4b8c      	ldr	r3, [pc, #560]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10d      	bne.n	8001a12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b89      	ldr	r3, [pc, #548]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a88      	ldr	r2, [pc, #544]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b86      	ldr	r3, [pc, #536]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a12:	4b83      	ldr	r3, [pc, #524]	; (8001c20 <HAL_RCC_OscConfig+0x4d4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d118      	bne.n	8001a50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a1e:	4b80      	ldr	r3, [pc, #512]	; (8001c20 <HAL_RCC_OscConfig+0x4d4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a7f      	ldr	r2, [pc, #508]	; (8001c20 <HAL_RCC_OscConfig+0x4d4>)
 8001a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff fb13 	bl	8001054 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a32:	f7ff fb0f 	bl	8001054 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b64      	cmp	r3, #100	; 0x64
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e12a      	b.n	8001c9a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a44:	4b76      	ldr	r3, [pc, #472]	; (8001c20 <HAL_RCC_OscConfig+0x4d4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x31a>
 8001a58:	4b70      	ldr	r3, [pc, #448]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5c:	4a6f      	ldr	r2, [pc, #444]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6713      	str	r3, [r2, #112]	; 0x70
 8001a64:	e02d      	b.n	8001ac2 <HAL_RCC_OscConfig+0x376>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x33c>
 8001a6e:	4b6b      	ldr	r3, [pc, #428]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a72:	4a6a      	ldr	r2, [pc, #424]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7a:	4b68      	ldr	r3, [pc, #416]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7e:	4a67      	ldr	r2, [pc, #412]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	6713      	str	r3, [r2, #112]	; 0x70
 8001a86:	e01c      	b.n	8001ac2 <HAL_RCC_OscConfig+0x376>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d10c      	bne.n	8001aaa <HAL_RCC_OscConfig+0x35e>
 8001a90:	4b62      	ldr	r3, [pc, #392]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a94:	4a61      	ldr	r2, [pc, #388]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9c:	4b5f      	ldr	r3, [pc, #380]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa0:	4a5e      	ldr	r2, [pc, #376]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa8:	e00b      	b.n	8001ac2 <HAL_RCC_OscConfig+0x376>
 8001aaa:	4b5c      	ldr	r3, [pc, #368]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aae:	4a5b      	ldr	r2, [pc, #364]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab6:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aba:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001abc:	f023 0304 	bic.w	r3, r3, #4
 8001ac0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d015      	beq.n	8001af6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aca:	f7ff fac3 	bl	8001054 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad2:	f7ff fabf 	bl	8001054 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e0d8      	b.n	8001c9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae8:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0ee      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x386>
 8001af4:	e014      	b.n	8001b20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af6:	f7ff faad 	bl	8001054 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afc:	e00a      	b.n	8001b14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afe:	f7ff faa9 	bl	8001054 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e0c2      	b.n	8001c9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b14:	4b41      	ldr	r3, [pc, #260]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1ee      	bne.n	8001afe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d105      	bne.n	8001b32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b26:	4b3d      	ldr	r3, [pc, #244]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	4a3c      	ldr	r2, [pc, #240]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 80ae 	beq.w	8001c98 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b3c:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 030c 	and.w	r3, r3, #12
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d06d      	beq.n	8001c24 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d14b      	bne.n	8001be8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b50:	4b32      	ldr	r3, [pc, #200]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a31      	ldr	r2, [pc, #196]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fa7a 	bl	8001054 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff fa76 	bl	8001054 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e091      	b.n	8001c9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69da      	ldr	r2, [r3, #28]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	019b      	lsls	r3, r3, #6
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	085b      	lsrs	r3, r3, #1
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	041b      	lsls	r3, r3, #16
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	061b      	lsls	r3, r3, #24
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	071b      	lsls	r3, r3, #28
 8001bae:	491b      	ldr	r1, [pc, #108]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a18      	ldr	r2, [pc, #96]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fa48 	bl	8001054 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff fa44 	bl	8001054 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e05f      	b.n	8001c9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x47c>
 8001be6:	e057      	b.n	8001c98 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fa2e 	bl	8001054 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff fa2a 	bl	8001054 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e045      	b.n	8001c9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0e:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <HAL_RCC_OscConfig+0x4d0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x4b0>
 8001c1a:	e03d      	b.n	8001c98 <HAL_RCC_OscConfig+0x54c>
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c24:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <HAL_RCC_OscConfig+0x558>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d030      	beq.n	8001c94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d129      	bne.n	8001c94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d122      	bne.n	8001c94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c54:	4013      	ands	r3, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c5a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d119      	bne.n	8001c94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	085b      	lsrs	r3, r3, #1
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d10f      	bne.n	8001c94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0d0      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d910      	bls.n	8001cf0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b67      	ldr	r3, [pc, #412]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 020f 	bic.w	r2, r3, #15
 8001cd6:	4965      	ldr	r1, [pc, #404]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cde:	4b63      	ldr	r3, [pc, #396]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0b8      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d020      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d08:	4b59      	ldr	r3, [pc, #356]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4a58      	ldr	r2, [pc, #352]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d20:	4b53      	ldr	r3, [pc, #332]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	4a52      	ldr	r2, [pc, #328]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d2c:	4b50      	ldr	r3, [pc, #320]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	494d      	ldr	r1, [pc, #308]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d040      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d107      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d52:	4b47      	ldr	r3, [pc, #284]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d115      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e07f      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d107      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6a:	4b41      	ldr	r3, [pc, #260]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e073      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7a:	4b3d      	ldr	r3, [pc, #244]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e06b      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8a:	4b39      	ldr	r3, [pc, #228]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f023 0203 	bic.w	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4936      	ldr	r1, [pc, #216]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d9c:	f7ff f95a 	bl	8001054 <HAL_GetTick>
 8001da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da4:	f7ff f956 	bl	8001054 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e053      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dba:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 020c 	and.w	r2, r3, #12
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d1eb      	bne.n	8001da4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d210      	bcs.n	8001dfc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 020f 	bic.w	r2, r3, #15
 8001de2:	4922      	ldr	r1, [pc, #136]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e032      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4916      	ldr	r1, [pc, #88]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d009      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e26:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	490e      	ldr	r1, [pc, #56]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e3a:	f000 f821 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	490a      	ldr	r1, [pc, #40]	; (8001e74 <HAL_RCC_ClockConfig+0x1cc>)
 8001e4c:	5ccb      	ldrb	r3, [r1, r3]
 8001e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e52:	4a09      	ldr	r2, [pc, #36]	; (8001e78 <HAL_RCC_ClockConfig+0x1d0>)
 8001e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_ClockConfig+0x1d4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f8b6 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023c00 	.word	0x40023c00
 8001e70:	40023800 	.word	0x40023800
 8001e74:	08003fdc 	.word	0x08003fdc
 8001e78:	20000034 	.word	0x20000034
 8001e7c:	20000038 	.word	0x20000038

08001e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e84:	b090      	sub	sp, #64	; 0x40
 8001e86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e90:	2300      	movs	r3, #0
 8001e92:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e98:	4b59      	ldr	r3, [pc, #356]	; (8002000 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d00d      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	f200 80a1 	bhi.w	8001fec <HAL_RCC_GetSysClockFreq+0x16c>
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d003      	beq.n	8001eba <HAL_RCC_GetSysClockFreq+0x3a>
 8001eb2:	e09b      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eb4:	4b53      	ldr	r3, [pc, #332]	; (8002004 <HAL_RCC_GetSysClockFreq+0x184>)
 8001eb6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001eb8:	e09b      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eba:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ebc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ebe:	e098      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec0:	4b4f      	ldr	r3, [pc, #316]	; (8002000 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001eca:	4b4d      	ldr	r3, [pc, #308]	; (8002000 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d028      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed6:	4b4a      	ldr	r3, [pc, #296]	; (8002000 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	099b      	lsrs	r3, r3, #6
 8001edc:	2200      	movs	r2, #0
 8001ede:	623b      	str	r3, [r7, #32]
 8001ee0:	627a      	str	r2, [r7, #36]	; 0x24
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_RCC_GetSysClockFreq+0x188>)
 8001eec:	fb03 f201 	mul.w	r2, r3, r1
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	fb00 f303 	mul.w	r3, r0, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4a43      	ldr	r2, [pc, #268]	; (8002008 <HAL_RCC_GetSysClockFreq+0x188>)
 8001efa:	fba0 1202 	umull	r1, r2, r0, r2
 8001efe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f00:	460a      	mov	r2, r1
 8001f02:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f06:	4413      	add	r3, r2
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	61bb      	str	r3, [r7, #24]
 8001f10:	61fa      	str	r2, [r7, #28]
 8001f12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f1a:	f7fe f99f 	bl	800025c <__aeabi_uldivmod>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4613      	mov	r3, r2
 8001f24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f26:	e053      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f28:	4b35      	ldr	r3, [pc, #212]	; (8002000 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	099b      	lsrs	r3, r3, #6
 8001f2e:	2200      	movs	r2, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	617a      	str	r2, [r7, #20]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f3a:	f04f 0b00 	mov.w	fp, #0
 8001f3e:	4652      	mov	r2, sl
 8001f40:	465b      	mov	r3, fp
 8001f42:	f04f 0000 	mov.w	r0, #0
 8001f46:	f04f 0100 	mov.w	r1, #0
 8001f4a:	0159      	lsls	r1, r3, #5
 8001f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f50:	0150      	lsls	r0, r2, #5
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	ebb2 080a 	subs.w	r8, r2, sl
 8001f5a:	eb63 090b 	sbc.w	r9, r3, fp
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f72:	ebb2 0408 	subs.w	r4, r2, r8
 8001f76:	eb63 0509 	sbc.w	r5, r3, r9
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	00eb      	lsls	r3, r5, #3
 8001f84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f88:	00e2      	lsls	r2, r4, #3
 8001f8a:	4614      	mov	r4, r2
 8001f8c:	461d      	mov	r5, r3
 8001f8e:	eb14 030a 	adds.w	r3, r4, sl
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	eb45 030b 	adc.w	r3, r5, fp
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	028b      	lsls	r3, r1, #10
 8001faa:	4621      	mov	r1, r4
 8001fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	028a      	lsls	r2, r1, #10
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	60fa      	str	r2, [r7, #12]
 8001fc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fc4:	f7fe f94a 	bl	800025c <__aeabi_uldivmod>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4613      	mov	r3, r2
 8001fce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	0c1b      	lsrs	r3, r3, #16
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001fe0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fea:	e002      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3740      	adds	r7, #64	; 0x40
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	00f42400 	.word	0x00f42400
 8002008:	017d7840 	.word	0x017d7840

0800200c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_RCC_GetHCLKFreq+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000034 	.word	0x20000034

08002024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002028:	f7ff fff0 	bl	800200c <HAL_RCC_GetHCLKFreq>
 800202c:	4602      	mov	r2, r0
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	0a9b      	lsrs	r3, r3, #10
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	4903      	ldr	r1, [pc, #12]	; (8002048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800203a:	5ccb      	ldrb	r3, [r1, r3]
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002040:	4618      	mov	r0, r3
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40023800 	.word	0x40023800
 8002048:	08003fec 	.word	0x08003fec

0800204c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002050:	f7ff ffdc 	bl	800200c <HAL_RCC_GetHCLKFreq>
 8002054:	4602      	mov	r2, r0
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	0b5b      	lsrs	r3, r3, #13
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	4903      	ldr	r1, [pc, #12]	; (8002070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002062:	5ccb      	ldrb	r3, [r1, r3]
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	08003fec 	.word	0x08003fec

08002074 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d012      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800209c:	4b69      	ldr	r3, [pc, #420]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a68      	ldr	r2, [pc, #416]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020a6:	6093      	str	r3, [r2, #8]
 80020a8:	4b66      	ldr	r3, [pc, #408]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b0:	4964      	ldr	r1, [pc, #400]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80020be:	2301      	movs	r3, #1
 80020c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d017      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020ce:	4b5d      	ldr	r3, [pc, #372]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020dc:	4959      	ldr	r1, [pc, #356]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020ec:	d101      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80020ee:	2301      	movs	r3, #1
 80020f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80020fa:	2301      	movs	r3, #1
 80020fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d017      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800210a:	4b4e      	ldr	r3, [pc, #312]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002110:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	494a      	ldr	r1, [pc, #296]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002128:	d101      	bne.n	800212e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800212a:	2301      	movs	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002136:	2301      	movs	r3, #1
 8002138:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002146:	2301      	movs	r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 808b 	beq.w	800226e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002158:	4b3a      	ldr	r3, [pc, #232]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	4a39      	ldr	r2, [pc, #228]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800215e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002162:	6413      	str	r3, [r2, #64]	; 0x40
 8002164:	4b37      	ldr	r3, [pc, #220]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002170:	4b35      	ldr	r3, [pc, #212]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a34      	ldr	r2, [pc, #208]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800217c:	f7fe ff6a 	bl	8001054 <HAL_GetTick>
 8002180:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002184:	f7fe ff66 	bl	8001054 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e38f      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002196:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021a2:	4b28      	ldr	r3, [pc, #160]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d035      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d02e      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021c0:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021d6:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	4a1a      	ldr	r2, [pc, #104]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80021e2:	4a18      	ldr	r2, [pc, #96]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d114      	bne.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7fe ff2e 	bl	8001054 <HAL_GetTick>
 80021f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fa:	e00a      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021fc:	f7fe ff2a 	bl	8001054 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e351      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0ee      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800222a:	d111      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002238:	4b04      	ldr	r3, [pc, #16]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800223a:	400b      	ands	r3, r1
 800223c:	4901      	ldr	r1, [pc, #4]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
 8002242:	e00b      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002244:	40023800 	.word	0x40023800
 8002248:	40007000 	.word	0x40007000
 800224c:	0ffffcff 	.word	0x0ffffcff
 8002250:	4bac      	ldr	r3, [pc, #688]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4aab      	ldr	r2, [pc, #684]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002256:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800225a:	6093      	str	r3, [r2, #8]
 800225c:	4ba9      	ldr	r3, [pc, #676]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002268:	49a6      	ldr	r1, [pc, #664]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800226a:	4313      	orrs	r3, r2
 800226c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	d010      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800227a:	4ba2      	ldr	r3, [pc, #648]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800227c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002280:	4aa0      	ldr	r2, [pc, #640]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002286:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800228a:	4b9e      	ldr	r3, [pc, #632]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800228c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002294:	499b      	ldr	r1, [pc, #620]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022a8:	4b96      	ldr	r3, [pc, #600]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022b6:	4993      	ldr	r1, [pc, #588]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022ca:	4b8e      	ldr	r3, [pc, #568]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022d8:	498a      	ldr	r1, [pc, #552]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022ec:	4b85      	ldr	r3, [pc, #532]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022fa:	4982      	ldr	r1, [pc, #520]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800230e:	4b7d      	ldr	r3, [pc, #500]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002314:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	4979      	ldr	r1, [pc, #484]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002330:	4b74      	ldr	r3, [pc, #464]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	f023 0203 	bic.w	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	4971      	ldr	r1, [pc, #452]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002352:	4b6c      	ldr	r3, [pc, #432]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002358:	f023 020c 	bic.w	r2, r3, #12
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002360:	4968      	ldr	r1, [pc, #416]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002374:	4b63      	ldr	r3, [pc, #396]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002382:	4960      	ldr	r1, [pc, #384]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002396:	4b5b      	ldr	r3, [pc, #364]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a4:	4957      	ldr	r1, [pc, #348]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023b8:	4b52      	ldr	r3, [pc, #328]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c6:	494f      	ldr	r1, [pc, #316]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00a      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80023da:	4b4a      	ldr	r3, [pc, #296]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e8:	4946      	ldr	r1, [pc, #280]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00a      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80023fc:	4b41      	ldr	r3, [pc, #260]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002402:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240a:	493e      	ldr	r1, [pc, #248]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00a      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800241e:	4b39      	ldr	r3, [pc, #228]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002424:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242c:	4935      	ldr	r1, [pc, #212]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00a      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002440:	4b30      	ldr	r3, [pc, #192]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002446:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800244e:	492d      	ldr	r1, [pc, #180]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d011      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002462:	4b28      	ldr	r3, [pc, #160]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002470:	4924      	ldr	r1, [pc, #144]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800247c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002480:	d101      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002482:	2301      	movs	r3, #1
 8002484:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002492:	2301      	movs	r3, #1
 8002494:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b0:	4914      	ldr	r1, [pc, #80]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00b      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024c4:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024d4:	490b      	ldr	r1, [pc, #44]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00f      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f8:	4902      	ldr	r1, [pc, #8]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002500:	e002      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00b      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002514:	4b8a      	ldr	r3, [pc, #552]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800251a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002524:	4986      	ldr	r1, [pc, #536]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002538:	4b81      	ldr	r3, [pc, #516]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800253a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800253e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002548:	497d      	ldr	r1, [pc, #500]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d006      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 80d6 	beq.w	8002710 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002564:	4b76      	ldr	r3, [pc, #472]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a75      	ldr	r2, [pc, #468]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800256a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800256e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002570:	f7fe fd70 	bl	8001054 <HAL_GetTick>
 8002574:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002578:	f7fe fd6c 	bl	8001054 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e195      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800258a:	4b6d      	ldr	r3, [pc, #436]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d021      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d11d      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025aa:	4b65      	ldr	r3, [pc, #404]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025b8:	4b61      	ldr	r3, [pc, #388]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025be:	0e1b      	lsrs	r3, r3, #24
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	019a      	lsls	r2, r3, #6
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	041b      	lsls	r3, r3, #16
 80025d0:	431a      	orrs	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	061b      	lsls	r3, r3, #24
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	071b      	lsls	r3, r3, #28
 80025de:	4958      	ldr	r1, [pc, #352]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d004      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002604:	2b00      	cmp	r3, #0
 8002606:	d02e      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002610:	d129      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002612:	4b4b      	ldr	r3, [pc, #300]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002618:	0c1b      	lsrs	r3, r3, #16
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002620:	4b47      	ldr	r3, [pc, #284]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002626:	0f1b      	lsrs	r3, r3, #28
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	019a      	lsls	r2, r3, #6
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	041b      	lsls	r3, r3, #16
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	061b      	lsls	r3, r3, #24
 8002640:	431a      	orrs	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	071b      	lsls	r3, r3, #28
 8002646:	493e      	ldr	r1, [pc, #248]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800264e:	4b3c      	ldr	r3, [pc, #240]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002654:	f023 021f 	bic.w	r2, r3, #31
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	3b01      	subs	r3, #1
 800265e:	4938      	ldr	r1, [pc, #224]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d01d      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002672:	4b33      	ldr	r3, [pc, #204]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002678:	0e1b      	lsrs	r3, r3, #24
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002680:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002686:	0f1b      	lsrs	r3, r3, #28
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	019a      	lsls	r2, r3, #6
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	041b      	lsls	r3, r3, #16
 800269a:	431a      	orrs	r2, r3
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	061b      	lsls	r3, r3, #24
 80026a0:	431a      	orrs	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	071b      	lsls	r3, r3, #28
 80026a6:	4926      	ldr	r1, [pc, #152]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d011      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	019a      	lsls	r2, r3, #6
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	041b      	lsls	r3, r3, #16
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	071b      	lsls	r3, r3, #28
 80026d6:	491a      	ldr	r1, [pc, #104]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a17      	ldr	r2, [pc, #92]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ea:	f7fe fcb3 	bl	8001054 <HAL_GetTick>
 80026ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026f2:	f7fe fcaf 	bl	8001054 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b64      	cmp	r3, #100	; 0x64
 80026fe:	d901      	bls.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e0d8      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2b01      	cmp	r3, #1
 8002714:	f040 80ce 	bne.w	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a08      	ldr	r2, [pc, #32]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800271e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002724:	f7fe fc96 	bl	8001054 <HAL_GetTick>
 8002728:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800272a:	e00b      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800272c:	f7fe fc92 	bl	8001054 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	; 0x64
 8002738:	d904      	bls.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e0bb      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002744:	4b5e      	ldr	r3, [pc, #376]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800274c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002750:	d0ec      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800276e:	2b00      	cmp	r3, #0
 8002770:	d02e      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d12a      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800277a:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002788:	4b4d      	ldr	r3, [pc, #308]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	0f1b      	lsrs	r3, r3, #28
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	019a      	lsls	r2, r3, #6
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	041b      	lsls	r3, r3, #16
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	061b      	lsls	r3, r3, #24
 80027a8:	431a      	orrs	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	071b      	lsls	r3, r3, #28
 80027ae:	4944      	ldr	r1, [pc, #272]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027b6:	4b42      	ldr	r3, [pc, #264]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	3b01      	subs	r3, #1
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	493d      	ldr	r1, [pc, #244]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d022      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027e4:	d11d      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027e6:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ec:	0e1b      	lsrs	r3, r3, #24
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027f4:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	0f1b      	lsrs	r3, r3, #28
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	019a      	lsls	r2, r3, #6
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	041b      	lsls	r3, r3, #16
 800280e:	431a      	orrs	r2, r3
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	061b      	lsls	r3, r3, #24
 8002814:	431a      	orrs	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	071b      	lsls	r3, r3, #28
 800281a:	4929      	ldr	r1, [pc, #164]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d028      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002834:	0e1b      	lsrs	r3, r3, #24
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800283c:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	0c1b      	lsrs	r3, r3, #16
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	019a      	lsls	r2, r3, #6
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	041b      	lsls	r3, r3, #16
 8002854:	431a      	orrs	r2, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	071b      	lsls	r3, r3, #28
 8002862:	4917      	ldr	r1, [pc, #92]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800286c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002870:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	4911      	ldr	r1, [pc, #68]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800288c:	f7fe fbe2 	bl	8001054 <HAL_GetTick>
 8002890:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002894:	f7fe fbde 	bl	8001054 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e007      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028b2:	d1ef      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3720      	adds	r7, #32
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800

080028c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e040      	b.n	8002958 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fa30 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fc06 	bl	8003114 <UART_SetConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e022      	b.n	8002958 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fe5e 	bl	80035dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800292e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800293e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fee5 	bl	8003720 <UART_CheckIdleState>
 8002956:	4603      	mov	r3, r0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08a      	sub	sp, #40	; 0x28
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002974:	2b20      	cmp	r3, #32
 8002976:	d171      	bne.n	8002a5c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_UART_Transmit+0x24>
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e06a      	b.n	8002a5e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2221      	movs	r2, #33	; 0x21
 8002994:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002996:	f7fe fb5d 	bl	8001054 <HAL_GetTick>
 800299a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	88fa      	ldrh	r2, [r7, #6]
 80029a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	88fa      	ldrh	r2, [r7, #6]
 80029a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b4:	d108      	bne.n	80029c8 <HAL_UART_Transmit+0x68>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	e003      	b.n	80029d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029d0:	e02c      	b.n	8002a2c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2200      	movs	r2, #0
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 feec 	bl	80037ba <UART_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e038      	b.n	8002a5e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10b      	bne.n	8002a0a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	3302      	adds	r3, #2
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	e007      	b.n	8002a1a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	781a      	ldrb	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	3301      	adds	r3, #1
 8002a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1cc      	bne.n	80029d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2140      	movs	r1, #64	; 0x40
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 feb9 	bl	80037ba <UART_WaitOnFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e005      	b.n	8002a5e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2220      	movs	r2, #32
 8002a56:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	e000      	b.n	8002a5e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002a5c:	2302      	movs	r3, #2
  }
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3720      	adds	r7, #32
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b08a      	sub	sp, #40	; 0x28
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	4613      	mov	r3, r2
 8002a72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d132      	bne.n	8002ae4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_UART_Receive_IT+0x24>
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e02b      	b.n	8002ae6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d018      	beq.n	8002ad4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	e853 3f00 	ldrex	r3, [r3]
 8002aae:	613b      	str	r3, [r7, #16]
   return(result);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	623b      	str	r3, [r7, #32]
 8002ac2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac4:	69f9      	ldr	r1, [r7, #28]
 8002ac6:	6a3a      	ldr	r2, [r7, #32]
 8002ac8:	e841 2300 	strex	r3, r2, [r1]
 8002acc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e6      	bne.n	8002aa2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 ff34 	bl	8003948 <UART_Start_Receive_IT>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	e000      	b.n	8002ae6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002ae4:	2302      	movs	r3, #2
  }
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3728      	adds	r7, #40	; 0x28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b0ba      	sub	sp, #232	; 0xe8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002b1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b1e:	4013      	ands	r3, r2
 8002b20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002b24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d115      	bne.n	8002b58 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00f      	beq.n	8002b58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d009      	beq.n	8002b58 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 82ac 	beq.w	80030a6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	4798      	blx	r3
      }
      return;
 8002b56:	e2a6      	b.n	80030a6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 8117 	beq.w	8002d90 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b72:	4b85      	ldr	r3, [pc, #532]	; (8002d88 <HAL_UART_IRQHandler+0x298>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 810a 	beq.w	8002d90 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d011      	beq.n	8002bac <HAL_UART_IRQHandler+0xbc>
 8002b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00b      	beq.n	8002bac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba2:	f043 0201 	orr.w	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d011      	beq.n	8002bdc <HAL_UART_IRQHandler+0xec>
 8002bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00b      	beq.n	8002bdc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd2:	f043 0204 	orr.w	r2, r3, #4
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d011      	beq.n	8002c0c <HAL_UART_IRQHandler+0x11c>
 8002be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00b      	beq.n	8002c0c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c02:	f043 0202 	orr.w	r2, r3, #2
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d017      	beq.n	8002c48 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00b      	beq.n	8002c48 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2208      	movs	r2, #8
 8002c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c3e:	f043 0208 	orr.w	r2, r3, #8
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d012      	beq.n	8002c7a <HAL_UART_IRQHandler+0x18a>
 8002c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00c      	beq.n	8002c7a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c70:	f043 0220 	orr.w	r2, r3, #32
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 8212 	beq.w	80030aa <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00d      	beq.n	8002cae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b40      	cmp	r3, #64	; 0x40
 8002cc4:	d005      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d04f      	beq.n	8002d72 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fefe 	bl	8003ad4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	d141      	bne.n	8002d6a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3308      	adds	r3, #8
 8002cec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3308      	adds	r3, #8
 8002d0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d22:	e841 2300 	strex	r3, r2, [r1]
 8002d26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1d9      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d013      	beq.n	8002d62 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3e:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <HAL_UART_IRQHandler+0x29c>)
 8002d40:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe fae2 	bl	8001310 <HAL_DMA_Abort_IT>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d017      	beq.n	8002d82 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d60:	e00f      	b.n	8002d82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f9b6 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d68:	e00b      	b.n	8002d82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f9b2 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d70:	e007      	b.n	8002d82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f9ae 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002d80:	e193      	b.n	80030aa <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d82:	bf00      	nop
    return;
 8002d84:	e191      	b.n	80030aa <HAL_UART_IRQHandler+0x5ba>
 8002d86:	bf00      	nop
 8002d88:	04000120 	.word	0x04000120
 8002d8c:	08003b9d 	.word	0x08003b9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	f040 814c 	bne.w	8003032 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8145 	beq.w	8003032 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 813e 	beq.w	8003032 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2210      	movs	r2, #16
 8002dbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
 8002dca:	f040 80b6 	bne.w	8002f3a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002dda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8165 	beq.w	80030ae <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002dea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dee:	429a      	cmp	r2, r3
 8002df0:	f080 815d 	bcs.w	80030ae <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e08:	f000 8086 	beq.w	8002f18 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e18:	e853 3f00 	ldrex	r3, [r3]
 8002e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e3a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e46:	e841 2300 	strex	r3, r2, [r1]
 8002e4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1da      	bne.n	8002e0c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e60:	e853 3f00 	ldrex	r3, [r3]
 8002e64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	3308      	adds	r3, #8
 8002e76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e1      	bne.n	8002e56 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3308      	adds	r3, #8
 8002e98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e9c:	e853 3f00 	ldrex	r3, [r3]
 8002ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3308      	adds	r3, #8
 8002eb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002eb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002eb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ebc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ebe:	e841 2300 	strex	r3, r2, [r1]
 8002ec2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e3      	bne.n	8002e92 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee0:	e853 3f00 	ldrex	r3, [r3]
 8002ee4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee8:	f023 0310 	bic.w	r3, r3, #16
 8002eec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002efa:	65bb      	str	r3, [r7, #88]	; 0x58
 8002efc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f02:	e841 2300 	strex	r3, r2, [r1]
 8002f06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1e4      	bne.n	8002ed8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe f98c 	bl	8001230 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	4619      	mov	r1, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f8d8 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f38:	e0b9      	b.n	80030ae <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80ab 	beq.w	80030b2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002f5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80a6 	beq.w	80030b2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	e853 3f00 	ldrex	r3, [r3]
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f88:	647b      	str	r3, [r7, #68]	; 0x44
 8002f8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f90:	e841 2300 	strex	r3, r2, [r1]
 8002f94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e4      	bne.n	8002f66 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	e853 3f00 	ldrex	r3, [r3]
 8002faa:	623b      	str	r3, [r7, #32]
   return(result);
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	f023 0301 	bic.w	r3, r3, #1
 8002fb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3308      	adds	r3, #8
 8002fbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002fc0:	633a      	str	r2, [r7, #48]	; 0x30
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e3      	bne.n	8002f9c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	e853 3f00 	ldrex	r3, [r3]
 8002ff4:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f023 0310 	bic.w	r3, r3, #16
 8002ffc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800300a:	61fb      	str	r3, [r7, #28]
 800300c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300e:	69b9      	ldr	r1, [r7, #24]
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	e841 2300 	strex	r3, r2, [r1]
 8003016:	617b      	str	r3, [r7, #20]
   return(result);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1e4      	bne.n	8002fe8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2202      	movs	r2, #2
 8003022:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003024:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003028:	4619      	mov	r1, r3
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f85c 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003030:	e03f      	b.n	80030b2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00e      	beq.n	800305c <HAL_UART_IRQHandler+0x56c>
 800303e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003052:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f853 	bl	8003100 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800305a:	e02d      	b.n	80030b8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800305c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00e      	beq.n	8003086 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800306c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01c      	beq.n	80030b6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
    }
    return;
 8003084:	e017      	b.n	80030b6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	d012      	beq.n	80030b8 <HAL_UART_IRQHandler+0x5c8>
 8003092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00c      	beq.n	80030b8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fd92 	bl	8003bc8 <UART_EndTransmit_IT>
    return;
 80030a4:	e008      	b.n	80030b8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80030a6:	bf00      	nop
 80030a8:	e006      	b.n	80030b8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80030aa:	bf00      	nop
 80030ac:	e004      	b.n	80030b8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80030ae:	bf00      	nop
 80030b0:	e002      	b.n	80030b8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80030b6:	bf00      	nop
  }

}
 80030b8:	37e8      	adds	r7, #232	; 0xe8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop

080030c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	4313      	orrs	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	4ba6      	ldr	r3, [pc, #664]	; (80033d8 <UART_SetConfig+0x2c4>)
 8003140:	4013      	ands	r3, r2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	6979      	ldr	r1, [r7, #20]
 8003148:	430b      	orrs	r3, r1
 800314a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	430a      	orrs	r2, r1
 8003184:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a94      	ldr	r2, [pc, #592]	; (80033dc <UART_SetConfig+0x2c8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d120      	bne.n	80031d2 <UART_SetConfig+0xbe>
 8003190:	4b93      	ldr	r3, [pc, #588]	; (80033e0 <UART_SetConfig+0x2cc>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b03      	cmp	r3, #3
 800319c:	d816      	bhi.n	80031cc <UART_SetConfig+0xb8>
 800319e:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <UART_SetConfig+0x90>)
 80031a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a4:	080031b5 	.word	0x080031b5
 80031a8:	080031c1 	.word	0x080031c1
 80031ac:	080031bb 	.word	0x080031bb
 80031b0:	080031c7 	.word	0x080031c7
 80031b4:	2301      	movs	r3, #1
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e150      	b.n	800345c <UART_SetConfig+0x348>
 80031ba:	2302      	movs	r3, #2
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e14d      	b.n	800345c <UART_SetConfig+0x348>
 80031c0:	2304      	movs	r3, #4
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e14a      	b.n	800345c <UART_SetConfig+0x348>
 80031c6:	2308      	movs	r3, #8
 80031c8:	77fb      	strb	r3, [r7, #31]
 80031ca:	e147      	b.n	800345c <UART_SetConfig+0x348>
 80031cc:	2310      	movs	r3, #16
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e144      	b.n	800345c <UART_SetConfig+0x348>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a83      	ldr	r2, [pc, #524]	; (80033e4 <UART_SetConfig+0x2d0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d132      	bne.n	8003242 <UART_SetConfig+0x12e>
 80031dc:	4b80      	ldr	r3, [pc, #512]	; (80033e0 <UART_SetConfig+0x2cc>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b0c      	cmp	r3, #12
 80031e8:	d828      	bhi.n	800323c <UART_SetConfig+0x128>
 80031ea:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <UART_SetConfig+0xdc>)
 80031ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f0:	08003225 	.word	0x08003225
 80031f4:	0800323d 	.word	0x0800323d
 80031f8:	0800323d 	.word	0x0800323d
 80031fc:	0800323d 	.word	0x0800323d
 8003200:	08003231 	.word	0x08003231
 8003204:	0800323d 	.word	0x0800323d
 8003208:	0800323d 	.word	0x0800323d
 800320c:	0800323d 	.word	0x0800323d
 8003210:	0800322b 	.word	0x0800322b
 8003214:	0800323d 	.word	0x0800323d
 8003218:	0800323d 	.word	0x0800323d
 800321c:	0800323d 	.word	0x0800323d
 8003220:	08003237 	.word	0x08003237
 8003224:	2300      	movs	r3, #0
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	e118      	b.n	800345c <UART_SetConfig+0x348>
 800322a:	2302      	movs	r3, #2
 800322c:	77fb      	strb	r3, [r7, #31]
 800322e:	e115      	b.n	800345c <UART_SetConfig+0x348>
 8003230:	2304      	movs	r3, #4
 8003232:	77fb      	strb	r3, [r7, #31]
 8003234:	e112      	b.n	800345c <UART_SetConfig+0x348>
 8003236:	2308      	movs	r3, #8
 8003238:	77fb      	strb	r3, [r7, #31]
 800323a:	e10f      	b.n	800345c <UART_SetConfig+0x348>
 800323c:	2310      	movs	r3, #16
 800323e:	77fb      	strb	r3, [r7, #31]
 8003240:	e10c      	b.n	800345c <UART_SetConfig+0x348>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a68      	ldr	r2, [pc, #416]	; (80033e8 <UART_SetConfig+0x2d4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d120      	bne.n	800328e <UART_SetConfig+0x17a>
 800324c:	4b64      	ldr	r3, [pc, #400]	; (80033e0 <UART_SetConfig+0x2cc>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003256:	2b30      	cmp	r3, #48	; 0x30
 8003258:	d013      	beq.n	8003282 <UART_SetConfig+0x16e>
 800325a:	2b30      	cmp	r3, #48	; 0x30
 800325c:	d814      	bhi.n	8003288 <UART_SetConfig+0x174>
 800325e:	2b20      	cmp	r3, #32
 8003260:	d009      	beq.n	8003276 <UART_SetConfig+0x162>
 8003262:	2b20      	cmp	r3, #32
 8003264:	d810      	bhi.n	8003288 <UART_SetConfig+0x174>
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <UART_SetConfig+0x15c>
 800326a:	2b10      	cmp	r3, #16
 800326c:	d006      	beq.n	800327c <UART_SetConfig+0x168>
 800326e:	e00b      	b.n	8003288 <UART_SetConfig+0x174>
 8003270:	2300      	movs	r3, #0
 8003272:	77fb      	strb	r3, [r7, #31]
 8003274:	e0f2      	b.n	800345c <UART_SetConfig+0x348>
 8003276:	2302      	movs	r3, #2
 8003278:	77fb      	strb	r3, [r7, #31]
 800327a:	e0ef      	b.n	800345c <UART_SetConfig+0x348>
 800327c:	2304      	movs	r3, #4
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e0ec      	b.n	800345c <UART_SetConfig+0x348>
 8003282:	2308      	movs	r3, #8
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e0e9      	b.n	800345c <UART_SetConfig+0x348>
 8003288:	2310      	movs	r3, #16
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e0e6      	b.n	800345c <UART_SetConfig+0x348>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a56      	ldr	r2, [pc, #344]	; (80033ec <UART_SetConfig+0x2d8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d120      	bne.n	80032da <UART_SetConfig+0x1c6>
 8003298:	4b51      	ldr	r3, [pc, #324]	; (80033e0 <UART_SetConfig+0x2cc>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032a2:	2bc0      	cmp	r3, #192	; 0xc0
 80032a4:	d013      	beq.n	80032ce <UART_SetConfig+0x1ba>
 80032a6:	2bc0      	cmp	r3, #192	; 0xc0
 80032a8:	d814      	bhi.n	80032d4 <UART_SetConfig+0x1c0>
 80032aa:	2b80      	cmp	r3, #128	; 0x80
 80032ac:	d009      	beq.n	80032c2 <UART_SetConfig+0x1ae>
 80032ae:	2b80      	cmp	r3, #128	; 0x80
 80032b0:	d810      	bhi.n	80032d4 <UART_SetConfig+0x1c0>
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <UART_SetConfig+0x1a8>
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	d006      	beq.n	80032c8 <UART_SetConfig+0x1b4>
 80032ba:	e00b      	b.n	80032d4 <UART_SetConfig+0x1c0>
 80032bc:	2300      	movs	r3, #0
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	e0cc      	b.n	800345c <UART_SetConfig+0x348>
 80032c2:	2302      	movs	r3, #2
 80032c4:	77fb      	strb	r3, [r7, #31]
 80032c6:	e0c9      	b.n	800345c <UART_SetConfig+0x348>
 80032c8:	2304      	movs	r3, #4
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	e0c6      	b.n	800345c <UART_SetConfig+0x348>
 80032ce:	2308      	movs	r3, #8
 80032d0:	77fb      	strb	r3, [r7, #31]
 80032d2:	e0c3      	b.n	800345c <UART_SetConfig+0x348>
 80032d4:	2310      	movs	r3, #16
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e0c0      	b.n	800345c <UART_SetConfig+0x348>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a44      	ldr	r2, [pc, #272]	; (80033f0 <UART_SetConfig+0x2dc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d125      	bne.n	8003330 <UART_SetConfig+0x21c>
 80032e4:	4b3e      	ldr	r3, [pc, #248]	; (80033e0 <UART_SetConfig+0x2cc>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032f2:	d017      	beq.n	8003324 <UART_SetConfig+0x210>
 80032f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032f8:	d817      	bhi.n	800332a <UART_SetConfig+0x216>
 80032fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032fe:	d00b      	beq.n	8003318 <UART_SetConfig+0x204>
 8003300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003304:	d811      	bhi.n	800332a <UART_SetConfig+0x216>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <UART_SetConfig+0x1fe>
 800330a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330e:	d006      	beq.n	800331e <UART_SetConfig+0x20a>
 8003310:	e00b      	b.n	800332a <UART_SetConfig+0x216>
 8003312:	2300      	movs	r3, #0
 8003314:	77fb      	strb	r3, [r7, #31]
 8003316:	e0a1      	b.n	800345c <UART_SetConfig+0x348>
 8003318:	2302      	movs	r3, #2
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e09e      	b.n	800345c <UART_SetConfig+0x348>
 800331e:	2304      	movs	r3, #4
 8003320:	77fb      	strb	r3, [r7, #31]
 8003322:	e09b      	b.n	800345c <UART_SetConfig+0x348>
 8003324:	2308      	movs	r3, #8
 8003326:	77fb      	strb	r3, [r7, #31]
 8003328:	e098      	b.n	800345c <UART_SetConfig+0x348>
 800332a:	2310      	movs	r3, #16
 800332c:	77fb      	strb	r3, [r7, #31]
 800332e:	e095      	b.n	800345c <UART_SetConfig+0x348>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2f      	ldr	r2, [pc, #188]	; (80033f4 <UART_SetConfig+0x2e0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d125      	bne.n	8003386 <UART_SetConfig+0x272>
 800333a:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <UART_SetConfig+0x2cc>)
 800333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003340:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003344:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003348:	d017      	beq.n	800337a <UART_SetConfig+0x266>
 800334a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800334e:	d817      	bhi.n	8003380 <UART_SetConfig+0x26c>
 8003350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003354:	d00b      	beq.n	800336e <UART_SetConfig+0x25a>
 8003356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800335a:	d811      	bhi.n	8003380 <UART_SetConfig+0x26c>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <UART_SetConfig+0x254>
 8003360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003364:	d006      	beq.n	8003374 <UART_SetConfig+0x260>
 8003366:	e00b      	b.n	8003380 <UART_SetConfig+0x26c>
 8003368:	2301      	movs	r3, #1
 800336a:	77fb      	strb	r3, [r7, #31]
 800336c:	e076      	b.n	800345c <UART_SetConfig+0x348>
 800336e:	2302      	movs	r3, #2
 8003370:	77fb      	strb	r3, [r7, #31]
 8003372:	e073      	b.n	800345c <UART_SetConfig+0x348>
 8003374:	2304      	movs	r3, #4
 8003376:	77fb      	strb	r3, [r7, #31]
 8003378:	e070      	b.n	800345c <UART_SetConfig+0x348>
 800337a:	2308      	movs	r3, #8
 800337c:	77fb      	strb	r3, [r7, #31]
 800337e:	e06d      	b.n	800345c <UART_SetConfig+0x348>
 8003380:	2310      	movs	r3, #16
 8003382:	77fb      	strb	r3, [r7, #31]
 8003384:	e06a      	b.n	800345c <UART_SetConfig+0x348>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1b      	ldr	r2, [pc, #108]	; (80033f8 <UART_SetConfig+0x2e4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d138      	bne.n	8003402 <UART_SetConfig+0x2ee>
 8003390:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <UART_SetConfig+0x2cc>)
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003396:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800339a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800339e:	d017      	beq.n	80033d0 <UART_SetConfig+0x2bc>
 80033a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033a4:	d82a      	bhi.n	80033fc <UART_SetConfig+0x2e8>
 80033a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033aa:	d00b      	beq.n	80033c4 <UART_SetConfig+0x2b0>
 80033ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b0:	d824      	bhi.n	80033fc <UART_SetConfig+0x2e8>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <UART_SetConfig+0x2aa>
 80033b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ba:	d006      	beq.n	80033ca <UART_SetConfig+0x2b6>
 80033bc:	e01e      	b.n	80033fc <UART_SetConfig+0x2e8>
 80033be:	2300      	movs	r3, #0
 80033c0:	77fb      	strb	r3, [r7, #31]
 80033c2:	e04b      	b.n	800345c <UART_SetConfig+0x348>
 80033c4:	2302      	movs	r3, #2
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e048      	b.n	800345c <UART_SetConfig+0x348>
 80033ca:	2304      	movs	r3, #4
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e045      	b.n	800345c <UART_SetConfig+0x348>
 80033d0:	2308      	movs	r3, #8
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e042      	b.n	800345c <UART_SetConfig+0x348>
 80033d6:	bf00      	nop
 80033d8:	efff69f3 	.word	0xefff69f3
 80033dc:	40011000 	.word	0x40011000
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40004400 	.word	0x40004400
 80033e8:	40004800 	.word	0x40004800
 80033ec:	40004c00 	.word	0x40004c00
 80033f0:	40005000 	.word	0x40005000
 80033f4:	40011400 	.word	0x40011400
 80033f8:	40007800 	.word	0x40007800
 80033fc:	2310      	movs	r3, #16
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e02c      	b.n	800345c <UART_SetConfig+0x348>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a72      	ldr	r2, [pc, #456]	; (80035d0 <UART_SetConfig+0x4bc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d125      	bne.n	8003458 <UART_SetConfig+0x344>
 800340c:	4b71      	ldr	r3, [pc, #452]	; (80035d4 <UART_SetConfig+0x4c0>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003412:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003416:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800341a:	d017      	beq.n	800344c <UART_SetConfig+0x338>
 800341c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003420:	d817      	bhi.n	8003452 <UART_SetConfig+0x33e>
 8003422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003426:	d00b      	beq.n	8003440 <UART_SetConfig+0x32c>
 8003428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800342c:	d811      	bhi.n	8003452 <UART_SetConfig+0x33e>
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <UART_SetConfig+0x326>
 8003432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003436:	d006      	beq.n	8003446 <UART_SetConfig+0x332>
 8003438:	e00b      	b.n	8003452 <UART_SetConfig+0x33e>
 800343a:	2300      	movs	r3, #0
 800343c:	77fb      	strb	r3, [r7, #31]
 800343e:	e00d      	b.n	800345c <UART_SetConfig+0x348>
 8003440:	2302      	movs	r3, #2
 8003442:	77fb      	strb	r3, [r7, #31]
 8003444:	e00a      	b.n	800345c <UART_SetConfig+0x348>
 8003446:	2304      	movs	r3, #4
 8003448:	77fb      	strb	r3, [r7, #31]
 800344a:	e007      	b.n	800345c <UART_SetConfig+0x348>
 800344c:	2308      	movs	r3, #8
 800344e:	77fb      	strb	r3, [r7, #31]
 8003450:	e004      	b.n	800345c <UART_SetConfig+0x348>
 8003452:	2310      	movs	r3, #16
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e001      	b.n	800345c <UART_SetConfig+0x348>
 8003458:	2310      	movs	r3, #16
 800345a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003464:	d15b      	bne.n	800351e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003466:	7ffb      	ldrb	r3, [r7, #31]
 8003468:	2b08      	cmp	r3, #8
 800346a:	d828      	bhi.n	80034be <UART_SetConfig+0x3aa>
 800346c:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <UART_SetConfig+0x360>)
 800346e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003472:	bf00      	nop
 8003474:	08003499 	.word	0x08003499
 8003478:	080034a1 	.word	0x080034a1
 800347c:	080034a9 	.word	0x080034a9
 8003480:	080034bf 	.word	0x080034bf
 8003484:	080034af 	.word	0x080034af
 8003488:	080034bf 	.word	0x080034bf
 800348c:	080034bf 	.word	0x080034bf
 8003490:	080034bf 	.word	0x080034bf
 8003494:	080034b7 	.word	0x080034b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003498:	f7fe fdc4 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 800349c:	61b8      	str	r0, [r7, #24]
        break;
 800349e:	e013      	b.n	80034c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034a0:	f7fe fdd4 	bl	800204c <HAL_RCC_GetPCLK2Freq>
 80034a4:	61b8      	str	r0, [r7, #24]
        break;
 80034a6:	e00f      	b.n	80034c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034a8:	4b4b      	ldr	r3, [pc, #300]	; (80035d8 <UART_SetConfig+0x4c4>)
 80034aa:	61bb      	str	r3, [r7, #24]
        break;
 80034ac:	e00c      	b.n	80034c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ae:	f7fe fce7 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 80034b2:	61b8      	str	r0, [r7, #24]
        break;
 80034b4:	e008      	b.n	80034c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ba:	61bb      	str	r3, [r7, #24]
        break;
 80034bc:	e004      	b.n	80034c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	77bb      	strb	r3, [r7, #30]
        break;
 80034c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d074      	beq.n	80035b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	005a      	lsls	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	085b      	lsrs	r3, r3, #1
 80034d8:	441a      	add	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	2b0f      	cmp	r3, #15
 80034e8:	d916      	bls.n	8003518 <UART_SetConfig+0x404>
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f0:	d212      	bcs.n	8003518 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	f023 030f 	bic.w	r3, r3, #15
 80034fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	085b      	lsrs	r3, r3, #1
 8003500:	b29b      	uxth	r3, r3
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	b29a      	uxth	r2, r3
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	4313      	orrs	r3, r2
 800350c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	89fa      	ldrh	r2, [r7, #14]
 8003514:	60da      	str	r2, [r3, #12]
 8003516:	e04f      	b.n	80035b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	77bb      	strb	r3, [r7, #30]
 800351c:	e04c      	b.n	80035b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800351e:	7ffb      	ldrb	r3, [r7, #31]
 8003520:	2b08      	cmp	r3, #8
 8003522:	d828      	bhi.n	8003576 <UART_SetConfig+0x462>
 8003524:	a201      	add	r2, pc, #4	; (adr r2, 800352c <UART_SetConfig+0x418>)
 8003526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352a:	bf00      	nop
 800352c:	08003551 	.word	0x08003551
 8003530:	08003559 	.word	0x08003559
 8003534:	08003561 	.word	0x08003561
 8003538:	08003577 	.word	0x08003577
 800353c:	08003567 	.word	0x08003567
 8003540:	08003577 	.word	0x08003577
 8003544:	08003577 	.word	0x08003577
 8003548:	08003577 	.word	0x08003577
 800354c:	0800356f 	.word	0x0800356f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003550:	f7fe fd68 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8003554:	61b8      	str	r0, [r7, #24]
        break;
 8003556:	e013      	b.n	8003580 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003558:	f7fe fd78 	bl	800204c <HAL_RCC_GetPCLK2Freq>
 800355c:	61b8      	str	r0, [r7, #24]
        break;
 800355e:	e00f      	b.n	8003580 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003560:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <UART_SetConfig+0x4c4>)
 8003562:	61bb      	str	r3, [r7, #24]
        break;
 8003564:	e00c      	b.n	8003580 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003566:	f7fe fc8b 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 800356a:	61b8      	str	r0, [r7, #24]
        break;
 800356c:	e008      	b.n	8003580 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800356e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003572:	61bb      	str	r3, [r7, #24]
        break;
 8003574:	e004      	b.n	8003580 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	77bb      	strb	r3, [r7, #30]
        break;
 800357e:	bf00      	nop
    }

    if (pclk != 0U)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d018      	beq.n	80035b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	085a      	lsrs	r2, r3, #1
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	441a      	add	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	2b0f      	cmp	r3, #15
 800359e:	d909      	bls.n	80035b4 <UART_SetConfig+0x4a0>
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a6:	d205      	bcs.n	80035b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	e001      	b.n	80035b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80035c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40007c00 	.word	0x40007c00
 80035d4:	40023800 	.word	0x40023800
 80035d8:	00f42400 	.word	0x00f42400

080035dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01a      	beq.n	80036f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036da:	d10a      	bne.n	80036f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	605a      	str	r2, [r3, #4]
  }
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af02      	add	r7, sp, #8
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003730:	f7fd fc90 	bl	8001054 <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b08      	cmp	r3, #8
 8003742:	d10e      	bne.n	8003762 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003744:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f831 	bl	80037ba <UART_WaitOnFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e027      	b.n	80037b2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b04      	cmp	r3, #4
 800376e:	d10e      	bne.n	800378e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f81b 	bl	80037ba <UART_WaitOnFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e011      	b.n	80037b2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b09c      	sub	sp, #112	; 0x70
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	4613      	mov	r3, r2
 80037c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ca:	e0a7      	b.n	800391c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d2:	f000 80a3 	beq.w	800391c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d6:	f7fd fc3d 	bl	8001054 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d302      	bcc.n	80037ec <UART_WaitOnFlagUntilTimeout+0x32>
 80037e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d13f      	bne.n	800386c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003800:	667b      	str	r3, [r7, #100]	; 0x64
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800380a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800380c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003810:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e6      	bne.n	80037ec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3308      	adds	r3, #8
 8003824:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	663b      	str	r3, [r7, #96]	; 0x60
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3308      	adds	r3, #8
 800383c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800383e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003840:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003842:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003844:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003846:	e841 2300 	strex	r3, r2, [r1]
 800384a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800384c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1e5      	bne.n	800381e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2220      	movs	r2, #32
 8003856:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e068      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	d050      	beq.n	800391c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003888:	d148      	bne.n	800391c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003892:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b2:	637b      	str	r3, [r7, #52]	; 0x34
 80038b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e6      	bne.n	8003894 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3308      	adds	r3, #8
 80038cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	e853 3f00 	ldrex	r3, [r3]
 80038d4:	613b      	str	r3, [r7, #16]
   return(result);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f023 0301 	bic.w	r3, r3, #1
 80038dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3308      	adds	r3, #8
 80038e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038e6:	623a      	str	r2, [r7, #32]
 80038e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ea:	69f9      	ldr	r1, [r7, #28]
 80038ec:	6a3a      	ldr	r2, [r7, #32]
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e5      	bne.n	80038c6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2220      	movs	r2, #32
 80038fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e010      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69da      	ldr	r2, [r3, #28]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4013      	ands	r3, r2
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	429a      	cmp	r2, r3
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	429a      	cmp	r2, r3
 8003938:	f43f af48 	beq.w	80037cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3770      	adds	r7, #112	; 0x70
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003948:	b480      	push	{r7}
 800394a:	b097      	sub	sp, #92	; 0x5c
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	88fa      	ldrh	r2, [r7, #6]
 8003968:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397a:	d10e      	bne.n	800399a <UART_Start_Receive_IT+0x52>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d105      	bne.n	8003990 <UART_Start_Receive_IT+0x48>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f240 12ff 	movw	r2, #511	; 0x1ff
 800398a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800398e:	e02d      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	22ff      	movs	r2, #255	; 0xff
 8003994:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003998:	e028      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10d      	bne.n	80039be <UART_Start_Receive_IT+0x76>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d104      	bne.n	80039b4 <UART_Start_Receive_IT+0x6c>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	22ff      	movs	r2, #255	; 0xff
 80039ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039b2:	e01b      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	227f      	movs	r2, #127	; 0x7f
 80039b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039bc:	e016      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039c6:	d10d      	bne.n	80039e4 <UART_Start_Receive_IT+0x9c>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d104      	bne.n	80039da <UART_Start_Receive_IT+0x92>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	227f      	movs	r2, #127	; 0x7f
 80039d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039d8:	e008      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	223f      	movs	r2, #63	; 0x3f
 80039de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039e2:	e003      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2222      	movs	r2, #34	; 0x22
 80039f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3308      	adds	r3, #8
 8003a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a06:	e853 3f00 	ldrex	r3, [r3]
 8003a0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	657b      	str	r3, [r7, #84]	; 0x54
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3308      	adds	r3, #8
 8003a1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a1c:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a1e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a24:	e841 2300 	strex	r3, r2, [r1]
 8003a28:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1e5      	bne.n	80039fc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a38:	d107      	bne.n	8003a4a <UART_Start_Receive_IT+0x102>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4a21      	ldr	r2, [pc, #132]	; (8003acc <UART_Start_Receive_IT+0x184>)
 8003a46:	669a      	str	r2, [r3, #104]	; 0x68
 8003a48:	e002      	b.n	8003a50 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a20      	ldr	r2, [pc, #128]	; (8003ad0 <UART_Start_Receive_IT+0x188>)
 8003a4e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d019      	beq.n	8003a8c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a76:	637b      	str	r3, [r7, #52]	; 0x34
 8003a78:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e6      	bne.n	8003a58 <UART_Start_Receive_IT+0x110>
 8003a8a:	e018      	b.n	8003abe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	613b      	str	r3, [r7, #16]
   return(result);
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f043 0320 	orr.w	r3, r3, #32
 8003aa0:	653b      	str	r3, [r7, #80]	; 0x50
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aaa:	623b      	str	r3, [r7, #32]
 8003aac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	69f9      	ldr	r1, [r7, #28]
 8003ab0:	6a3a      	ldr	r2, [r7, #32]
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e6      	bne.n	8003a8c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	375c      	adds	r7, #92	; 0x5c
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	08003d83 	.word	0x08003d83
 8003ad0:	08003c1d 	.word	0x08003c1d

08003ad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b095      	sub	sp, #84	; 0x54
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003af0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003afa:	643b      	str	r3, [r7, #64]	; 0x40
 8003afc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e6      	bne.n	8003adc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3308      	adds	r3, #8
 8003b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e5      	bne.n	8003b0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d118      	bne.n	8003b7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f023 0310 	bic.w	r3, r3, #16
 8003b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	6979      	ldr	r1, [r7, #20]
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	613b      	str	r3, [r7, #16]
   return(result);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e6      	bne.n	8003b4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003b90:	bf00      	nop
 8003b92:	3754      	adds	r7, #84	; 0x54
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f7ff fa8a 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bc0:	bf00      	nop
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	6979      	ldr	r1, [r7, #20]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e6      	bne.n	8003bd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff fa56 	bl	80030c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c14:	bf00      	nop
 8003c16:	3720      	adds	r7, #32
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b096      	sub	sp, #88	; 0x58
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c2a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c34:	2b22      	cmp	r3, #34	; 0x22
 8003c36:	f040 8098 	bne.w	8003d6a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c44:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003c48:	b2d9      	uxtb	r1, r3
 8003c4a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	400a      	ands	r2, r1
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d17b      	bne.n	8003d7a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	e853 3f00 	ldrex	r3, [r3]
 8003c8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c96:	653b      	str	r3, [r7, #80]	; 0x50
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ca6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ca8:	e841 2300 	strex	r3, r2, [r1]
 8003cac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e6      	bne.n	8003c82 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3308      	adds	r3, #8
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	e853 3f00 	ldrex	r3, [r3]
 8003cc2:	623b      	str	r3, [r7, #32]
   return(result);
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cd4:	633a      	str	r2, [r7, #48]	; 0x30
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cdc:	e841 2300 	strex	r3, r2, [r1]
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e5      	bne.n	8003cb4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d12e      	bne.n	8003d62 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	e853 3f00 	ldrex	r3, [r3]
 8003d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0310 	bic.w	r3, r3, #16
 8003d1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	461a      	mov	r2, r3
 8003d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2c:	69b9      	ldr	r1, [r7, #24]
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	e841 2300 	strex	r3, r2, [r1]
 8003d34:	617b      	str	r3, [r7, #20]
   return(result);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1e6      	bne.n	8003d0a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d103      	bne.n	8003d52 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2210      	movs	r2, #16
 8003d50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d58:	4619      	mov	r1, r3
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff f9c4 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d60:	e00b      	b.n	8003d7a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fc fcb6 	bl	80006d4 <HAL_UART_RxCpltCallback>
}
 8003d68:	e007      	b.n	8003d7a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699a      	ldr	r2, [r3, #24]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0208 	orr.w	r2, r2, #8
 8003d78:	619a      	str	r2, [r3, #24]
}
 8003d7a:	bf00      	nop
 8003d7c:	3758      	adds	r7, #88	; 0x58
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b096      	sub	sp, #88	; 0x58
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d90:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9a:	2b22      	cmp	r3, #34	; 0x22
 8003d9c:	f040 8098 	bne.w	8003ed0 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dae:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003db0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003db4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003db8:	4013      	ands	r3, r2
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dbe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	1c9a      	adds	r2, r3, #2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d17b      	bne.n	8003ee0 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e06:	643b      	str	r3, [r7, #64]	; 0x40
 8003e08:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e6      	bne.n	8003de8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3308      	adds	r3, #8
 8003e20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3308      	adds	r3, #8
 8003e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e5      	bne.n	8003e1a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d12e      	bne.n	8003ec8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f023 0310 	bic.w	r3, r3, #16
 8003e84:	647b      	str	r3, [r7, #68]	; 0x44
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6979      	ldr	r1, [r7, #20]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e6      	bne.n	8003e70 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d103      	bne.n	8003eb8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff f911 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ec6:	e00b      	b.n	8003ee0 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7fc fc03 	bl	80006d4 <HAL_UART_RxCpltCallback>
}
 8003ece:	e007      	b.n	8003ee0 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0208 	orr.w	r2, r2, #8
 8003ede:	619a      	str	r2, [r3, #24]
}
 8003ee0:	bf00      	nop
 8003ee2:	3758      	adds	r7, #88	; 0x58
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <memset>:
 8003ee8:	4402      	add	r2, r0
 8003eea:	4603      	mov	r3, r0
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d100      	bne.n	8003ef2 <memset+0xa>
 8003ef0:	4770      	bx	lr
 8003ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef6:	e7f9      	b.n	8003eec <memset+0x4>

08003ef8 <__libc_init_array>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	4d0d      	ldr	r5, [pc, #52]	; (8003f30 <__libc_init_array+0x38>)
 8003efc:	4c0d      	ldr	r4, [pc, #52]	; (8003f34 <__libc_init_array+0x3c>)
 8003efe:	1b64      	subs	r4, r4, r5
 8003f00:	10a4      	asrs	r4, r4, #2
 8003f02:	2600      	movs	r6, #0
 8003f04:	42a6      	cmp	r6, r4
 8003f06:	d109      	bne.n	8003f1c <__libc_init_array+0x24>
 8003f08:	4d0b      	ldr	r5, [pc, #44]	; (8003f38 <__libc_init_array+0x40>)
 8003f0a:	4c0c      	ldr	r4, [pc, #48]	; (8003f3c <__libc_init_array+0x44>)
 8003f0c:	f000 f820 	bl	8003f50 <_init>
 8003f10:	1b64      	subs	r4, r4, r5
 8003f12:	10a4      	asrs	r4, r4, #2
 8003f14:	2600      	movs	r6, #0
 8003f16:	42a6      	cmp	r6, r4
 8003f18:	d105      	bne.n	8003f26 <__libc_init_array+0x2e>
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
 8003f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f20:	4798      	blx	r3
 8003f22:	3601      	adds	r6, #1
 8003f24:	e7ee      	b.n	8003f04 <__libc_init_array+0xc>
 8003f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f2a:	4798      	blx	r3
 8003f2c:	3601      	adds	r6, #1
 8003f2e:	e7f2      	b.n	8003f16 <__libc_init_array+0x1e>
 8003f30:	08003ffc 	.word	0x08003ffc
 8003f34:	08003ffc 	.word	0x08003ffc
 8003f38:	08003ffc 	.word	0x08003ffc
 8003f3c:	08004000 	.word	0x08004000

08003f40 <strcpy>:
 8003f40:	4603      	mov	r3, r0
 8003f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f46:	f803 2b01 	strb.w	r2, [r3], #1
 8003f4a:	2a00      	cmp	r2, #0
 8003f4c:	d1f9      	bne.n	8003f42 <strcpy+0x2>
 8003f4e:	4770      	bx	lr

08003f50 <_init>:
 8003f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f52:	bf00      	nop
 8003f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f56:	bc08      	pop	{r3}
 8003f58:	469e      	mov	lr, r3
 8003f5a:	4770      	bx	lr

08003f5c <_fini>:
 8003f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5e:	bf00      	nop
 8003f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f62:	bc08      	pop	{r3}
 8003f64:	469e      	mov	lr, r3
 8003f66:	4770      	bx	lr
